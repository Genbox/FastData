//! This file is auto-generated. Do not edit manually.
//! Structure: HashSetLinear
#![allow(unused_parens)]
#![allow(missing_docs)]
pub struct MyData;

impl MyData {
    const BUCKETS: [B; 23] = [
        B { start_index: 0, end_index: 0 }, B { start_index: 1, end_index: 1 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 2, end_index: 2 }, B { start_index: 3, end_index: 3 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 4, end_index: 4 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }
    ];

    const ITEMS: [i32; 5] = [
        0, 1, 2147483647, -2147483648, -1
    ];

    const HASH_CODES: [u32; 5] = [
        0, 1, 2147483647, 2147483648, 4294967295
    ];

    fn get_hash(value: i32) -> u32 {
        (value as u32)
    }

    pub fn contains(value: i32) -> bool {
        if value < -2147483648 || value > 2147483647 {
            return false;
        }

        let hash = Self::get_hash(value);
        let bucket = &Self::BUCKETS[(hash % 23) as usize];
        let mut index: u8 = bucket.start_index;
        let end_index: u8 = bucket.end_index;

        while index <= end_index {
            if Self::HASH_CODES[index as usize] == hash && value == Self::ITEMS[index as usize] {
                return true;
            }
            index += 1;
        }

        false
    }

    pub const ITEM_COUNT: usize = 5;
    pub const MIN_VALUE: i32 = -2147483648;
    pub const MAX_VALUE: i32 = 2147483647;
}
struct B {
    start_index: u8,
    end_index: u8,
}
