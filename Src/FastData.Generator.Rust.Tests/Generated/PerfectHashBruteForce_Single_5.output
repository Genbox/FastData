//! This file is auto-generated. Do not edit manually.
//! Structure: PerfectHashBruteForce
#![allow(unused_parens)]
#![allow(missing_docs)]
pub struct MyData;

impl MyData {
    const ENTRIES: [E; 5] = [
        E { value: -1.0, hash_code: 3196059650 }, E { value: 340282300000000000000000000000000000000.0, hash_code: 2122317821 }, E { value: 1.0, hash_code: 1048576002 }, E { value: 0.0, hash_code: 16777218 }, E { value: -340282300000000000000000000000000000000.0, hash_code: 4269801469 }
    ];

    fn get_hash(value: f32, seed: u32) -> u32 {
        (value as u32) ^ seed
    }

    pub fn contains(value: f32) -> bool {
        if value < -340282346638529000000000000000000000000.0 || value > 340282346638529000000000000000000000000.0 {
            return false;
        }

        let hash = Self::get_hash(value, 16777218);
        let index = (hash % 5) as usize;
        let entry = &Self::ENTRIES[index];

        hash == entry.hash_code && value == entry.value
    }

    pub const ITEM_COUNT: usize = 5;
    pub const MIN_VALUE: f32 = -340282346638529000000000000000000000000.0;
    pub const MAX_VALUE: f32 = 340282346638529000000000000000000000000.0;
}
struct E {
    value: f32,
    hash_code: u32,
}
