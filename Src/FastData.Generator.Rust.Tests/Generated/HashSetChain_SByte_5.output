//! This file is auto-generated. Do not edit manually.
//! Structure: HashSetChain
#![allow(unused_parens)]
#![allow(missing_docs)]
pub struct MyData;

impl MyData {
    const BUCKETS: [i8; 5] = [
        3, 4, 5, 1, 0
    ];

    const ENTRIES: [E; 5] = [
        E { hash_code: 4294967168, next: -1, value: -128 }, E { hash_code: 4294967295, next: -1, value: -1 }, E { hash_code: 0, next: 1, value: 0 }, E { hash_code: 1, next: -1, value: 1 }, E { hash_code: 127, next: -1, value: 127 }
    ];

    fn get_hash(value: i8) -> u32 {
        (value as u32)
    }

    pub fn contains(value: i8) -> bool {
        if value < -128 || value > 127 {
            return false;
        }

        let hash = Self::get_hash(value);
        let index = hash % 5;
        let mut i: i8 = (Self::BUCKETS[index as usize] as i8) - 1;

        while i >= 0 {
            let entry = &Self::ENTRIES[i as usize];
            if entry.hash_code == hash && value == entry.value {
                return true;
            }
            i = entry.next;
        }

        false
    }

    pub const ITEM_COUNT: usize = 5;
    pub const MIN_VALUE: i8 = -128;
    pub const MAX_VALUE: i8 = 127;
}
struct E {
    hash_code: u32,
    next: i8,
    value: i8,
}
