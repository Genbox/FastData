//! This file is auto-generated. Do not edit manually.
//! Structure: HashSetLinear
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct MyData;

impl MyData {
    const BUCKETS: [B; 7] = [
        B { start_index: 0, end_index: 0 }, B { start_index: 1, end_index: 1 }, B { start_index: 2, end_index: 2 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }
    ];

    const ITEMS: [i32; 3] = [
        0, i32::MAX, i32::MIN
    ];

    const HASH_CODES: [u32; 3] = [
        0, 2147483647, 2147483648
    ];

    #[inline(always)]
    fn get_hash(value: i32) -> u32 {
        value as u32
    }

    #[must_use]
    pub fn contains(value: i32) -> bool {
        if value < i32::MIN || value > i32::MAX {
            return false;
        }

        let hash = unsafe { Self::get_hash(value) };
        let bucket = &Self::BUCKETS[(hash % 7) as usize];
        let mut index: u8 = bucket.start_index;
        let end_index: u8 = bucket.end_index;

        while index <= end_index {
            if Self::HASH_CODES[index as usize] == hash && Self::ITEMS[index as usize] == value {
                return true;
            }
            index += 1;
        }

        false
    }

    pub const ITEM_COUNT: usize = 3;
    pub const MIN_VALUE: i32 = i32::MIN;
    pub const MAX_VALUE: i32 = i32::MAX;
}
struct B {
    start_index: u8,
    end_index: u8,
}
