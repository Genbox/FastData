//! This file is auto-generated. Do not edit manually.
//! Structure: HashSetLinear
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct MyData;

impl MyData {
    const BUCKETS: [B; 7] = [
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 1, end_index: 1 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 2, end_index: 2 }
    ];

    const ITEMS: [&'static str; 3] = [
        "item2", "item1", "item3"
    ];

    const HASH_CODES: [u32; 3] = [
        2391420970, 3957504911, 825337029
    ];

    #[inline]
    unsafe fn get_hash(value: &str) -> u32 {
        let mut hash: u32 = 352654597;

        let mut ptr = value.as_ptr();
        let mut len = value.len();

         while len > 0 {
                hash = (((hash << 5) | (hash >> 27)).wrapping_add(hash)) ^ (ptr.read() as u32);
                ptr = ptr.add(1);
                len -= 1;
         }

        hash.wrapping_mul(1566083941).wrapping_add(352654597)
    }

    #[must_use]
    pub fn contains(value: &'static str) -> bool {
        if value.len() != 5 as usize {
            return false;
        }

        let hash = unsafe { Self::get_hash(value) };
        let bucket = &Self::BUCKETS[(hash % 7) as usize];
        let mut index: u8 = bucket.start_index;
        let end_index: u8 = bucket.end_index;

        while index <= end_index {
            if Self::HASH_CODES[index as usize] == hash && Self::ITEMS[index as usize] == value {
                return true;
            }
            index += 1;
        }

        false
    }

    pub const ITEM_COUNT: usize = 3;
    pub const MIN_LENGTH: usize = 5;
    pub const MAX_LENGTH: usize = 5;
}
struct B {
    start_index: u8,
    end_index: u8,
}
