//! This file is auto-generated. Do not edit manually.
//! Structure: HashSet
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct HashSetLinearStructure_String_100;

impl HashSetLinearStructure_String_100 {
    const BUCKETS: [B; 293] = [
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 1, end_index: 1 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 2, end_index: 2 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 3, end_index: 4 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 5, end_index: 6 }, B { start_index: 0, end_index: 0 }, B { start_index: 7, end_index: 7 }, B { start_index: 8, end_index: 8 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 9, end_index: 9 }, B { start_index: 0, end_index: 0 }, B { start_index: 10, end_index: 10 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 11, end_index: 12 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 13, end_index: 13 }, B { start_index: 14, end_index: 14 }, B { start_index: 15, end_index: 15 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 16, end_index: 16 }, B { start_index: 17, end_index: 17 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 18, end_index: 18 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 19, end_index: 19 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 20, end_index: 20 }, B { start_index: 21, end_index: 21 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 22, end_index: 22 }, B { start_index: 23, end_index: 23 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 24, end_index: 25 }, B { start_index: 0, end_index: 0 }, B { start_index: 26, end_index: 27 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 28, end_index: 29 }, B { start_index: 30, end_index: 30 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 31, end_index: 32 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 33, end_index: 34 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 35, end_index: 35 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 36, end_index: 37 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 38, end_index: 38 }, B { start_index: 39, end_index: 39 }, B { start_index: 40, end_index: 40 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 41, end_index: 41 }, B { start_index: 42, end_index: 42 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 43, end_index: 43 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 44, end_index: 45 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 46, end_index: 46 }, 
        B { start_index: 47, end_index: 47 }, B { start_index: 0, end_index: 0 }, B { start_index: 48, end_index: 48 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 49, end_index: 49 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 50, end_index: 50 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 51, end_index: 52 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 53, end_index: 53 }, B { start_index: 54, end_index: 54 }, B { start_index: 55, end_index: 55 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 56, end_index: 56 }, B { start_index: 57, end_index: 57 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 58, end_index: 58 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 59, end_index: 59 }, B { start_index: 60, end_index: 60 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 61, end_index: 61 }, B { start_index: 62, end_index: 62 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 63, end_index: 63 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 64, end_index: 65 }, B { start_index: 0, end_index: 0 }, B { start_index: 66, end_index: 66 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 67, end_index: 68 }, B { start_index: 69, end_index: 69 }, B { start_index: 0, end_index: 0 }, B { start_index: 70, end_index: 70 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 71, end_index: 72 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 73, end_index: 74 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 75, end_index: 75 }, B { start_index: 76, end_index: 76 }, B { start_index: 77, end_index: 77 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 78, end_index: 78 }, B { start_index: 79, end_index: 79 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 80, end_index: 80 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 81, end_index: 81 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 82, end_index: 82 }, B { start_index: 83, end_index: 83 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 84, end_index: 84 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 85, end_index: 85 }, B { start_index: 86, end_index: 86 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 87, end_index: 87 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 88, end_index: 89 }, B { start_index: 0, end_index: 0 }, B { start_index: 90, end_index: 91 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 92, end_index: 92 }, B { start_index: 93, end_index: 93 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 94, end_index: 95 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 96, end_index: 96 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 97, end_index: 97 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 98, end_index: 98 }, B { start_index: 99, end_index: 99 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }
    ];

    const ITEMS: [&'static str; 100] = [
        "86", "41", "6", "38", "9", "35", "13", "75", "29", "24", 
        "64", "30", "16", "92", "53", "21", "83", "42", "3", "19", 
        "95", "70", "84", "61", "37", "11", "77", "59", "78", "56", 
        "26", "66", "48", "69", "47", "0", "32", "14", "90", "51", 
        "23", "81", "40", "5", "39", "8", "72", "28", "98", "63", 
        "89", "31", "17", "93", "54", "20", "82", "45", "2", "96", 
        "71", "87", "60", "7", "34", "12", "74", "79", "57", "25", 
        "65", "68", "46", "33", "15", "91", "52", "22", "80", "43", 
        "4", "18", "94", "73", "99", "85", "62", "88", "36", "10", 
        "76", "58", "55", "27", "67", "49", "44", "1", "97", "50"
    ];

    const HASH_CODES: [u64; 100] = [
        11144406865724064596, 11144406297235594013, 18225461104721359418, 11144406337953776479, 18225461125080450651, 11144406358312867712, 11144406358312867712, 11144406139061115972, 11144406488297834815, 11144406508656926048, 
        11144406289405174308, 11144406350482448007, 11144406350482448007, 11144406720078258083, 11144406151589787500, 11144406500826506343, 11144406870422316419, 11144406301933845836, 18225461109419611241, 11144406342652028302, 
        11144406712247838378, 11144406143759367795, 11144406862591896714, 11144406294103426131, 11144406355180699830, 11144406355180699830, 11144406135928948090, 11144406135928948090, 11144406156288039323, 11144406156288039323, 
        11144406505524758166, 11144406286273006426, 11144406286273006426, 11144406306632097659, 11144406306632097659, 18225461114117863064, 11144406347350280125, 11144406347350280125, 11144406716946090201, 11144406148457619618, 
        11144406497694338461, 11144406867290148537, 11144406298801677954, 18225461106287443359, 11144406339519860420, 18225461126646534592, 11144406140627199913, 11144406489863918756, 11144406729474761729, 11144406290971258249, 
        11144406879818820065, 11144406352048531948, 11144406352048531948, 11144406721644342024, 11144406153155871441, 11144406502392590284, 11144406871988400360, 11144406303499929777, 18225461110985695182, 11144406713813922319, 
        11144406145325451736, 11144406864157980655, 11144406295669510072, 18225461103155275477, 11144406356746783771, 11144406356746783771, 11144406137495032031, 11144406157854123264, 11144406157854123264, 11144406507090842107, 
        11144406287839090367, 11144406308198181600, 11144406308198181600, 11144406348916364066, 11144406348916364066, 11144406718512174142, 11144406150023703559, 11144406499260422402, 11144406868856232478, 11144406300367761895, 
        18225461107853527300, 11144406341085944361, 11144406710681754437, 11144406142193283854, 11144406731040845670, 11144406861025812773, 11144406292537342190, 11144406881384904006, 11144406353614615889, 11144406353614615889, 
        11144406134362864149, 11144406134362864149, 11144406154721955382, 11144406503958674225, 11144406284706922485, 11144406284706922485, 11144406305066013718, 18225461112551779123, 11144406715380006260, 11144406146891535677
    ];

    #[inline]
    unsafe fn get_hash(value: &str) -> u64 {
        let mut hash: u64 = 352654597;

        let mut ptr = value.as_ptr();
        let mut len = value.len();

         while len > 0 {
                hash = (((hash << 5) | (hash >> 27)).wrapping_add(hash)) ^ (ptr.read() as u64);
                ptr = ptr.add(1);
                len -= 1;
         }

        hash.wrapping_mul(1566083941).wrapping_add(352654597)
    }

    #[must_use]
    pub fn contains(value: &'static str) -> bool {
        if value.len() < 1 as usize || value.len() > 2 as usize {
            return false;
        }

        let hash = unsafe { Self::get_hash(value) };
        let bucket = &Self::BUCKETS[(hash % 293) as usize];
        let mut index: u8 = bucket.start_index;
        let end_index: u8 = bucket.end_index;

        while index <= end_index {
            if Self::HASH_CODES[index as usize] == hash && Self::ITEMS[index as usize] == value {
                return true;
            }
            index += 1;
        }

        false
    }

    pub const ITEM_COUNT: usize = 100;
    pub const MIN_LENGTH: usize = 1;
    pub const MAX_LENGTH: usize = 2;
}
struct B {
    start_index: u8,
    end_index: u8,
}
