//! This file is auto-generated. Do not edit manually.
//! Structure: HashSet
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct HashSetLinearStructure_Int32_100;

impl HashSetLinearStructure_Int32_100 {
    const BUCKETS: [B; 239] = [
        B { start_index: 0, end_index: 0 }, B { start_index: 1, end_index: 1 }, B { start_index: 2, end_index: 2 }, B { start_index: 3, end_index: 3 }, B { start_index: 4, end_index: 4 }, B { start_index: 5, end_index: 5 }, B { start_index: 6, end_index: 6 }, B { start_index: 7, end_index: 7 }, B { start_index: 8, end_index: 8 }, B { start_index: 9, end_index: 9 }, 
        B { start_index: 10, end_index: 10 }, B { start_index: 11, end_index: 11 }, B { start_index: 12, end_index: 12 }, B { start_index: 13, end_index: 13 }, B { start_index: 14, end_index: 14 }, B { start_index: 15, end_index: 15 }, B { start_index: 16, end_index: 16 }, B { start_index: 17, end_index: 17 }, B { start_index: 18, end_index: 18 }, B { start_index: 19, end_index: 19 }, 
        B { start_index: 20, end_index: 20 }, B { start_index: 21, end_index: 21 }, B { start_index: 22, end_index: 22 }, B { start_index: 23, end_index: 23 }, B { start_index: 24, end_index: 24 }, B { start_index: 25, end_index: 25 }, B { start_index: 26, end_index: 26 }, B { start_index: 27, end_index: 27 }, B { start_index: 28, end_index: 28 }, B { start_index: 29, end_index: 29 }, 
        B { start_index: 30, end_index: 30 }, B { start_index: 31, end_index: 31 }, B { start_index: 32, end_index: 32 }, B { start_index: 33, end_index: 33 }, B { start_index: 34, end_index: 34 }, B { start_index: 35, end_index: 35 }, B { start_index: 36, end_index: 36 }, B { start_index: 37, end_index: 37 }, B { start_index: 38, end_index: 38 }, B { start_index: 39, end_index: 39 }, 
        B { start_index: 40, end_index: 40 }, B { start_index: 41, end_index: 41 }, B { start_index: 42, end_index: 42 }, B { start_index: 43, end_index: 43 }, B { start_index: 44, end_index: 44 }, B { start_index: 45, end_index: 45 }, B { start_index: 46, end_index: 46 }, B { start_index: 47, end_index: 47 }, B { start_index: 48, end_index: 48 }, B { start_index: 49, end_index: 49 }, 
        B { start_index: 50, end_index: 50 }, B { start_index: 51, end_index: 51 }, B { start_index: 52, end_index: 52 }, B { start_index: 53, end_index: 53 }, B { start_index: 54, end_index: 54 }, B { start_index: 55, end_index: 55 }, B { start_index: 56, end_index: 56 }, B { start_index: 57, end_index: 57 }, B { start_index: 58, end_index: 58 }, B { start_index: 59, end_index: 59 }, 
        B { start_index: 60, end_index: 60 }, B { start_index: 61, end_index: 61 }, B { start_index: 62, end_index: 62 }, B { start_index: 63, end_index: 63 }, B { start_index: 64, end_index: 64 }, B { start_index: 65, end_index: 65 }, B { start_index: 66, end_index: 66 }, B { start_index: 67, end_index: 67 }, B { start_index: 68, end_index: 68 }, B { start_index: 69, end_index: 69 }, 
        B { start_index: 70, end_index: 70 }, B { start_index: 71, end_index: 71 }, B { start_index: 72, end_index: 72 }, B { start_index: 73, end_index: 73 }, B { start_index: 74, end_index: 74 }, B { start_index: 75, end_index: 75 }, B { start_index: 76, end_index: 76 }, B { start_index: 77, end_index: 77 }, B { start_index: 78, end_index: 78 }, B { start_index: 79, end_index: 79 }, 
        B { start_index: 80, end_index: 80 }, B { start_index: 81, end_index: 81 }, B { start_index: 82, end_index: 82 }, B { start_index: 83, end_index: 83 }, B { start_index: 84, end_index: 84 }, B { start_index: 85, end_index: 85 }, B { start_index: 86, end_index: 86 }, B { start_index: 87, end_index: 87 }, B { start_index: 88, end_index: 88 }, B { start_index: 89, end_index: 89 }, 
        B { start_index: 90, end_index: 90 }, B { start_index: 91, end_index: 91 }, B { start_index: 92, end_index: 92 }, B { start_index: 93, end_index: 93 }, B { start_index: 94, end_index: 94 }, B { start_index: 95, end_index: 95 }, B { start_index: 96, end_index: 96 }, B { start_index: 97, end_index: 97 }, B { start_index: 98, end_index: 98 }, B { start_index: 99, end_index: 99 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }
    ];

    const ITEMS: [i32; 100] = [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
        10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
        30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
        50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
        70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 
        90, 91, 92, 93, 94, 95, 96, 97, 98, 99
    ];

    const HASH_CODES: [u64; 100] = [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
        10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
        30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
        50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
        70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 
        90, 91, 92, 93, 94, 95, 96, 97, 98, 99
    ];

    #[inline(always)]
    fn get_hash(value: i32) -> u64 {
        value as u64
    }

    #[must_use]
    pub fn contains(value: i32) -> bool {
        if value < 0 || value > 99 {
            return false;
        }

        let hash = unsafe { Self::get_hash(value) };
        let bucket = &Self::BUCKETS[(hash % 239) as usize];
        let mut index: u8 = bucket.start_index;
        let end_index: u8 = bucket.end_index;

        while index <= end_index {
            if Self::HASH_CODES[index as usize] == hash && Self::ITEMS[index as usize] == value {
                return true;
            }
            index += 1;
        }

        false
    }

    pub const ITEM_COUNT: usize = 100;
    pub const MIN_VALUE: i32 = 0;
    pub const MAX_VALUE: i32 = 99;
}
struct B {
    start_index: u8,
    end_index: u8,
}
