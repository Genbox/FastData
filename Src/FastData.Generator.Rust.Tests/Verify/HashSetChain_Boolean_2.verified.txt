//! This file is auto-generated. Do not edit manually.
//! Structure: HashSetChain
#![allow(unused_parens)]
#![allow(missing_docs)]
pub struct MyData;

impl MyData {
    const BUCKETS: [i8; 2] = [
        2, 1
    ];

    const ENTRIES: [E; 2] = [
        E { hash_code: 1, next: -1, value: true }, E { hash_code: 0, next: -1, value: false }
    ];

    fn get_hash(value: bool) -> u32 {
        (value as u32)
    }

    pub fn contains(value: bool) -> bool {


        let hash = Self::get_hash(value);
        let index = hash % 2;
        let mut i: i8 = (Self::BUCKETS[index as usize] as i8) - 1;

        while i >= 0 {
            let entry = &Self::ENTRIES[i as usize];
            if entry.hash_code == hash && value == entry.value {
                return true;
            }
            i = entry.next;
        }

        false
    }

    pub const ITEM_COUNT: usize = 2;
}
struct E {
    hash_code: u32,
    next: i8,
    value: bool,
}
