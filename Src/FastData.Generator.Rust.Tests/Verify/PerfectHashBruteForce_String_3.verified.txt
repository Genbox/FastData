//! This file is auto-generated. Do not edit manually.
//! Structure: PerfectHashBruteForce
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct MyData;

impl MyData {
    const ENTRIES: [E; 3] = [
        E { value: "item2", hash_code: 2874739758 }, E { value: "item3", hash_code: 2030593309 }, E { value: "item1", hash_code: 3482164928 }
    ];

    #[inline]
    unsafe fn get_hash(value: &str) -> u32 {
        let mut hash: u32 = 352654597;

        let mut ptr = value.as_ptr();
        let mut len = value.len();

        while len > 0 {
            hash = (((hash << 5) | (hash >> 27)) + hash) ^ *ptr as u32;
            ptr = ptr.add(1);
            len -= 1;
        }

        return 352654597 + hash.wrapping_mul(1566083941)
    }

    fn murmur_32(mut h: u32) -> u32 {
        h ^= h >> 16;
        h = h.wrapping_mul(0x85EB_CA6B);
        h ^= h >> 13;
        h = h.wrapping_mul(0xC2B2_AE35);
        h ^= h >> 16;
        return h;
    }

    #[must_use]
    pub fn contains(value: &str) -> bool {
        if value.len() != 5 {
            return false;
        }
        let hash = Self::murmur_32(unsafe { Self::get_hash(value) } ^ 3);
        let index = (hash % 3) as usize;
        let entry = &Self::ENTRIES[index];

        return hash == entry.hash_code && value == entry.value;
    }

    pub const ITEM_COUNT: usize = 3;
    pub const MIN_LENGTH: usize = 5;
    pub const MAX_LENGTH: usize = 5;
}
struct E {
    value: &'static str,
    hash_code: u32,
}
