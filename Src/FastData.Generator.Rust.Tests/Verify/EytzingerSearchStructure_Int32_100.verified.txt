//! This file is auto-generated. Do not edit manually.
//! Structure: BinarySearch (EytzingerSearch)
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct EytzingerSearchStructure_Int32_100;

impl EytzingerSearchStructure_Int32_100 {
    const ENTRIES: [i32; 100] = [
        63, 31, 84, 15, 47, 76, 92, 7, 23, 39, 
        55, 71, 80, 88, 96, 3, 11, 19, 27, 35, 
        43, 51, 59, 67, 74, 78, 82, 86, 90, 94, 
        98, 1, 5, 9, 13, 17, 21, 25, 29, 33, 
        37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 
        75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 
        95, 97, 99, 0, 2, 4, 6, 8, 10, 12, 
        14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 
        34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 
        54, 56, 58, 60, 62, 64, 66, 68, 70, 72
    ];

    #[must_use]
    pub fn contains(value: i32) -> bool {
        if value < 0 || value > 99 {
            return false;
        }

        let mut i: usize = 0;
        while i < Self::ENTRIES.len() {
            let entry = Self::ENTRIES[i];

            if entry == value {
                return true;
            }
            if entry < value {
                i = 2 * i + 2;
            } else {
                i = 2 * i + 1;
            }
        }

        false
    }

    pub const ITEM_COUNT: usize = 100;
    pub const MIN_VALUE: i32 = 0;
    pub const MAX_VALUE: i32 = 99;
}