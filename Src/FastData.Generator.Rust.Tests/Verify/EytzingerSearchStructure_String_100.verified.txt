//! This file is auto-generated. Do not edit manually.
//! Structure: BinarySearch (EytzingerSearch)
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct EytzingerSearchStructure_String_100;

impl EytzingerSearchStructure_String_100 {
    const KEYS: [&str; 100] = [
        "66", "37", "85", "22", "51", "78", "92", "15", "3", "44", 
        "59", "73", "81", "89", "96", "11", "19", "26", "33", "40", 
        "48", "55", "62", "7", "76", "8", "83", "87", "90", "94", 
        "98", "1", "13", "17", "20", "24", "28", "31", "35", "39", 
        "42", "46", "5", "53", "57", "60", "64", "68", "71", "75", 
        "77", "79", "80", "82", "84", "86", "88", "9", "91", "93", 
        "95", "97", "99", "0", "10", "12", "14", "16", "18", "2", 
        "21", "23", "25", "27", "29", "30", "32", "34", "36", "38", 
        "4", "41", "43", "45", "47", "49", "50", "52", "54", "56", 
        "58", "6", "61", "63", "65", "67", "69", "70", "72", "74"
    ];

    #[must_use]
    pub fn contains(key: &str) -> bool {
        if key.len() < 1 as usize || key.len() > 2 as usize {
            return false;
        }

        let mut i: usize = 0;
        while i < Self::KEYS.len() {
            let entry = Self::KEYS[i];

            if entry == key {
                return true;
            }
            if entry < key {
                i = 2 * i + 2;
            } else {
                i = 2 * i + 1;
            }
        }

        false
    }

    pub const ITEM_COUNT: usize = 100;
    pub const MIN_LENGTH: usize = 1;
    pub const MAX_LENGTH: usize = 2;
}