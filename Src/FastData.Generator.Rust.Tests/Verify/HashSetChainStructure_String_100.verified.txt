//! This file is auto-generated. Do not edit manually.
//! Structure: HashSet
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct HashSetChainStructure_String_100;

impl HashSetChainStructure_String_100 {
    const BUCKETS: [i8; 100] = [
        69, 91, 23, 0, 0, 0, 89, 31, 65, 0, 
        0, 0, 36, 73, 85, 30, 0, 0, 52, 97, 
        40, 0, 0, 79, 94, 33, 67, 0, 0, 99, 
        38, 75, 0, 0, 0, 0, 72, 95, 0, 0, 
        0, 55, 92, 22, 0, 0, 0, 0, 32, 77, 
        0, 10, 0, 0, 74, 88, 29, 0, 0, 70, 
        98, 24, 0, 0, 80, 90, 34, 66, 0, 0, 
        100, 35, 76, 86, 0, 0, 0, 51, 96, 39, 
        0, 0, 56, 93, 21, 68, 0, 0, 0, 37, 
        78, 0, 9, 0, 0, 71, 87, 0, 0, 0
    ];

    const ENTRIES: [E; 100] = [
        E { hash_code: 18225461114117863064, next: -1, value: "0" }, E { hash_code: 18225461112551779123, next: -1, value: "1" }, E { hash_code: 18225461110985695182, next: -1, value: "2" }, E { hash_code: 18225461109419611241, next: -1, value: "3" }, E { hash_code: 18225461107853527300, next: -1, value: "4" }, E { hash_code: 18225461106287443359, next: -1, value: "5" }, E { hash_code: 18225461104721359418, next: -1, value: "6" }, E { hash_code: 18225461103155275477, next: -1, value: "7" }, E { hash_code: 18225461126646534592, next: -1, value: "8" }, E { hash_code: 18225461125080450651, next: -1, value: "9" }, 
        E { hash_code: 11144406353614615889, next: -1, value: "10" }, E { hash_code: 11144406355180699830, next: -1, value: "11" }, E { hash_code: 11144406356746783771, next: -1, value: "12" }, E { hash_code: 11144406358312867712, next: -1, value: "13" }, E { hash_code: 11144406347350280125, next: -1, value: "14" }, E { hash_code: 11144406348916364066, next: -1, value: "15" }, E { hash_code: 11144406350482448007, next: -1, value: "16" }, E { hash_code: 11144406352048531948, next: -1, value: "17" }, E { hash_code: 11144406341085944361, next: -1, value: "18" }, E { hash_code: 11144406342652028302, next: -1, value: "19" }, 
        E { hash_code: 11144406502392590284, next: -1, value: "20" }, E { hash_code: 11144406500826506343, next: -1, value: "21" }, E { hash_code: 11144406499260422402, next: 19, value: "22" }, E { hash_code: 11144406497694338461, next: 18, value: "23" }, E { hash_code: 11144406508656926048, next: 17, value: "24" }, E { hash_code: 11144406507090842107, next: 16, value: "25" }, E { hash_code: 11144406505524758166, next: 15, value: "26" }, E { hash_code: 11144406503958674225, next: 14, value: "27" }, E { hash_code: 11144406489863918756, next: -1, value: "28" }, E { hash_code: 11144406488297834815, next: -1, value: "29" }, 
        E { hash_code: 11144406350482448007, next: 25, value: "30" }, E { hash_code: 11144406352048531948, next: 24, value: "31" }, E { hash_code: 11144406347350280125, next: 27, value: "32" }, E { hash_code: 11144406348916364066, next: 26, value: "33" }, E { hash_code: 11144406356746783771, next: 12, value: "34" }, E { hash_code: 11144406358312867712, next: 13, value: "35" }, E { hash_code: 11144406353614615889, next: 10, value: "36" }, E { hash_code: 11144406355180699830, next: 11, value: "37" }, E { hash_code: 11144406337953776479, next: -1, value: "38" }, E { hash_code: 11144406339519860420, next: -1, value: "39" }, 
        E { hash_code: 11144406298801677954, next: -1, value: "40" }, E { hash_code: 11144406297235594013, next: -1, value: "41" }, E { hash_code: 11144406301933845836, next: -1, value: "42" }, E { hash_code: 11144406300367761895, next: -1, value: "43" }, E { hash_code: 11144406305066013718, next: 6, value: "44" }, E { hash_code: 11144406303499929777, next: 7, value: "45" }, E { hash_code: 11144406308198181600, next: 4, value: "46" }, E { hash_code: 11144406306632097659, next: 5, value: "47" }, E { hash_code: 11144406286273006426, next: -1, value: "48" }, E { hash_code: 11144406284706922485, next: -1, value: "49" }, 
        E { hash_code: 11144406146891535677, next: 45, value: "50" }, E { hash_code: 11144406148457619618, next: 44, value: "51" }, E { hash_code: 11144406150023703559, next: 47, value: "52" }, E { hash_code: 11144406151589787500, next: 46, value: "53" }, E { hash_code: 11144406153155871441, next: 3, value: "54" }, E { hash_code: 11144406154721955382, next: 2, value: "55" }, E { hash_code: 11144406156288039323, next: 1, value: "56" }, E { hash_code: 11144406157854123264, next: 0, value: "57" }, E { hash_code: 11144406134362864149, next: -1, value: "58" }, E { hash_code: 11144406135928948090, next: -1, value: "59" }, 
        E { hash_code: 11144406295669510072, next: -1, value: "60" }, E { hash_code: 11144406294103426131, next: -1, value: "61" }, E { hash_code: 11144406292537342190, next: 59, value: "62" }, E { hash_code: 11144406290971258249, next: 58, value: "63" }, E { hash_code: 11144406289405174308, next: -1, value: "64" }, E { hash_code: 11144406287839090367, next: -1, value: "65" }, E { hash_code: 11144406286273006426, next: 48, value: "66" }, E { hash_code: 11144406284706922485, next: 49, value: "67" }, E { hash_code: 11144406308198181600, next: 53, value: "68" }, E { hash_code: 11144406306632097659, next: 52, value: "69" }, 
        E { hash_code: 11144406143759367795, next: 43, value: "70" }, E { hash_code: 11144406145325451736, next: 42, value: "71" }, E { hash_code: 11144406140627199913, next: 41, value: "72" }, E { hash_code: 11144406142193283854, next: 40, value: "73" }, E { hash_code: 11144406137495032031, next: 61, value: "74" }, E { hash_code: 11144406139061115972, next: 60, value: "75" }, E { hash_code: 11144406134362864149, next: 63, value: "76" }, E { hash_code: 11144406135928948090, next: 62, value: "77" }, E { hash_code: 11144406156288039323, next: 56, value: "78" }, E { hash_code: 11144406157854123264, next: 57, value: "79" }, 
        E { hash_code: 11144406868856232478, next: -1, value: "80" }, E { hash_code: 11144406867290148537, next: -1, value: "81" }, E { hash_code: 11144406871988400360, next: -1, value: "82" }, E { hash_code: 11144406870422316419, next: -1, value: "83" }, E { hash_code: 11144406862591896714, next: -1, value: "84" }, E { hash_code: 11144406861025812773, next: -1, value: "85" }, E { hash_code: 11144406865724064596, next: -1, value: "86" }, E { hash_code: 11144406864157980655, next: -1, value: "87" }, E { hash_code: 11144406881384904006, next: -1, value: "88" }, E { hash_code: 11144406879818820065, next: -1, value: "89" }, 
        E { hash_code: 11144406716946090201, next: -1, value: "90" }, E { hash_code: 11144406718512174142, next: -1, value: "91" }, E { hash_code: 11144406720078258083, next: -1, value: "92" }, E { hash_code: 11144406721644342024, next: -1, value: "93" }, E { hash_code: 11144406710681754437, next: 81, value: "94" }, E { hash_code: 11144406712247838378, next: 80, value: "95" }, E { hash_code: 11144406713813922319, next: 83, value: "96" }, E { hash_code: 11144406715380006260, next: 82, value: "97" }, E { hash_code: 11144406729474761729, next: -1, value: "98" }, E { hash_code: 11144406731040845670, next: -1, value: "99" }
    ];

    #[inline]
    unsafe fn get_hash(value: &str) -> u64 {
        let mut hash: u64 = 352654597;

        let mut ptr = value.as_ptr();
        let mut len = value.len();

         while len > 0 {
                hash = (((hash << 5) | (hash >> 27)).wrapping_add(hash)) ^ (ptr.read() as u64);
                ptr = ptr.add(1);
                len -= 1;
         }

        hash.wrapping_mul(1566083941).wrapping_add(352654597)
    }

    #[must_use]
    pub fn contains(value: &str) -> bool {
        if value.len() < 1 as usize || value.len() > 2 as usize {
            return false;
        }

        let hash = unsafe { Self::get_hash(value) };
        let index = hash % 100;
        let mut i: i8 = (Self::BUCKETS[index as usize] as i8) - 1;

        while i >= 0 {
            let entry = &Self::ENTRIES[i as usize];
            if entry.hash_code == hash && entry.value == value {
                return true;
            }
            i = entry.next;
        }

        false
    }

    pub const ITEM_COUNT: usize = 100;
    pub const MIN_LENGTH: usize = 1;
    pub const MAX_LENGTH: usize = 2;
}
struct E {
    hash_code: u64,
    next: i8,
    value: &'static str,
}
