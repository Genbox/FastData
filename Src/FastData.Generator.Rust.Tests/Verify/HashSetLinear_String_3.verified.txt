//! This file is auto-generated. Do not edit manually.
//! Structure: HashSetLinear
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct MyData;

impl MyData {
    const BUCKETS: [B; 17] = [
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 1, end_index: 1 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 2, end_index: 2 }, B { start_index: 0, end_index: 0 }
    ];

    const ITEMS: [&'static str; 3] = [
        "item1", "item3", "item2"
    ];

    const HASH_CODES: [u32; 3] = [
        2011983611, 849184197, 3578067552
    ];

    unsafe fn get_hash(value: &str) -> u32 {
        let hash1: u32 = 352654597;
        let mut hash2: u32 = 352654597;

        let vec: Vec<u16> = value.encode_utf16().collect();
        let mut ptr = vec.as_ptr();
        let mut len = vec.len();

        while len > 0 {
            hash2 = (((hash2 << 5) | (hash2 >> (32 - 5))) + hash2) ^ *ptr as u32;
            ptr = ptr.add(1);
            len -= 1;
        }

        hash1.wrapping_add(hash2.wrapping_mul(1566083941))
     }

    pub fn contains(value: &'static str) -> bool {
        if value.len() != 5 {
            return false;
        }

        let hash = unsafe { Self::get_hash(value) };
        let bucket = &Self::BUCKETS[(hash % 17) as usize];
        let mut index: u8 = bucket.start_index;
        let end_index: u8 = bucket.end_index;

        while index <= end_index {
            if Self::HASH_CODES[index as usize] == hash && Self::ITEMS[index as usize] == value {
                return true;
            }
            index += 1;
        }

        false
    }

    pub const ITEM_COUNT: usize = 3;
    pub const MIN_LENGTH: usize = 5;
    pub const MAX_LENGTH: usize = 5;
}
struct B {
    start_index: u8,
    end_index: u8,
}
