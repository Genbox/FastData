//! This file is auto-generated. Do not edit manually.
//! Structure: HashSetChain
#![allow(unused_parens)]
#![allow(missing_docs)]
pub struct MyData;

impl MyData {
    const BUCKETS: [i8; 3] = [
        3, 0, 1
    ];

    const ENTRIES: [E; 3] = [
        E { hash_code: 2011983611, next: -1, value: "item1" }, E { hash_code: 3578067552, next: -1, value: "item2" }, E { hash_code: 849184197, next: 1, value: "item3" }
    ];

    fn get_hash(value: &str) -> u32 {
        let mut hash1: u32 = (5381 << 16) + 5381;
        let mut hash2: u32 = (5381 << 16) + 5381;

        for chunk in value.as_bytes().chunks(8) {
            if chunk.len() >= 4 {
                let part1 = u32::from_le_bytes(chunk[0..4].try_into().unwrap());
                hash1 = hash1.rotate_left(5) ^ part1;
            }
            if chunk.len() == 8 {
                let part2 = u32::from_le_bytes(chunk[4..8].try_into().unwrap());
                hash2 = hash2.rotate_left(5) ^ part2;
            }
        }

        for &b in value.as_bytes().iter().skip(value.len() / 8 * 8) {
            hash2 = hash2.rotate_left(5) ^ b as u32;
        }

        hash1.wrapping_add(hash2.wrapping_mul(0x5D588B65))
    }

    pub fn contains(value: &str) -> bool {
        if value.len() != 5 {
            return false;
        }

        let hash = Self::get_hash(value);
        let index = hash % 3;
        let mut i: i8 = (Self::BUCKETS[index as usize] as i8) - 1;

        while i >= 0 {
            let entry = &Self::ENTRIES[i as usize];
            if entry.hash_code == hash && value == entry.value {
                return true;
            }
            i = entry.next;
        }

        false
    }

    pub const ITEM_COUNT: usize = 3;
    pub const MIN_LENGTH: usize = 5;
    pub const MAX_LENGTH: usize = 5;
}
struct E {
    hash_code: u32,
    next: i8,
    value: &'static str,
}
