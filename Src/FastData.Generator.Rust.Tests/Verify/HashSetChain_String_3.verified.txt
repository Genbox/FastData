//! This file is auto-generated. Do not edit manually.
//! Structure: HashSetChain
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct MyData;

impl MyData {
    const BUCKETS: [i8; 3] = [
        3, 2, 1
    ];

    const ENTRIES: [E; 3] = [
        E { hash_code: 3957504911, next: -1, value: "item1" }, E { hash_code: 2391420970, next: -1, value: "item2" }, E { hash_code: 825337029, next: -1, value: "item3" }
    ];

    unsafe fn get_hash(value: &str) -> u32 {
        let mut hash: u32 = 352654597;

        let mut ptr = value.as_ptr();
        let mut len = value.len();

        while len > 0 {
            hash = (((hash << 5) | (hash >> 27)) + hash) ^ *ptr as u32;
            ptr = ptr.add(1);
            len -= 1;
        }

        return 352654597 + hash.wrapping_mul(1566083941)
     }

    pub fn contains(value: &str) -> bool {
        if value.len() != 5 {
            return false;
        }

        let hash = unsafe { Self::get_hash(value) };
        let index = hash % 3;
        let mut i: i8 = (Self::BUCKETS[index as usize] as i8) - 1;

        while i >= 0 {
            let entry = &Self::ENTRIES[i as usize];
            if entry.hash_code == hash && entry.value == value {
                return true;
            }
            i = entry.next;
        }

        false
    }

    pub const ITEM_COUNT: usize = 3;
    pub const MIN_LENGTH: usize = 5;
    pub const MAX_LENGTH: usize = 5;
}
struct E {
    hash_code: u32,
    next: i8,
    value: &'static str,
}
