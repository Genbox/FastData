//! This file is auto-generated. Do not edit manually.
//! Structure: HashSetChain
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct MyData;

impl MyData {
    const BUCKETS: [i8; 3] = [
        3, 0, 1
    ];

    const ENTRIES: [E; 3] = [
        E { hash_code: 2011983611, next: -1, value: "item1" }, E { hash_code: 3578067552, next: -1, value: "item2" }, E { hash_code: 849184197, next: 1, value: "item3" }
    ];

    unsafe fn get_hash(value: &str) -> u32 {
        let hash1: u32 = (5381 << 16) + 5381;
        let mut hash2: u32 = (5381 << 16) + 5381;
        let vec: Vec<u16> = value.encode_utf16().collect();
        let mut ptr = vec.as_ptr();
        let mut len = vec.len();

        while len > 0 {
            let ch = *ptr;
            hash2 = (((hash2 << 5) | (hash2 >> (32 - 5))) + hash2) ^ ch as u32;
            ptr = ptr.add(1);
            len -= 1;
        }

        hash1.wrapping_add(hash2.wrapping_mul(1566083941))
     }

    pub fn contains(value: &str) -> bool {
        if value.len() != 5 {
            return false;
        }

        let hash = unsafe { Self::get_hash(value) };
        let index = hash % 3;
        let mut i: i8 = (Self::BUCKETS[index as usize] as i8) - 1;

        while i >= 0 {
            let entry = &Self::ENTRIES[i as usize];
            if entry.hash_code == hash && entry.value == value {
                return true;
            }
            i = entry.next;
        }

        false
    }

    pub const ITEM_COUNT: usize = 3;
    pub const MIN_LENGTH: usize = 5;
    pub const MAX_LENGTH: usize = 5;
}
struct E {
    hash_code: u32,
    next: i8,
    value: &'static str,
}
