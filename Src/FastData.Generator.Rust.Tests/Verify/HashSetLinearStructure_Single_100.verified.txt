//! This file is auto-generated. Do not edit manually.
//! Structure: HashSet (HashSetLinear)
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct HashSetLinearStructure_Single_100;

impl HashSetLinearStructure_Single_100 {
    const BUCKETS: [B; 239] = [
        B { start_index: 0, end_index: 0 }, B { start_index: 1, end_index: 1 }, B { start_index: 0, end_index: 0 }, B { start_index: 2, end_index: 2 }, B { start_index: 3, end_index: 3 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 4, end_index: 4 }, B { start_index: 5, end_index: 5 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 6, end_index: 6 }, B { start_index: 7, end_index: 7 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 8, end_index: 8 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 9, end_index: 9 }, B { start_index: 0, end_index: 0 }, B { start_index: 10, end_index: 10 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 11, end_index: 11 }, B { start_index: 0, end_index: 0 }, B { start_index: 12, end_index: 12 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 13, end_index: 13 }, B { start_index: 0, end_index: 0 }, B { start_index: 14, end_index: 14 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 15, end_index: 15 }, B { start_index: 0, end_index: 0 }, B { start_index: 16, end_index: 16 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 17, end_index: 17 }, B { start_index: 0, end_index: 0 }, B { start_index: 18, end_index: 18 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 19, end_index: 19 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 20, end_index: 20 }, B { start_index: 0, end_index: 0 }, B { start_index: 21, end_index: 21 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 22, end_index: 22 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 23, end_index: 23 }, B { start_index: 24, end_index: 24 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 25, end_index: 25 }, B { start_index: 0, end_index: 0 }, B { start_index: 26, end_index: 26 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 27, end_index: 27 }, B { start_index: 28, end_index: 28 }, B { start_index: 29, end_index: 29 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 30, end_index: 30 }, B { start_index: 31, end_index: 31 }, B { start_index: 32, end_index: 32 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 33, end_index: 33 }, B { start_index: 34, end_index: 34 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 35, end_index: 35 }, B { start_index: 36, end_index: 36 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 37, end_index: 37 }, B { start_index: 38, end_index: 38 }, B { start_index: 0, end_index: 0 }, B { start_index: 39, end_index: 39 }, B { start_index: 0, end_index: 0 }, B { start_index: 40, end_index: 40 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 41, end_index: 41 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 42, end_index: 42 }, B { start_index: 0, end_index: 0 }, B { start_index: 43, end_index: 43 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 44, end_index: 44 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 45, end_index: 45 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 46, end_index: 47 }, B { start_index: 0, end_index: 0 }, B { start_index: 48, end_index: 48 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 49, end_index: 49 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 50, end_index: 50 }, B { start_index: 0, end_index: 0 }, B { start_index: 51, end_index: 51 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 52, end_index: 52 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 53, end_index: 53 }, B { start_index: 54, end_index: 54 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 55, end_index: 55 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 56, end_index: 56 }, B { start_index: 57, end_index: 57 }, B { start_index: 58, end_index: 58 }, B { start_index: 0, end_index: 0 }, B { start_index: 59, end_index: 59 }, B { start_index: 60, end_index: 60 }, B { start_index: 61, end_index: 61 }, 
        B { start_index: 62, end_index: 62 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 63, end_index: 63 }, B { start_index: 64, end_index: 64 }, B { start_index: 65, end_index: 65 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 66, end_index: 66 }, 
        B { start_index: 67, end_index: 67 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 68, end_index: 68 }, B { start_index: 69, end_index: 69 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 70, end_index: 70 }, 
        B { start_index: 71, end_index: 71 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 72, end_index: 72 }, B { start_index: 73, end_index: 73 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 74, end_index: 74 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 75, end_index: 75 }, B { start_index: 0, end_index: 0 }, B { start_index: 76, end_index: 76 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 77, end_index: 78 }, B { start_index: 0, end_index: 0 }, B { start_index: 79, end_index: 79 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 80, end_index: 80 }, B { start_index: 0, end_index: 0 }, B { start_index: 81, end_index: 81 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 82, end_index: 82 }, 
        B { start_index: 83, end_index: 83 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 84, end_index: 84 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 85, end_index: 85 }, B { start_index: 0, end_index: 0 }, B { start_index: 86, end_index: 86 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 87, end_index: 87 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 88, end_index: 88 }, B { start_index: 89, end_index: 89 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 90, end_index: 90 }, B { start_index: 0, end_index: 0 }, B { start_index: 91, end_index: 91 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 92, end_index: 92 }, B { start_index: 93, end_index: 93 }, B { start_index: 94, end_index: 94 }, B { start_index: 0, end_index: 0 }, 
        B { start_index: 0, end_index: 0 }, B { start_index: 95, end_index: 95 }, B { start_index: 96, end_index: 96 }, B { start_index: 97, end_index: 97 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 0, end_index: 0 }, B { start_index: 98, end_index: 98 }, B { start_index: 99, end_index: 99 }
    ];

    const ITEMS: [f32; 100] = [
        0.0, 3.0, 25.0, 70.0, 28.0, 82.0, 31.0, 94.0, 36.0, 5.0, 
        42.0, 75.0, 48.0, 87.0, 54.0, 99.0, 60.0, 8.0, 68.0, 80.0, 
        11.0, 92.0, 35.0, 14.0, 41.0, 73.0, 47.0, 85.0, 18.0, 53.0, 
        97.0, 21.0, 59.0, 24.0, 66.0, 27.0, 78.0, 30.0, 90.0, 4.0, 
        34.0, 40.0, 71.0, 46.0, 83.0, 52.0, 95.0, 7.0, 58.0, 64.0, 
        9.0, 76.0, 88.0, 12.0, 33.0, 39.0, 69.0, 15.0, 45.0, 2.0, 
        81.0, 17.0, 51.0, 93.0, 20.0, 57.0, 23.0, 63.0, 26.0, 74.0, 
        29.0, 86.0, 32.0, 98.0, 38.0, 67.0, 44.0, 79.0, 6.0, 50.0, 
        91.0, 56.0, 62.0, 1.0, 72.0, 10.0, 84.0, 96.0, 13.0, 37.0, 
        65.0, 43.0, 77.0, 16.0, 49.0, 89.0, 19.0, 55.0, 22.0, 61.0
    ];

    const HASH_CODES: [u64; 100] = [
        0, 1077936128, 1103626240, 1116471296, 1105199104, 1118044160, 1106771968, 1119617024, 1108344832, 1084227584, 
        1109917696, 1117126656, 1111490560, 1118699520, 1113063424, 1120272384, 1114636288, 1090519040, 1116209152, 1117782016, 
        1093664768, 1119354880, 1108082688, 1096810496, 1109655552, 1116864512, 1111228416, 1118437376, 1099956224, 1112801280, 
        1120010240, 1101529088, 1114374144, 1103101952, 1115947008, 1104674816, 1117519872, 1106247680, 1119092736, 1082130432, 
        1107820544, 1109393408, 1116602368, 1110966272, 1118175232, 1112539136, 1119748096, 1088421888, 1114112000, 1115684864, 
        1091567616, 1117257728, 1118830592, 1094713344, 1107558400, 1109131264, 1116340224, 1097859072, 1110704128, 1073741824, 
        1117913088, 1099431936, 1112276992, 1119485952, 1101004800, 1113849856, 1102577664, 1115422720, 1104150528, 1116995584, 
        1105723392, 1118568448, 1107296256, 1120141312, 1108869120, 1116078080, 1110441984, 1117650944, 1086324736, 1112014848, 
        1119223808, 1113587712, 1115160576, 1065353216, 1116733440, 1092616192, 1118306304, 1119879168, 1095761920, 1108606976, 
        1115815936, 1110179840, 1117388800, 1098907648, 1111752704, 1118961664, 1100480512, 1113325568, 1102053376, 1114898432
    ];

    #[inline(always)]
    fn get_hash(value: f32) -> u64 {
        let mut bits = value.to_bits();

        if ((bits.wrapping_sub(1)) & !0x8000_0000) >= 0x7F80_0000 {
            bits &= 0x7F80_0000;
        }
        bits as u64
    }

    #[must_use]
    pub fn contains(value: f32) -> bool {
        if value < 0.0 || value > 99.0 {
            return false;
        }

        let hash = unsafe { Self::get_hash(value) };
        let bucket = &Self::BUCKETS[(hash % 239) as usize];
        let mut index: u8 = bucket.start_index;
        let end_index: u8 = bucket.end_index;

        while index <= end_index {
            if Self::HASH_CODES[index as usize] == hash && Self::ITEMS[index as usize] == value {
                return true;
            }
            index += 1;
        }

        false
    }

    pub const ITEM_COUNT: usize = 100;
    pub const MIN_VALUE: f32 = 0.0;
    pub const MAX_VALUE: f32 = 99.0;
}
struct B {
    start_index: u8,
    end_index: u8,
}
