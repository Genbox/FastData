//! This file is auto-generated. Do not edit manually.
//! Structure: HashTable (HashTableChain)
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct HashTableChainStructure_String_13;

impl HashTableChainStructure_String_13 {
    const BUCKETS: [i8; 13] = [
        0, 0, 13, 10, 0, 4, 0, 0, 7, 3, 
        12, 2, 11
    ];

    const ENTRIES: [E; 13] = [
        E { hash_code: 11144404048339054737, next: -1, value: "æ" }, E { hash_code: 11144404045206886855, next: -1, value: "à" }, E { hash_code: 11144404051471222619, next: -1, value: "ä" }, E { hash_code: 11144404023281711681, next: -1, value: "ö" }, E { hash_code: 11144404013885208035, next: -1, value: "ü" }, E { hash_code: 11144404062433810206, next: -1, value: "ß" }, E { hash_code: 11144404034244299268, next: 4, value: "é" }, E { hash_code: 11144404032678215327, next: -1, value: "è" }, E { hash_code: 11144404029546047445, next: -1, value: "ê" }, E { hash_code: 11144404049905138678, next: 8, value: "ç" }, 
        E { hash_code: 11144404021715627740, next: 5, value: "ñ" }, E { hash_code: 11144404007620872271, next: 0, value: "ø" }, E { hash_code: 11144404053037306560, next: 7, value: "å" }
    ];

    #[inline]
    unsafe fn get_hash(value: &str) -> u64 {
        let mut hash: u64 = 352654597;

        let mut ptr = value.as_ptr();
        let mut len = value.len();

         while len > 0 {
                hash = (((hash << 5) | (hash >> 27)).wrapping_add(hash)) ^ (ptr.read() as u64);
                ptr = ptr.add(1);
                len -= 1;
         }

        hash.wrapping_mul(1566083941).wrapping_add(352654597)
    }

    #[must_use]
    pub fn contains(value: &str) -> bool {
        if value.len() != 2 as usize {
            return false;
        }

        let hash = unsafe { Self::get_hash(value) };
        let index = hash % 13;
        let mut i: i8 = (Self::BUCKETS[index as usize] as i8) - 1;

        while i >= 0 {
            let entry = &Self::ENTRIES[i as usize];
            if entry.hash_code == hash && entry.value == value {
                return true;
            }
            i = entry.next;
        }

        false
    }

    pub const ITEM_COUNT: usize = 13;
    pub const MIN_LENGTH: usize = 1;
    pub const MAX_LENGTH: usize = 1;
}
struct E {
    hash_code: u64,
    next: i8,
    value: &'static str,
}
