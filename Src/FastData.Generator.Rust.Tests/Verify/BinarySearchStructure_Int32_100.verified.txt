//! This file is auto-generated. Do not edit manually.
//! Structure: BinarySearch
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct BinarySearchStructure_Int32_100;

impl BinarySearchStructure_Int32_100 {
    const ENTRIES: [i32; 100] = [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
        10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
        30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
        50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
        70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 
        90, 91, 92, 93, 94, 95, 96, 97, 98, 99
    ];

    #[must_use]
    pub fn contains(value: i32) -> bool {
        if value < 0 || value > 99 {
            return false;
        }

        let mut lo: usize = 0;
        let mut hi: usize = 99;
        while lo <= hi {
            let i = lo + ((hi - lo) >> 1);
            let entry = Self::ENTRIES[i];

            if entry == value {
                return true;
            }
            if entry < value {
                lo = i + 1;
            } else {
                hi = i - 1;
            }
        }

        false
    }

    pub const ITEM_COUNT: usize = 100;
    pub const MIN_VALUE: i32 = 0;
    pub const MAX_VALUE: i32 = 99;
}