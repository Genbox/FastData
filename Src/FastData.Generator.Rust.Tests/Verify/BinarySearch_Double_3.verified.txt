//! This file is auto-generated. Do not edit manually.
//! Structure: BinarySearch
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct MyData;

impl MyData {
    const ENTRIES: [f64; 3] = [
        f64::MIN, 0.0, f64::MAX
    ];

    #[must_use]
    pub fn contains(value: f64) -> bool {
        if value < f64::MIN || value > f64::MAX {
            return false;
        }

        let mut lo: usize = 0;
        let mut hi: usize = 2;
        while lo <= hi {
            let i = lo + ((hi - lo) >> 1);
            let entry = Self::ENTRIES[i];

            if entry == value {
                return true;
            }
            if entry < value {
                lo = i + 1;
            } else {
                hi = i - 1;
            }
        }

        return false;
    }

    pub const ITEM_COUNT: usize = 3;
    pub const MIN_VALUE: f64 = f64::MIN;
    pub const MAX_VALUE: f64 = f64::MAX;
}