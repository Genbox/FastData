//! This file is auto-generated. Do not edit manually.
//! Structure: BinarySearch (EytzingerSearch)
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct EytzingerSearchStructure_Char_3;

impl EytzingerSearchStructure_Char_3 {
    const ENTRIES: [char; 3] = [
        'a', char::MIN, ''
    ];

    #[must_use]
    pub fn contains(value: char) -> bool {
        if value < char::MIN || value > '' {
            return false;
        }

        let mut i: usize = 0;
        while i < Self::ENTRIES.len() {
            let entry = Self::ENTRIES[i];

            if entry == value {
                return true;
            }
            if entry < value {
                i = 2 * i + 2;
            } else {
                i = 2 * i + 1;
            }
        }

        false
    }

    pub const ITEM_COUNT: usize = 3;
    pub const MIN_VALUE: char = char::MIN;
    pub const MAX_VALUE: char = '';
}