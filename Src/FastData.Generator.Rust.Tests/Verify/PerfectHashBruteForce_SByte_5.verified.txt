//! This file is auto-generated. Do not edit manually.
//! Structure: PerfectHashBruteForce
#![allow(unused_parens)]
#![allow(missing_docs)]
pub struct MyData;

impl MyData {
    const ENTRIES: [E; 5] = [
        E { value: 1, hash_code: 5 }, E { value: -1, hash_code: 4294967291 }, E { value: -128, hash_code: 4294967172 }, E { value: 127, hash_code: 123 }, E { value: 0, hash_code: 4 }
    ];

    fn get_hash(value: i8, seed: u32) -> u32 {
        (value as u32) ^ seed
    }

    pub fn contains(value: i8) -> bool {
        if value < -128 || value > 127 {
            return false;
        }

        let hash = Self::get_hash(value, 4);
        let index = (hash % 5) as usize;
        let entry = &Self::ENTRIES[index];

        hash == entry.hash_code && value == entry.value
    }

    pub const ITEM_COUNT: usize = 5;
    pub const MIN_VALUE: i8 = -128;
    pub const MAX_VALUE: i8 = 127;
}
struct E {
    value: i8,
    hash_code: u32,
}
