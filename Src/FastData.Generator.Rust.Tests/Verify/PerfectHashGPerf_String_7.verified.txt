//! This file is auto-generated. Do not edit manually.
//! Structure: PerfectHashGPerf
#![allow(unused_parens)]
#![allow(missing_docs)]
pub struct MyData;

impl MyData {
    const ASSO: [u8; 256] = [
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 7, 
        2, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 5, 21, 21, 
        21, 0, 21, 21, 21, 0, 21, 21, 21, 0, 
        21, 21, 21, 21, 21, 21, 0, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
        21, 21, 21, 21, 21, 21
    ];

    const ITEMS: [&'static str; 21] = [
        "item", "", "2", "", "", "a", "", "1", "", "", 
        "aa", "", "", "", "", "aaa", "", "", "", "", 
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    ];

    pub fn contains(value: &str) -> bool {
        if value.len() < 1 || value.len() > 255 {
            return false;
        }

        let hash = Self::get_hash(value) as usize;
        if hash > 20 {
            return false;
        }

        value == Self::ITEMS[hash]
    }

    pub fn get_hash(str: &str) -> u32 {
        let bytes = str.as_bytes();
        let mut hash: u32 = Self::ASSO[bytes[3] as usize] as u32;
        if bytes.len() > 3 { hash += Self::ASSO[bytes[2] as usize] as u32; }
        if bytes.len() > 2 { hash += Self::ASSO[bytes[1] as usize] as u32; }
        return hash;
    }

    pub const ITEM_COUNT: usize = 7;
    pub const MIN_LENGTH: usize = 1;
    pub const MAX_LENGTH: usize = 255;
}