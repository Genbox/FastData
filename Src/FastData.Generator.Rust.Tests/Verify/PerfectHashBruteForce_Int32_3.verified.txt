//! This file is auto-generated. Do not edit manually.
//! Structure: PerfectHashBruteForce
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct MyData;

impl MyData {
    const ENTRIES: [E; 3] = [
        E { value: 2147483647, hash_code: 1427853558 }, E { value: 0, hash_code: 1364076727 }, E { value: -2147483648, hash_code: 2340387434 }
    ];

    fn get_hash(value: i32) -> u32 {
        value as u32
    }

    fn murmur_32(mut h: u32) -> u32 {
        h ^= h >> 16;
        h = h.wrapping_mul(0x85EB_CA6B);
        h ^= h >> 13;
        h = h.wrapping_mul(0xC2B2_AE35);
        h ^= h >> 16;
        return h;
    }

    pub fn contains(value: i32) -> bool {
        if value < -2147483648 || value > 2147483647 {
            return false;
        }
        let hash = Self::murmur_32(unsafe { Self::get_hash(value) } ^ 1);
        let index = (hash % 3) as usize;
        let entry = &Self::ENTRIES[index];

        return hash == entry.hash_code && value == entry.value;
    }

    pub const ITEM_COUNT: usize = 3;
    pub const MIN_VALUE: i32 = -2147483648;
    pub const MAX_VALUE: i32 = 2147483647;
}
struct E {
    value: i32,
    hash_code: u32,
}
