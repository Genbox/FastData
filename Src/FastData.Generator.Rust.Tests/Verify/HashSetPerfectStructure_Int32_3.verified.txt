//! This file is auto-generated. Do not edit manually.
//! Structure: HashSet
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct HashSetPerfectStructure_Int32_3;

impl HashSetPerfectStructure_Int32_3 {
    const ENTRIES: [E; 3] = [
        E { value: 3, hash_code: 3 }, E { value: 1, hash_code: 1 }, E { value: 2, hash_code: 2 }
    ];

    #[inline(always)]
    fn get_hash(value: i32) -> u64 {
        value as u64
    }

    #[must_use]
    pub fn contains(value: i32) -> bool {
        if value < 1 || value > 3 {
            return false;
        }
        let hash = unsafe { Self::get_hash(value) };
        let index = (hash % 3) as usize;
        let entry = &Self::ENTRIES[index];

        return hash == entry.hash_code && value == entry.value;
    }

    pub const ITEM_COUNT: usize = 3;
    pub const MIN_VALUE: i32 = 1;
    pub const MAX_VALUE: i32 = 3;
}
struct E {
    value: i32,
    hash_code: u64,
}
