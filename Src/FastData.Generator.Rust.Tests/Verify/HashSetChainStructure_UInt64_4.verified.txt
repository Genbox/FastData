//! This file is auto-generated. Do not edit manually.
//! Structure: HashSet (HashSetChain)
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct HashSetChainStructure_UInt64_4;

impl HashSetChainStructure_UInt64_4 {
    const BUCKETS: [i8; 4] = [
        1, 4, 3, 0
    ];

    const ENTRIES: [E; 4] = [
        E { hash_code: 0, next: -1, value: u64::MIN }, E { hash_code: 1, next: -1, value: 1 }, E { hash_code: 2, next: -1, value: 2 }, E { hash_code: 18446744073709551605, next: 1, value: 18446744073709551605 }
    ];

    #[inline(always)]
    fn get_hash(value: u64) -> u64 {
        value as u64
    }

    #[must_use]
    pub fn contains(value: u64) -> bool {
        if value < u64::MIN || value > 18446744073709551605 {
            return false;
        }

        let hash = unsafe { Self::get_hash(value) };
        let index = hash % 4;
        let mut i: i8 = (Self::BUCKETS[index as usize] as i8) - 1;

        while i >= 0 {
            let entry = &Self::ENTRIES[i as usize];
            if entry.hash_code == hash && entry.value == value {
                return true;
            }
            i = entry.next;
        }

        false
    }

    pub const ITEM_COUNT: usize = 4;
    pub const MIN_VALUE: u64 = u64::MIN;
    pub const MAX_VALUE: u64 = 18446744073709551605;
}
struct E {
    hash_code: u64,
    next: i8,
    value: u64,
}
