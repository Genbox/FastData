//! This file is auto-generated. Do not edit manually.
//! Structure: BinarySearch
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct BinarySearchStructure_String_13;

impl BinarySearchStructure_String_13 {
    const ENTRIES: [&'static str; 13] = [
        "ß", "à", "ä", "å", "æ", "ç", "è", "é", "ê", "ñ", 
        "ö", "ø", "ü"
    ];

    #[must_use]
    pub fn contains(value: &str) -> bool {
        if value.len() != 2 as usize {
            return false;
        }

        let mut lo: usize = 0;
        let mut hi: usize = 12;
        while lo <= hi {
            let i = lo + ((hi - lo) >> 1);
            let entry = Self::ENTRIES[i];

            if entry == value {
                return true;
            }
            if entry < value {
                lo = i + 1;
            } else {
                hi = i - 1;
            }
        }

        false
    }

    pub const ITEM_COUNT: usize = 13;
    pub const MIN_LENGTH: usize = 1;
    pub const MAX_LENGTH: usize = 1;
}