//! This file is auto-generated. Do not edit manually.
//! Structure: HashTable
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct HashTableStructure_Int32_3;
pub struct Person {
    pub age: i32,
    pub name: &'static str,
    pub other: Option<&'static Person>,

}

impl Person {
    pub const fn new(age: i32, name: &'static str, other: Option<&'static Person>) -> Self { Self { age, name, other } }
}

impl HashTableStructure_Int32_3 {
    const BUCKETS: [i8; 3] = [
        3, 1, 2
    ];

    const ENTRIES: [E; 3] = [
        E { next: -1, key: 1, value: &Person::new(1, "Bob", Some(&Person::new(4, "Anna", None))) }, E { next: -1, key: 2, value: &Person::new(2, "Billy", None) }, E { next: -1, key: 3, value: &Person::new(3, "Bibi", None) }
    ];

    #[inline(always)]
    fn get_hash(value: i32) -> u64 {
        value as u64
    }

    #[must_use]
    pub fn contains(key: i32) -> bool {
        if key < 1 || key > 3 {
            return false;
        }

        let hash = unsafe { Self::get_hash(key) };
        let index = hash % 3;
        let mut i: i8 = (Self::BUCKETS[index as usize] as i8) - 1;

        while i >= 0 {
            let entry = &Self::ENTRIES[i as usize];
            if entry.key == key {
                return true;
            }
            i = entry.next;
        }

        false
    }
    #[must_use]
    pub fn try_lookup(key: i32) -> Option<&'static Person> {
        if key < 1 || key > 3 {
            return None;
        }

        let hash = unsafe { Self::get_hash(key) };
        let index = hash % 3;
        let mut i: i8 = (Self::BUCKETS[index as usize] as i8) - 1;

        while i >= 0 {
            let entry = &Self::ENTRIES[i as usize];
            if entry.key == key {
                return Some(entry.value);
            }
            i = entry.next;
        }

        None
    }

    pub const ITEM_COUNT: usize = 3;
    pub const MIN_KEY: i32 = 1;
    pub const MAX_KEY: i32 = 3;
}struct E {
    
    next: i8,
    key: i32,
    value: &'static Person,
}
