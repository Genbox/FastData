//! This file is auto-generated. Do not edit manually.
//! Structure: Auto (KeyLength)
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct KeyLengthStructure_String_3;
pub struct Person {
    pub age: i32,
    pub name: &'static str,
    pub other: Option<&'static Person>,

}

impl Person {
    pub const fn new(age: i32, name: &'static str, other: Option<&'static Person>) -> Self { Self { age, name, other } }
}

impl KeyLengthStructure_String_3 {
   const VALUES: [&'static Person; 3] = [
        &Person::new(1, "Bob", Some(&Person::new(4, "Anna", None))), &Person::new(2, "Billy", None), &Person::new(3, "Bibi", None)
    ];

   const OFFSETS: [i32; 3] = [
        0, 1, 2
    ];
    const KEYS: [&'static str; 3] = [
        "a", "aa", "aaa"
    ];

    #[must_use]
    pub fn contains(key: &'static str) -> bool {
        if key.len() < 1 as usize || key.len() > 3 as usize {
            return false;
        }

        return key == Self::KEYS[key.len() - 1];
    }
#[must_use]
pub fn try_lookup(key: &'static str) -> Option<&'static Person> {
        if key.len() < 1 as usize || key.len() > 3 as usize {
            return None;
        }

    let idx = (key.len() - 1) as usize;
    if (key == Self::KEYS[idx]) {
        return Some(Self::VALUES[Self::OFFSETS[idx] as usize]);
    }
    None
}

    pub const ITEM_COUNT: usize = 3;
    pub const MIN_KEY_LENGTH: usize = 1;
    pub const MAX_KEY_LENGTH: usize = 3;
}