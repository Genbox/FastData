//! This file is auto-generated. Do not edit manually.
//! Structure: HashTable
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct HashTableStructure_Double_5;

impl HashTableStructure_Double_5 {
    const BUCKETS: [i8; 5] = [
        4, 0, 3, 1, 5
    ];

    const ENTRIES: [E; 5] = [
        E { hash_code: 4607182418800017408, next: -1, key: 1.0 }, E { hash_code: 4611686018427387904, next: -1, key: 2.0 }, E { hash_code: 4613937818241073152, next: -1, key: 3.0 }, E { hash_code: 4616189618054758400, next: -1, key: 4.0 }, E { hash_code: 4617315517961601024, next: 1, key: 5.0 }
    ];

    #[inline(always)]
    fn get_hash(value: f64) -> u64 {
        value.to_bits()
    }

    #[must_use]
    pub fn contains(key: f64) -> bool {
        if key < 1.0 || key > 5.0 {
            return false;
        }

        let hash = unsafe { Self::get_hash(key) };
        let index = hash % 5;
        let mut i: i8 = (Self::BUCKETS[index as usize] as i8) - 1;

        while i >= 0 {
            let entry = &Self::ENTRIES[i as usize];
            if entry.hash_code == hash && entry.key == key {
                return true;
            }
            i = entry.next;
        }

        false
    }

    pub const ITEM_COUNT: usize = 5;
    pub const MIN_KEY: f64 = 1.0;
    pub const MAX_KEY: f64 = 5.0;
}struct E {
    hash_code: u64,
    next: i8,
    key: f64,
    
}
