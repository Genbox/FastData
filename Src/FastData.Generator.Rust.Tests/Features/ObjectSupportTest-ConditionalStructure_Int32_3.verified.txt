//! This file is auto-generated. Do not edit manually.
//! Structure: Conditional
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct ConditionalStructure_Int32_3;
pub struct Person {
    pub age: i32,
    pub name: &'static str,
    pub other: Option<&'static Person>,

}

impl Person {
    pub const fn new(age: i32, name: &'static str, other: Option<&'static Person>) -> Self { Self { age, name, other } }
}

impl ConditionalStructure_Int32_3 {

   const VALUES: [&'static Person; 3] = [
        &Person::new(1, "Bob", Some(&Person::new(4, "Anna", None))), &Person::new(2, "Billy", None), &Person::new(3, "Bibi", None)
    ];    #[must_use]
    pub fn contains(key: i32) -> bool {


        if key == 1 || key == 2 || key == 3 {
            return true;
        }

        false
    }
    #[must_use]
    pub fn try_lookup(key: i32) -> Option<&'static Person> {

        if (key == 1) {
            return Some(Self::VALUES[0]);
        }
        if (key == 2) {
            return Some(Self::VALUES[1]);
        }
        if (key == 3) {
            return Some(Self::VALUES[2]);
        }

        None
    }

    pub const ITEM_COUNT: usize = 3;
    pub const MIN_KEY: i32 = 1;
    pub const MAX_KEY: i32 = 3;
}