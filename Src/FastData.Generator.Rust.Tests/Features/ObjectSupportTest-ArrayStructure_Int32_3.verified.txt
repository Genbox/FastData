//! This file is auto-generated. Do not edit manually.
//! Structure: Array
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct ArrayStructure_Int32_3;
pub struct Person {
    pub age: i32,
    pub name: &'static str,
    pub other: Option<&'static Person>,

}

impl Person {
    pub const fn new(age: i32, name: &'static str, other: Option<&'static Person>) -> Self { Self { age, name, other } }
}

impl ArrayStructure_Int32_3 {
   const VALUES: [&'static Person; 3] = [
        &Person::new(1, "Bob", Some(&Person::new(4, "Anna", None))), &Person::new(2, "Billy", None), &Person::new(3, "Bibi", None)
    ];
    const KEYS: [i32; 3] = [
        1, 2, 3
    ];

    #[must_use]
    pub fn contains(key: i32) -> bool {
        if key < 1 || key > 3 {
            return false;
        }

        for entry in Self::KEYS.iter() {
            if *entry == key {
                return true;
            }
        }
        false
    }
    #[must_use]
    pub fn try_lookup(key: i32) -> Option<&'static Person> {
        if key < 1 || key > 3 {
            return None;
        }

        for entry in Self::KEYS.iter() {
            if *entry == key {
                return Some(Self::VALUES[(key - 1) as usize])
            }
        }
        None
    }

    pub const ITEM_COUNT: usize = 3;
    pub const MIN_KEY: i32 = 1;
    pub const MAX_KEY: i32 = 3;
}