//! This file is auto-generated. Do not edit manually.
//! Structure: BinarySearch (EytzingerSearch)
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct EytzingerSearchStructure_Int32_5;

impl EytzingerSearchStructure_Int32_5 {
    const KEYS: [i32; 5] = [
        1, -1, i32::MAX, i32::MIN, 0
    ];

    #[must_use]
    pub fn contains(key: i32) -> bool {
        if key < i32::MIN || key > i32::MAX {
            return false;
        }

        let mut i: usize = 0;
        while i < Self::KEYS.len() {
            let entry = Self::KEYS[i];

            if entry == key {
                return true;
            }
            if entry < key {
                i = 2 * i + 2;
            } else {
                i = 2 * i + 1;
            }
        }

        false
    }

    pub const ITEM_COUNT: usize = 5;
    pub const MIN_KEY: i32 = i32::MIN;
    pub const MAX_KEY: i32 = i32::MAX;
}