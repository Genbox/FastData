//! This file is auto-generated. Do not edit manually.
//! Structure: BinarySearch (EytzingerSearch)
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct EytzingerSearchStructure_String_13;

impl EytzingerSearchStructure_String_13 {
    const KEYS: [&str; 13] = [
        "é", "å", "ø", "à", "ç", "ñ", "ü", "ß", "ä", "æ", 
        "è", "ê", "ö"
    ];

    #[must_use]
    pub fn contains(key: &str) -> bool {
        if key.len() != 2 as usize {
            return false;
        }

        let mut i: usize = 0;
        while i < Self::KEYS.len() {
            let entry = Self::KEYS[i];

            if entry == key {
                return true;
            }
            if entry < key {
                i = 2 * i + 2;
            } else {
                i = 2 * i + 1;
            }
        }

        false
    }

    pub const ITEM_COUNT: usize = 13;
    pub const MIN_LENGTH: usize = 1;
    pub const MAX_LENGTH: usize = 1;
}