//! This file is auto-generated. Do not edit manually.
//! Structure: BinarySearch (EytzingerSearch)
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct EytzingerSearchStructure_Double_4;

impl EytzingerSearchStructure_Double_4 {
    const KEYS: [f64; 4] = [
        1.0, 0.0, f64::MAX, f64::MIN
    ];

    #[must_use]
    pub fn contains(key: f64) -> bool {
        if key < f64::MIN || key > f64::MAX {
            return false;
        }

        let mut i: usize = 0;
        while i < Self::KEYS.len() {
            let entry = Self::KEYS[i];

            if entry == key {
                return true;
            }
            if entry < key {
                i = 2 * i + 2;
            } else {
                i = 2 * i + 1;
            }
        }

        false
    }

    pub const ITEM_COUNT: usize = 4;
    pub const MIN_KEY: f64 = f64::MIN;
    pub const MAX_KEY: f64 = f64::MAX;
}