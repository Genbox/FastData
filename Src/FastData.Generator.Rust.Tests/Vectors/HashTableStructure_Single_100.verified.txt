//! This file is auto-generated. Do not edit manually.
//! Structure: HashTable
#![allow(unused_parens)]
#![allow(missing_docs)]
#![allow(unused_imports)]
#![allow(unused_unsafe)]
use std::ptr;

pub struct HashTableStructure_Single_100;

impl HashTableStructure_Single_100 {
    const BUCKETS: [i8; 100] = [
        78, 0, 0, 0, 85, 0, 0, 0, 92, 0, 
        0, 0, 99, 0, 0, 0, 81, 0, 0, 0, 
        88, 0, 0, 0, 95, 0, 0, 0, 77, 0, 
        0, 0, 84, 0, 0, 0, 91, 0, 0, 0, 
        98, 0, 0, 0, 80, 0, 0, 0, 87, 0, 
        0, 0, 94, 0, 0, 0, 76, 0, 0, 0, 
        83, 0, 0, 0, 90, 0, 0, 0, 97, 0, 
        0, 0, 79, 0, 0, 0, 86, 0, 0, 0, 
        93, 0, 0, 0, 100, 0, 0, 0, 82, 0, 
        0, 0, 89, 0, 0, 0, 96, 0, 0, 0
    ];

    const ENTRIES: [E; 100] = [
        E { hash_code: 0, next: -1, key: 0.0 }, E { hash_code: 1065353216, next: -1, key: 1.0 }, E { hash_code: 1073741824, next: -1, key: 2.0 }, E { hash_code: 1077936128, next: -1, key: 3.0 }, E { hash_code: 1082130432, next: -1, key: 4.0 }, E { hash_code: 1084227584, next: -1, key: 5.0 }, E { hash_code: 1086324736, next: -1, key: 6.0 }, E { hash_code: 1088421888, next: -1, key: 7.0 }, E { hash_code: 1090519040, next: -1, key: 8.0 }, E { hash_code: 1091567616, next: 1, key: 9.0 }, 
        E { hash_code: 1092616192, next: -1, key: 10.0 }, E { hash_code: 1093664768, next: -1, key: 11.0 }, E { hash_code: 1094713344, next: -1, key: 12.0 }, E { hash_code: 1095761920, next: -1, key: 13.0 }, E { hash_code: 1096810496, next: -1, key: 14.0 }, E { hash_code: 1097859072, next: -1, key: 15.0 }, E { hash_code: 1098907648, next: -1, key: 16.0 }, E { hash_code: 1099431936, next: 6, key: 17.0 }, E { hash_code: 1099956224, next: 2, key: 18.0 }, E { hash_code: 1100480512, next: -1, key: 19.0 }, 
        E { hash_code: 1101004800, next: 0, key: 20.0 }, E { hash_code: 1101529088, next: 7, key: 21.0 }, E { hash_code: 1102053376, next: -1, key: 22.0 }, E { hash_code: 1102577664, next: -1, key: 23.0 }, E { hash_code: 1103101952, next: -1, key: 24.0 }, E { hash_code: 1103626240, next: 8, key: 25.0 }, E { hash_code: 1104150528, next: 3, key: 26.0 }, E { hash_code: 1104674816, next: 9, key: 27.0 }, E { hash_code: 1105199104, next: -1, key: 28.0 }, E { hash_code: 1105723392, next: 10, key: 29.0 }, 
        E { hash_code: 1106247680, next: -1, key: 30.0 }, E { hash_code: 1106771968, next: 11, key: 31.0 }, E { hash_code: 1107296256, next: -1, key: 32.0 }, E { hash_code: 1107558400, next: 20, key: 33.0 }, E { hash_code: 1107820544, next: 12, key: 34.0 }, E { hash_code: 1108082688, next: 21, key: 35.0 }, E { hash_code: 1108344832, next: 4, key: 36.0 }, E { hash_code: 1108606976, next: 22, key: 37.0 }, E { hash_code: 1108869120, next: 13, key: 38.0 }, E { hash_code: 1109131264, next: 23, key: 39.0 }, 
        E { hash_code: 1109393408, next: -1, key: 40.0 }, E { hash_code: 1109655552, next: 24, key: 41.0 }, E { hash_code: 1109917696, next: 14, key: 42.0 }, E { hash_code: 1110179840, next: 25, key: 43.0 }, E { hash_code: 1110441984, next: 5, key: 44.0 }, E { hash_code: 1110704128, next: 26, key: 45.0 }, E { hash_code: 1110966272, next: 15, key: 46.0 }, E { hash_code: 1111228416, next: 27, key: 47.0 }, E { hash_code: 1111490560, next: -1, key: 48.0 }, E { hash_code: 1111752704, next: 28, key: 49.0 }, 
        E { hash_code: 1112014848, next: 16, key: 50.0 }, E { hash_code: 1112276992, next: 29, key: 51.0 }, E { hash_code: 1112539136, next: 17, key: 52.0 }, E { hash_code: 1112801280, next: 30, key: 53.0 }, E { hash_code: 1113063424, next: 18, key: 54.0 }, E { hash_code: 1113325568, next: 31, key: 55.0 }, E { hash_code: 1113587712, next: 19, key: 56.0 }, E { hash_code: 1113849856, next: 32, key: 57.0 }, E { hash_code: 1114112000, next: 33, key: 58.0 }, E { hash_code: 1114374144, next: 34, key: 59.0 }, 
        E { hash_code: 1114636288, next: 35, key: 60.0 }, E { hash_code: 1114898432, next: 36, key: 61.0 }, E { hash_code: 1115160576, next: 37, key: 62.0 }, E { hash_code: 1115422720, next: 38, key: 63.0 }, E { hash_code: 1115684864, next: 39, key: 64.0 }, E { hash_code: 1115815936, next: 52, key: 65.0 }, E { hash_code: 1115947008, next: 40, key: 66.0 }, E { hash_code: 1116078080, next: 53, key: 67.0 }, E { hash_code: 1116209152, next: 41, key: 68.0 }, E { hash_code: 1116340224, next: 54, key: 69.0 }, 
        E { hash_code: 1116471296, next: 42, key: 70.0 }, E { hash_code: 1116602368, next: 55, key: 71.0 }, E { hash_code: 1116733440, next: 43, key: 72.0 }, E { hash_code: 1116864512, next: 56, key: 73.0 }, E { hash_code: 1116995584, next: 44, key: 74.0 }, E { hash_code: 1117126656, next: 57, key: 75.0 }, E { hash_code: 1117257728, next: 45, key: 76.0 }, E { hash_code: 1117388800, next: 58, key: 77.0 }, E { hash_code: 1117519872, next: 46, key: 78.0 }, E { hash_code: 1117650944, next: 59, key: 79.0 }, 
        E { hash_code: 1117782016, next: 47, key: 80.0 }, E { hash_code: 1117913088, next: 60, key: 81.0 }, E { hash_code: 1118044160, next: 48, key: 82.0 }, E { hash_code: 1118175232, next: 61, key: 83.0 }, E { hash_code: 1118306304, next: 49, key: 84.0 }, E { hash_code: 1118437376, next: 62, key: 85.0 }, E { hash_code: 1118568448, next: 50, key: 86.0 }, E { hash_code: 1118699520, next: 63, key: 87.0 }, E { hash_code: 1118830592, next: 51, key: 88.0 }, E { hash_code: 1118961664, next: 64, key: 89.0 }, 
        E { hash_code: 1119092736, next: 65, key: 90.0 }, E { hash_code: 1119223808, next: 66, key: 91.0 }, E { hash_code: 1119354880, next: 67, key: 92.0 }, E { hash_code: 1119485952, next: 68, key: 93.0 }, E { hash_code: 1119617024, next: 69, key: 94.0 }, E { hash_code: 1119748096, next: 70, key: 95.0 }, E { hash_code: 1119879168, next: 71, key: 96.0 }, E { hash_code: 1120010240, next: 72, key: 97.0 }, E { hash_code: 1120141312, next: 73, key: 98.0 }, E { hash_code: 1120272384, next: 74, key: 99.0 }
    ];

    #[inline(always)]
    fn get_hash(value: f32) -> u64 {
        let mut bits = value.to_bits();

        if ((bits.wrapping_sub(1)) & !0x8000_0000) >= 0x7F80_0000 {
            bits &= 0x7F80_0000;
        }
        bits as u64
    }

    #[must_use]
    pub fn contains(key: f32) -> bool {
        if key < 0.0 || key > 99.0 {
            return false;
        }

        let hash = unsafe { Self::get_hash(key) };
        let index = hash % 100;
        let mut i: i8 = (Self::BUCKETS[index as usize] as i8) - 1;

        while i >= 0 {
            let entry = &Self::ENTRIES[i as usize];
            if entry.hash_code == hash && entry.key == key {
                return true;
            }
            i = entry.next;
        }

        false
    }

    pub const ITEM_COUNT: usize = 100;
    pub const MIN_KEY: f32 = 0.0;
    pub const MAX_KEY: f32 = 99.0;
}struct E {
    hash_code: u64,
    next: i8,
    key: f32,
    
}
