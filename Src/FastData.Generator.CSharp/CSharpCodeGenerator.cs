using Genbox.FastData.Generator.CSharp.Enums;
using Genbox.FastData.Generator.CSharp.Internal.Framework;
using Genbox.FastData.Generator.CSharp.Internal.Generators;
using Genbox.FastData.Generator.Framework;
using Genbox.FastData.Generator.Framework.Interfaces;

namespace Genbox.FastData.Generator.CSharp;

public sealed class CSharpCodeGenerator : CodeGenerator
{
    private readonly CSharpCodeGeneratorConfig _cfg;

    private CSharpCodeGenerator(CSharpCodeGeneratorConfig cfg, ILanguageDef langDef, IConstantsDef constDef, IEarlyExitDef earlyExitDef, IHashDef hashDef)
        : base(langDef, constDef, earlyExitDef, hashDef) => _cfg = cfg;

    public static CSharpCodeGenerator Create(CSharpCodeGeneratorConfig userCfg)
    {
        CSharpLanguageDef langDef = new CSharpLanguageDef();
        TypeMap typeMap = new TypeMap(langDef.TypeDefinitions);
        TypeHelper helper = new TypeHelper(typeMap);

        return new CSharpCodeGenerator(userCfg, langDef, new CSharpConstantsDef(), new CSharpEarlyExitDef(helper, userCfg.GeneratorOptions),
            new CSharpHashDef());
    }

    protected override void AppendHeader<T>(StringBuilder sb, GeneratorConfig<T> genCfg)
    {
        sb.AppendLine("// <auto-generated />");
        base.AppendHeader(sb, genCfg);

        sb.Append("""
                  #nullable enable
                  using System;
                  using System.Runtime.CompilerServices;
                  using System.Runtime.InteropServices;

                  """);

        string cn = _cfg.ClassName;
        string? ns = _cfg.Namespace != null ? $"namespace {_cfg.Namespace};\n" : null;
        string visibility = _cfg.ClassVisibility.ToString().ToLowerInvariant();

        string type = _cfg.ClassType switch
        {
            ClassType.Static => " static class",
            ClassType.Instance => " class",
            ClassType.Struct => " struct",
            _ => throw new InvalidOperationException("Invalid ClassType: " + _cfg.ClassType)
        };

        string? attr = _cfg.ClassType == ClassType.Struct ? "[StructLayout(LayoutKind.Auto)]" : null;
        string? partial = _cfg.ClassType != ClassType.Static ? " partial" : null;

        sb.AppendLine($$"""

                        {{ns}}
                        {{attr}}{{visibility}}{{partial}}{{type}} {{cn}}
                        {
                        """);
    }

    protected override void AppendFooter<T>(StringBuilder sb, GeneratorConfig<T> genCfg, string typeName)
    {
        base.AppendFooter(sb, genCfg, typeName);

        sb.Append('}');
    }

    protected override OutputWriter<T>? GetOutputWriter<T>(GeneratorConfig<T> genCfg, IContext context) => context switch
    {
        SingleValueContext<T> x => new SingleValueCode<T>(x, _cfg),
        ArrayContext<T> x => new ArrayCode<T>(x, _cfg),
        BinarySearchContext<T> x => new BinarySearchCode<T>(x, _cfg),
        ConditionalContext<T> x => new ConditionalCode<T>(x, _cfg),
        EytzingerSearchContext<T> x => new EytzingerSearchCode<T>(x, _cfg),
        HashSetChainContext<T> x => new HashSetChainCode<T>(x, _cfg),
        HashSetLinearContext<T> x => new HashSetLinearCode<T>(x, _cfg),
        HashSetPerfectContext<T> x => new HashSetPerfectCode<T>(x, _cfg),
        KeyLengthContext x => new KeyLengthCode<T>(x, _cfg),
        _ => null
    };
}