using System.Globalization;
using System.Text;
using Genbox.FastData.Abstracts;
using Genbox.FastData.Configs;
using Genbox.FastData.Enums;
using Genbox.FastData.Extensions;
using Genbox.FastData.Generator.CSharp.Enums;
using Genbox.FastData.Generator.CSharp.Internal.Generators;
using Genbox.FastData.Generator.CSharp.Internal.Helpers;
using Genbox.FastData.Models;

namespace Genbox.FastData.Generator.CSharp;

public class CSharpCodeGenerator(CSharpGeneratorConfig userCfg) : IGenerator
{
    private readonly StringBuilder _sb = new StringBuilder();

    public string Generate(GeneratorConfig genCfg, FastDataConfig fastCfg, IContext context)
    {
        _sb.Clear();
        AppendHeader(genCfg, fastCfg);

        _sb.Append(context switch
        {
            SingleValueContext c2 => new SingleValueCode(genCfg, userCfg, c2).Generate(),
            ArrayContext c1 => new ArrayCode(genCfg, userCfg, c1).Generate(),
            BinarySearchContext c2 => new BinarySearchCode(genCfg, userCfg, c2).Generate(),
            ConditionalContext c2 => new ConditionalCode(genCfg, userCfg, c2).Generate(),
            EytzingerSearchContext c2 => new EytzingerSearchCode(genCfg, userCfg, c2).Generate(),
            PerfectHashBruteForceContext c2 => new PerfectHashBruteForceCode(genCfg, userCfg, c2).Generate(),
            PerfectHashGPerfContext c2 => new PerfectHashGPerfCode(genCfg, userCfg, c2).Generate(),
            HashSetChainContext c2 => new HashSetChainCode(genCfg, userCfg, c2).Generate(),
            HashSetLinearContext c2 => new HashSetLinearCode(genCfg, userCfg, c2).Generate(),
            KeyLengthContext c2 => new KeyLengthCode(genCfg, userCfg, c2).Generate(),
            _ => throw new NotSupportedException("The context type is not supported: " + context.GetType().Name)
        });

        AppendFooter(genCfg);
        return _sb.ToString();
    }

    private void AppendHeader(GeneratorConfig genCfg, FastDataConfig fastCfg)
    {
        string cn = fastCfg.Name;
        string? ns = userCfg.Namespace != null ? $"namespace {userCfg.Namespace};\n" : null;
        string visibility = userCfg.ClassVisibility.ToString().ToLowerInvariant();

        string type = userCfg.ClassType switch
        {
            ClassType.Static => " static class",
            ClassType.Instance => " class",
            ClassType.Struct => " struct",
            _ => throw new InvalidOperationException("Invalid ClassType: " + userCfg.ClassType)
        };

        string? attr = userCfg.ClassType == ClassType.Struct ? "[StructLayout(LayoutKind.Auto)]" : null;
        string? iface = userCfg.ClassType != ClassType.Static ? $": IFastSet<{genCfg.DataType}>" : null;
        string? partial = userCfg.ClassType != ClassType.Static ? " partial" : null;

        _sb.AppendLine("// <auto-generated />");
        _sb.Append("// Structure: ").AppendLine(fastCfg.StructureType.ToString());

#if RELEASE
        _sb.Append("// Generated by: ").AppendLine(genCfg.Metadata.Program);
        _sb.Append("// Generated on: ").AppendLine(genCfg.Metadata.Timestamp);
#endif

        _sb.AppendLine("""
                       #nullable enable
                       using System;
                       """);

        if (iface != null)
            _sb.AppendLine("using System.Runtime.CompilerServices;");

        if (attr != null)
            _sb.AppendLine("using System.Runtime.InteropServices;");

        _sb.AppendLine($$"""

                         {{ns}}
                         {{attr}}{{visibility}}{{partial}}{{type}} {{cn}} {{iface}}
                         {
                         """);
    }

    private void AppendFooter(GeneratorConfig genCfg)
    {
        _sb.Append($"""


                        public const int ItemCount = {genCfg.Constants.ItemCount};
                    """);

        if (userCfg.ClassType is ClassType.Instance or ClassType.Struct)
        {
            _sb.Append("""

                           public int Length => ItemCount;
                       """);
        }
        _sb.AppendLine();

        if (genCfg.DataType.IsInteger())
        {
            string minType;
            string maxType;

            if (genCfg.DataType.IsUnsigned())
            {
                minType = GetSmallestUnsignedType(Convert.ToUInt64(genCfg.Constants.MinValue, NumberFormatInfo.InvariantInfo));
                maxType = GetSmallestUnsignedType(Convert.ToUInt64(genCfg.Constants.MaxValue, NumberFormatInfo.InvariantInfo));
            }
            else
            {
                minType = GetSmallestSignedType(Convert.ToInt64(genCfg.Constants.MinValue, NumberFormatInfo.InvariantInfo));
                maxType = GetSmallestSignedType(Convert.ToInt64(genCfg.Constants.MaxValue, NumberFormatInfo.InvariantInfo));
            }

            _sb.Append("    public const ").Append(minType).Append(" MinValue = ").Append(genCfg.Constants.MinValue).AppendLine(";");
            _sb.Append("    public const ").Append(maxType).Append(" MaxValue = ").Append(genCfg.Constants.MaxValue).AppendLine(";");
        }
        else if (genCfg.DataType == DataType.String)
        {
            _sb.Append("    public const int MinLength = ").Append(genCfg.Constants.MinValue).AppendLine(";");
            _sb.Append("    public const int MaxLength = ").Append(genCfg.Constants.MaxValue).AppendLine(";");
        }

        _sb.Append('}');
    }

    private static string GetSmallestUnsignedType(ulong value) => value switch
    {
        <= uint.MaxValue => "uint",
        _ => "ulong"
    };

    private static string GetSmallestSignedType(long value) => value switch
    {
        <= int.MaxValue => "int",
        _ => "long"
    };
}