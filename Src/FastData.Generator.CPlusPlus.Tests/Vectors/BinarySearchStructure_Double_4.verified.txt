// This file is auto-generated. Do not edit manually.
// Structure: BinarySearch
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class BinarySearchStructure_Double_4 final {
    static constexpr std::array<double, 4> keys = {
        std::numeric_limits<double>::lowest(), 0.0, 1.0, std::numeric_limits<double>::max()
    };

public:
    [[nodiscard]]
    static constexpr bool contains(const double key) noexcept {
        if (key < std::numeric_limits<double>::lowest() || key > std::numeric_limits<double>::max())
            return false;

        int32_t lo = 0;
        int32_t hi = 3;
        while (lo <= hi) {
            const int32_t mid = lo + ((hi - lo) >> 1);
            const double mid_key = keys[mid];

            if (mid_key == key)
                return true;

            if (mid_key < key)
                lo = mid + 1;
            else
                hi = mid - 1;
        }

        return false;
    }

    static constexpr size_t item_count = 4;
    static constexpr double min_key = std::numeric_limits<double>::lowest();
    static constexpr double max_key = std::numeric_limits<double>::max();
};