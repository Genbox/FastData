// This file is auto-generated. Do not edit manually.
// Structure: BinarySearch (EytzingerSearch)
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class EytzingerSearchStructure_UInt32_4 final
{
    static constexpr std::array<uint32_t, 4> keys = {
        2u, 1u, std::numeric_limits<uint32_t>::max(), 0
    };

public:
    [[nodiscard]]
    static bool contains(const uint32_t key) noexcept
    {
        if (key < 0 || key > std::numeric_limits<uint32_t>::max())
            return false;

        size_t i = 0;
        while (i < keys.size())
        {
            if (keys[i] == key)
                return true;

            if (keys[i] < key)
                i = 2 * i + 2;
            else
                i = 2 * i + 1;
        }

        return false;
    }

    static constexpr size_t item_count = 4;
    static constexpr uint32_t min_key = 0;
    static constexpr uint32_t max_key = std::numeric_limits<uint32_t>::max();

public:
    EytzingerSearchStructure_UInt32_4() = delete;
    EytzingerSearchStructure_UInt32_4(const EytzingerSearchStructure_UInt32_4&) = delete;
    EytzingerSearchStructure_UInt32_4& operator=(const EytzingerSearchStructure_UInt32_4&) = delete;
    EytzingerSearchStructure_UInt32_4(EytzingerSearchStructure_UInt32_4&&) = delete;
    EytzingerSearchStructure_UInt32_4& operator=(EytzingerSearchStructure_UInt32_4&&) = delete;
};