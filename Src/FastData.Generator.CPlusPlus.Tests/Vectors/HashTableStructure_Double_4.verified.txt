// This file is auto-generated. Do not edit manually.
// Structure: HashTable
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashTableStructure_Double_4 final
{
    struct e
    {
        double key;
        int8_t next;
        uint64_t hash_code;
        
        e(const double key, const int8_t next, const uint64_t hash_code)
           : key(key), next(next), hash_code(hash_code) {}
    };

    static constexpr std::array<int8_t, 4> buckets = {
        3, 0, 0, 4
     };

    inline static const std::array<e, 4> entries = {
        e(std::numeric_limits<double>::lowest(), -1, 18442240474082181119), e(0.0, -1, 0), e(1.0, 1, 4607182418800017408), e(std::numeric_limits<double>::max(), 0, 9218868437227405311)
    };

    static uint64_t get_hash(const double value) noexcept
    {
        uint64_t bits;
        std::memcpy(&bits, &value, sizeof(bits));
        if (((bits - 1) & ~0x8000000000000000ull) >= 0x7FF0000000000000ull)
            bits &= 0x7FF0000000000000ull;
        return bits;
    }

public:
    [[nodiscard]]
    static constexpr bool contains(const double key) noexcept
    {
        if (key < std::numeric_limits<double>::lowest() || key > std::numeric_limits<double>::max())
            return false;

        const uint64_t hash = get_hash(key);
        const size_t index = hash % 4;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const auto& entry = entries[i];

            if (entry.hash_code == hash && entry.key == key)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr size_t item_count = 4;
    static constexpr double min_key = std::numeric_limits<double>::lowest();
    static constexpr double max_key = std::numeric_limits<double>::max();
};