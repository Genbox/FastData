// This file is auto-generated. Do not edit manually.
// Structure: HashTable
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashTableStructure_Double_5_HashZeroOrNaN final
{
    struct e
    {
        double key;
        int8_t next;
        uint64_t hash_code;
        
        e(const double key, const int8_t next, const uint64_t hash_code)
           : key(key), next(next), hash_code(hash_code) {}
    };

    static constexpr std::array<int8_t, 5> buckets = {
        4, 0, 3, 1, 5
     };

    inline static const std::array<e, 5> entries = {
        e(1.0, -1, 4607182418800017408), e(2.0, -1, 4611686018427387904), e(3.0, -1, 4613937818241073152), e(4.0, -1, 4616189618054758400), e(5.0, 1, 4617315517961601024)
    };

    static uint64_t get_hash(const double value) noexcept
    {
        uint64_t bits;
        std::memcpy(&bits, &value, sizeof(bits));
        return bits;
    }

public:
    [[nodiscard]]
    static constexpr bool contains(const double key) noexcept
    {
        if (key < 1.0 || key > 5.0)
            return false;

        const uint64_t hash = get_hash(key);
        const size_t index = hash % 5;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const auto& entry = entries[i];

            if (entry.hash_code == hash && entry.key == key)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr size_t item_count = 5;
    static constexpr double min_key = 1.0;
    static constexpr double max_key = 5.0;
};