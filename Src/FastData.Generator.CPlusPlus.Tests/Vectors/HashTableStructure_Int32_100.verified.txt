// This file is auto-generated. Do not edit manually.
// Structure: HashTable
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashTableStructure_Int32_100 final {
    struct e {
        int32_t key;
        int8_t next;
        
        
        e(const int32_t key, const int8_t next)
           : key(key), next(next) {}
    };

    static constexpr std::array<int8_t, 100> buckets = {
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100
     };

    inline static const std::array<e, 100> entries = {
        e(0, -1), e(1, -1), e(2, -1), e(3, -1), e(4, -1), e(5, -1), e(6, -1), e(7, -1), e(8, -1), e(9, -1), 
        e(10, -1), e(11, -1), e(12, -1), e(13, -1), e(14, -1), e(15, -1), e(16, -1), e(17, -1), e(18, -1), e(19, -1), 
        e(20, -1), e(21, -1), e(22, -1), e(23, -1), e(24, -1), e(25, -1), e(26, -1), e(27, -1), e(28, -1), e(29, -1), 
        e(30, -1), e(31, -1), e(32, -1), e(33, -1), e(34, -1), e(35, -1), e(36, -1), e(37, -1), e(38, -1), e(39, -1), 
        e(40, -1), e(41, -1), e(42, -1), e(43, -1), e(44, -1), e(45, -1), e(46, -1), e(47, -1), e(48, -1), e(49, -1), 
        e(50, -1), e(51, -1), e(52, -1), e(53, -1), e(54, -1), e(55, -1), e(56, -1), e(57, -1), e(58, -1), e(59, -1), 
        e(60, -1), e(61, -1), e(62, -1), e(63, -1), e(64, -1), e(65, -1), e(66, -1), e(67, -1), e(68, -1), e(69, -1), 
        e(70, -1), e(71, -1), e(72, -1), e(73, -1), e(74, -1), e(75, -1), e(76, -1), e(77, -1), e(78, -1), e(79, -1), 
        e(80, -1), e(81, -1), e(82, -1), e(83, -1), e(84, -1), e(85, -1), e(86, -1), e(87, -1), e(88, -1), e(89, -1), 
        e(90, -1), e(91, -1), e(92, -1), e(93, -1), e(94, -1), e(95, -1), e(96, -1), e(97, -1), e(98, -1), e(99, -1)
    };

    static constexpr uint64_t get_hash(const int32_t value) noexcept
    {
        return static_cast<uint64_t>(value);
    }

public:
    [[nodiscard]]
    static constexpr bool contains(const int32_t key) noexcept {
        if (key < 0 || key > 99)
            return false;

        const uint64_t hash = get_hash(key);
        const size_t index = hash % 100;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0) {
            const auto& entry = entries[i];

            if (entry.key == key)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr size_t item_count = 100;
    static constexpr int32_t min_key = 0;
    static constexpr int32_t max_key = 99;
};