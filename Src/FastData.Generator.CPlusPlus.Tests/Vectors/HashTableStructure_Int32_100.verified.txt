// This file is auto-generated. Do not edit manually.
// Structure: HashTable
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashTableStructure_Int32_100 final
{
    struct e
    {
        int32_t key;
        int8_t next;
        
        
        e(const int8_t next, const int32_t key)
           : next(next), key(key) {}
    };

    static constexpr std::array<int8_t, 100> buckets = {
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100
     };

    inline static const std::array<e, 100> entries = {
        e(-1, 0), e(-1, 1), e(-1, 2), e(-1, 3), e(-1, 4), e(-1, 5), e(-1, 6), e(-1, 7), e(-1, 8), e(-1, 9), 
        e(-1, 10), e(-1, 11), e(-1, 12), e(-1, 13), e(-1, 14), e(-1, 15), e(-1, 16), e(-1, 17), e(-1, 18), e(-1, 19), 
        e(-1, 20), e(-1, 21), e(-1, 22), e(-1, 23), e(-1, 24), e(-1, 25), e(-1, 26), e(-1, 27), e(-1, 28), e(-1, 29), 
        e(-1, 30), e(-1, 31), e(-1, 32), e(-1, 33), e(-1, 34), e(-1, 35), e(-1, 36), e(-1, 37), e(-1, 38), e(-1, 39), 
        e(-1, 40), e(-1, 41), e(-1, 42), e(-1, 43), e(-1, 44), e(-1, 45), e(-1, 46), e(-1, 47), e(-1, 48), e(-1, 49), 
        e(-1, 50), e(-1, 51), e(-1, 52), e(-1, 53), e(-1, 54), e(-1, 55), e(-1, 56), e(-1, 57), e(-1, 58), e(-1, 59), 
        e(-1, 60), e(-1, 61), e(-1, 62), e(-1, 63), e(-1, 64), e(-1, 65), e(-1, 66), e(-1, 67), e(-1, 68), e(-1, 69), 
        e(-1, 70), e(-1, 71), e(-1, 72), e(-1, 73), e(-1, 74), e(-1, 75), e(-1, 76), e(-1, 77), e(-1, 78), e(-1, 79), 
        e(-1, 80), e(-1, 81), e(-1, 82), e(-1, 83), e(-1, 84), e(-1, 85), e(-1, 86), e(-1, 87), e(-1, 88), e(-1, 89), 
        e(-1, 90), e(-1, 91), e(-1, 92), e(-1, 93), e(-1, 94), e(-1, 95), e(-1, 96), e(-1, 97), e(-1, 98), e(-1, 99)
    };

    static constexpr uint64_t get_hash(const int32_t value) noexcept
    {
        return static_cast<uint64_t>(value);
    }

public:
    [[nodiscard]]
    static bool contains(const int32_t key) noexcept
    {
        if (key < 0 || key > 99)
            return false;

        const uint64_t hash = get_hash(key);
        const size_t index = hash % 100;
        int8_t i = buckets[index] - static_cast<int8_t>(1);

        while (i >= 0)
        {
            const auto& entry = entries[i];

            if (entry.key == key)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr size_t item_count = 100;
    static constexpr int32_t min_key = 0;
    static constexpr int32_t max_key = 99;
};