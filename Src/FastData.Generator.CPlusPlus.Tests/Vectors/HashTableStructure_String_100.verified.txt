// This file is auto-generated. Do not edit manually.
// Structure: HashTable
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashTableStructure_String_100 final {
    struct e {
        std::string_view key;
        int8_t next;
        uint64_t hash_code;
        
        e(const std::string_view key, const int8_t next, const uint64_t hash_code)
           : key(key), next(next), hash_code(hash_code) {}
    };

    static constexpr std::array<int8_t, 100> buckets = {
        69, 91, 23, 0, 0, 0, 89, 31, 65, 0, 
        0, 0, 36, 73, 85, 30, 0, 0, 52, 97, 
        40, 0, 0, 79, 94, 33, 67, 0, 0, 99, 
        38, 75, 0, 0, 0, 0, 72, 95, 0, 0, 
        0, 55, 92, 22, 0, 0, 0, 0, 32, 77, 
        0, 10, 0, 0, 74, 88, 29, 0, 0, 70, 
        98, 24, 0, 0, 80, 90, 34, 66, 0, 0, 
        100, 35, 76, 86, 0, 0, 0, 51, 96, 39, 
        0, 0, 56, 93, 21, 68, 0, 0, 0, 37, 
        78, 0, 9, 0, 0, 71, 87, 0, 0, 0
     };

    inline static const std::array<e, 100> entries = {
        e("0", -1, 18225461114117863064), e("1", -1, 18225461112551779123), e("2", -1, 18225461110985695182), e("3", -1, 18225461109419611241), e("4", -1, 18225461107853527300), e("5", -1, 18225461106287443359), e("6", -1, 18225461104721359418), e("7", -1, 18225461103155275477), e("8", -1, 18225461126646534592), e("9", -1, 18225461125080450651), 
        e("10", -1, 11144406353614615889), e("11", -1, 11144406355180699830), e("12", -1, 11144406356746783771), e("13", -1, 11144406358312867712), e("14", -1, 11144406347350280125), e("15", -1, 11144406348916364066), e("16", -1, 11144406350482448007), e("17", -1, 11144406352048531948), e("18", -1, 11144406341085944361), e("19", -1, 11144406342652028302), 
        e("20", -1, 11144406502392590284), e("21", -1, 11144406500826506343), e("22", 19, 11144406499260422402), e("23", 18, 11144406497694338461), e("24", 17, 11144406508656926048), e("25", 16, 11144406507090842107), e("26", 15, 11144406505524758166), e("27", 14, 11144406503958674225), e("28", -1, 11144406489863918756), e("29", -1, 11144406488297834815), 
        e("30", 25, 11144406350482448007), e("31", 24, 11144406352048531948), e("32", 27, 11144406347350280125), e("33", 26, 11144406348916364066), e("34", 12, 11144406356746783771), e("35", 13, 11144406358312867712), e("36", 10, 11144406353614615889), e("37", 11, 11144406355180699830), e("38", -1, 11144406337953776479), e("39", -1, 11144406339519860420), 
        e("40", -1, 11144406298801677954), e("41", -1, 11144406297235594013), e("42", -1, 11144406301933845836), e("43", -1, 11144406300367761895), e("44", 6, 11144406305066013718), e("45", 7, 11144406303499929777), e("46", 4, 11144406308198181600), e("47", 5, 11144406306632097659), e("48", -1, 11144406286273006426), e("49", -1, 11144406284706922485), 
        e("50", 45, 11144406146891535677), e("51", 44, 11144406148457619618), e("52", 47, 11144406150023703559), e("53", 46, 11144406151589787500), e("54", 3, 11144406153155871441), e("55", 2, 11144406154721955382), e("56", 1, 11144406156288039323), e("57", 0, 11144406157854123264), e("58", -1, 11144406134362864149), e("59", -1, 11144406135928948090), 
        e("60", -1, 11144406295669510072), e("61", -1, 11144406294103426131), e("62", 59, 11144406292537342190), e("63", 58, 11144406290971258249), e("64", -1, 11144406289405174308), e("65", -1, 11144406287839090367), e("66", 48, 11144406286273006426), e("67", 49, 11144406284706922485), e("68", 53, 11144406308198181600), e("69", 52, 11144406306632097659), 
        e("70", 43, 11144406143759367795), e("71", 42, 11144406145325451736), e("72", 41, 11144406140627199913), e("73", 40, 11144406142193283854), e("74", 61, 11144406137495032031), e("75", 60, 11144406139061115972), e("76", 63, 11144406134362864149), e("77", 62, 11144406135928948090), e("78", 56, 11144406156288039323), e("79", 57, 11144406157854123264), 
        e("80", -1, 11144406868856232478), e("81", -1, 11144406867290148537), e("82", -1, 11144406871988400360), e("83", -1, 11144406870422316419), e("84", -1, 11144406862591896714), e("85", -1, 11144406861025812773), e("86", -1, 11144406865724064596), e("87", -1, 11144406864157980655), e("88", -1, 11144406881384904006), e("89", -1, 11144406879818820065), 
        e("90", -1, 11144406716946090201), e("91", -1, 11144406718512174142), e("92", -1, 11144406720078258083), e("93", -1, 11144406721644342024), e("94", 81, 11144406710681754437), e("95", 80, 11144406712247838378), e("96", 83, 11144406713813922319), e("97", 82, 11144406715380006260), e("98", -1, 11144406729474761729), e("99", -1, 11144406731040845670)
    };

    static constexpr uint64_t get_hash(const std::string_view value) noexcept
    {
    uint64_t hash = 352654597;

    for (char32_t ch : value)
        hash = (((hash << 5) | (hash >> 27)) + hash) ^ static_cast<uint32_t>(ch);

    return 352654597 + (hash * 1566083941);
    }

public:
    [[nodiscard]]
    static constexpr bool contains(const std::string_view key) noexcept {
        if (const size_t len = key.length(); len < 1u || len > 2u)
            return false;

        const uint64_t hash = get_hash(key);
        const size_t index = hash % 100;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0) {
            const auto& entry = entries[i];

            if (entry.hash_code == hash && entry.key == key)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr size_t item_count = 100;
    static constexpr size_t min_key_length = 1;
    static constexpr size_t max_key_length = 2;
};