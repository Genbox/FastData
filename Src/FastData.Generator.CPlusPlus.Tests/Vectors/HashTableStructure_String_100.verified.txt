// This file is auto-generated. Do not edit manually.
// Structure: HashTable
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashTableStructure_String_100 final
{
    struct e
    {
        std::string_view key;
        int8_t next;
        uint64_t hash_code;
        
        e(const uint64_t hash_code, const int8_t next, const std::string_view key)
           : hash_code(hash_code), next(next), key(key) {}
    };

    static constexpr std::array<int8_t, 100> buckets = {
        69, 91, 23, 0, 0, 0, 89, 31, 65, 0, 
        0, 0, 36, 73, 85, 30, 0, 0, 52, 97, 
        40, 0, 0, 79, 94, 33, 67, 0, 0, 99, 
        38, 75, 0, 0, 0, 0, 72, 95, 0, 0, 
        0, 55, 92, 22, 0, 0, 0, 0, 32, 77, 
        0, 10, 0, 0, 74, 88, 29, 0, 0, 70, 
        98, 24, 0, 0, 80, 90, 34, 66, 0, 0, 
        100, 35, 76, 86, 0, 0, 0, 51, 96, 39, 
        0, 0, 56, 93, 21, 68, 0, 0, 0, 37, 
        78, 0, 9, 0, 0, 71, 87, 0, 0, 0
     };

    inline static const std::array<e, 100> entries = {
        e(18225461114117863064, -1, "0"), e(18225461112551779123, -1, "1"), e(18225461110985695182, -1, "2"), e(18225461109419611241, -1, "3"), e(18225461107853527300, -1, "4"), e(18225461106287443359, -1, "5"), e(18225461104721359418, -1, "6"), e(18225461103155275477, -1, "7"), e(18225461126646534592, -1, "8"), e(18225461125080450651, -1, "9"), 
        e(11144406353614615889, -1, "10"), e(11144406355180699830, -1, "11"), e(11144406356746783771, -1, "12"), e(11144406358312867712, -1, "13"), e(11144406347350280125, -1, "14"), e(11144406348916364066, -1, "15"), e(11144406350482448007, -1, "16"), e(11144406352048531948, -1, "17"), e(11144406341085944361, -1, "18"), e(11144406342652028302, -1, "19"), 
        e(11144406502392590284, -1, "20"), e(11144406500826506343, -1, "21"), e(11144406499260422402, 19, "22"), e(11144406497694338461, 18, "23"), e(11144406508656926048, 17, "24"), e(11144406507090842107, 16, "25"), e(11144406505524758166, 15, "26"), e(11144406503958674225, 14, "27"), e(11144406489863918756, -1, "28"), e(11144406488297834815, -1, "29"), 
        e(11144406350482448007, 25, "30"), e(11144406352048531948, 24, "31"), e(11144406347350280125, 27, "32"), e(11144406348916364066, 26, "33"), e(11144406356746783771, 12, "34"), e(11144406358312867712, 13, "35"), e(11144406353614615889, 10, "36"), e(11144406355180699830, 11, "37"), e(11144406337953776479, -1, "38"), e(11144406339519860420, -1, "39"), 
        e(11144406298801677954, -1, "40"), e(11144406297235594013, -1, "41"), e(11144406301933845836, -1, "42"), e(11144406300367761895, -1, "43"), e(11144406305066013718, 6, "44"), e(11144406303499929777, 7, "45"), e(11144406308198181600, 4, "46"), e(11144406306632097659, 5, "47"), e(11144406286273006426, -1, "48"), e(11144406284706922485, -1, "49"), 
        e(11144406146891535677, 45, "50"), e(11144406148457619618, 44, "51"), e(11144406150023703559, 47, "52"), e(11144406151589787500, 46, "53"), e(11144406153155871441, 3, "54"), e(11144406154721955382, 2, "55"), e(11144406156288039323, 1, "56"), e(11144406157854123264, 0, "57"), e(11144406134362864149, -1, "58"), e(11144406135928948090, -1, "59"), 
        e(11144406295669510072, -1, "60"), e(11144406294103426131, -1, "61"), e(11144406292537342190, 59, "62"), e(11144406290971258249, 58, "63"), e(11144406289405174308, -1, "64"), e(11144406287839090367, -1, "65"), e(11144406286273006426, 48, "66"), e(11144406284706922485, 49, "67"), e(11144406308198181600, 53, "68"), e(11144406306632097659, 52, "69"), 
        e(11144406143759367795, 43, "70"), e(11144406145325451736, 42, "71"), e(11144406140627199913, 41, "72"), e(11144406142193283854, 40, "73"), e(11144406137495032031, 61, "74"), e(11144406139061115972, 60, "75"), e(11144406134362864149, 63, "76"), e(11144406135928948090, 62, "77"), e(11144406156288039323, 56, "78"), e(11144406157854123264, 57, "79"), 
        e(11144406868856232478, -1, "80"), e(11144406867290148537, -1, "81"), e(11144406871988400360, -1, "82"), e(11144406870422316419, -1, "83"), e(11144406862591896714, -1, "84"), e(11144406861025812773, -1, "85"), e(11144406865724064596, -1, "86"), e(11144406864157980655, -1, "87"), e(11144406881384904006, -1, "88"), e(11144406879818820065, -1, "89"), 
        e(11144406716946090201, -1, "90"), e(11144406718512174142, -1, "91"), e(11144406720078258083, -1, "92"), e(11144406721644342024, -1, "93"), e(11144406710681754437, 81, "94"), e(11144406712247838378, 80, "95"), e(11144406713813922319, 83, "96"), e(11144406715380006260, 82, "97"), e(11144406729474761729, -1, "98"), e(11144406731040845670, -1, "99")
    };

    static constexpr uint64_t get_hash(const std::string_view value) noexcept
    {
    uint64_t hash = 352654597;

    for (char32_t ch : value)
        hash = (((hash << 5) | (hash >> 27)) + hash) ^ static_cast<uint32_t>(ch);

    return 352654597 + (hash * 1566083941);
    }

public:
    [[nodiscard]]
    static bool contains(const std::string_view key) noexcept
    {
        if (const size_t len = key.length(); len < 1u || len > 2u)
            return false;

        const uint64_t hash = get_hash(key);
        const size_t index = hash % 100;
        int8_t i = buckets[index] - static_cast<int8_t>(1);

        while (i >= 0)
        {
            const auto& entry = entries[i];

            if (entry.hash_code == hash && entry.key == key)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr size_t item_count = 100;
    static constexpr size_t min_key_length = 1;
    static constexpr size_t max_key_length = 2;

public:
    HashTableStructure_String_100() = delete;
    HashTableStructure_String_100(const HashTableStructure_String_100&) = delete;
    HashTableStructure_String_100& operator=(const HashTableStructure_String_100&) = delete;
    HashTableStructure_String_100(HashTableStructure_String_100&&) = delete;
    HashTableStructure_String_100& operator=(HashTableStructure_String_100&&) = delete;
};