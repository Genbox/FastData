// This file is auto-generated. Do not edit manually.
// Structure: HashTable (HashTableChain)
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashTableChainStructure_Single_100 final
{
    struct e
    {
        uint64_t hash_code;
        int8_t next;
        float key;

        e(const uint64_t hash_code, const int8_t next, const float key)
           : hash_code(hash_code), next(next), key(key) {}
    };

    static constexpr std::array<int8_t, 100> buckets = {
        78, 0, 0, 0, 85, 0, 0, 0, 92, 0, 
        0, 0, 99, 0, 0, 0, 81, 0, 0, 0, 
        88, 0, 0, 0, 95, 0, 0, 0, 77, 0, 
        0, 0, 84, 0, 0, 0, 91, 0, 0, 0, 
        98, 0, 0, 0, 80, 0, 0, 0, 87, 0, 
        0, 0, 94, 0, 0, 0, 76, 0, 0, 0, 
        83, 0, 0, 0, 90, 0, 0, 0, 97, 0, 
        0, 0, 79, 0, 0, 0, 86, 0, 0, 0, 
        93, 0, 0, 0, 100, 0, 0, 0, 82, 0, 
        0, 0, 89, 0, 0, 0, 96, 0, 0, 0
     };

    inline static const std::array<e, 100> entries = {
        e(0, -1, 0.0f), e(1065353216, -1, 1.0f), e(1073741824, -1, 2.0f), e(1077936128, -1, 3.0f), e(1082130432, -1, 4.0f), e(1084227584, -1, 5.0f), e(1086324736, -1, 6.0f), e(1088421888, -1, 7.0f), e(1090519040, -1, 8.0f), e(1091567616, 1, 9.0f), 
        e(1092616192, -1, 10.0f), e(1093664768, -1, 11.0f), e(1094713344, -1, 12.0f), e(1095761920, -1, 13.0f), e(1096810496, -1, 14.0f), e(1097859072, -1, 15.0f), e(1098907648, -1, 16.0f), e(1099431936, 6, 17.0f), e(1099956224, 2, 18.0f), e(1100480512, -1, 19.0f), 
        e(1101004800, 0, 20.0f), e(1101529088, 7, 21.0f), e(1102053376, -1, 22.0f), e(1102577664, -1, 23.0f), e(1103101952, -1, 24.0f), e(1103626240, 8, 25.0f), e(1104150528, 3, 26.0f), e(1104674816, 9, 27.0f), e(1105199104, -1, 28.0f), e(1105723392, 10, 29.0f), 
        e(1106247680, -1, 30.0f), e(1106771968, 11, 31.0f), e(1107296256, -1, 32.0f), e(1107558400, 20, 33.0f), e(1107820544, 12, 34.0f), e(1108082688, 21, 35.0f), e(1108344832, 4, 36.0f), e(1108606976, 22, 37.0f), e(1108869120, 13, 38.0f), e(1109131264, 23, 39.0f), 
        e(1109393408, -1, 40.0f), e(1109655552, 24, 41.0f), e(1109917696, 14, 42.0f), e(1110179840, 25, 43.0f), e(1110441984, 5, 44.0f), e(1110704128, 26, 45.0f), e(1110966272, 15, 46.0f), e(1111228416, 27, 47.0f), e(1111490560, -1, 48.0f), e(1111752704, 28, 49.0f), 
        e(1112014848, 16, 50.0f), e(1112276992, 29, 51.0f), e(1112539136, 17, 52.0f), e(1112801280, 30, 53.0f), e(1113063424, 18, 54.0f), e(1113325568, 31, 55.0f), e(1113587712, 19, 56.0f), e(1113849856, 32, 57.0f), e(1114112000, 33, 58.0f), e(1114374144, 34, 59.0f), 
        e(1114636288, 35, 60.0f), e(1114898432, 36, 61.0f), e(1115160576, 37, 62.0f), e(1115422720, 38, 63.0f), e(1115684864, 39, 64.0f), e(1115815936, 52, 65.0f), e(1115947008, 40, 66.0f), e(1116078080, 53, 67.0f), e(1116209152, 41, 68.0f), e(1116340224, 54, 69.0f), 
        e(1116471296, 42, 70.0f), e(1116602368, 55, 71.0f), e(1116733440, 43, 72.0f), e(1116864512, 56, 73.0f), e(1116995584, 44, 74.0f), e(1117126656, 57, 75.0f), e(1117257728, 45, 76.0f), e(1117388800, 58, 77.0f), e(1117519872, 46, 78.0f), e(1117650944, 59, 79.0f), 
        e(1117782016, 47, 80.0f), e(1117913088, 60, 81.0f), e(1118044160, 48, 82.0f), e(1118175232, 61, 83.0f), e(1118306304, 49, 84.0f), e(1118437376, 62, 85.0f), e(1118568448, 50, 86.0f), e(1118699520, 63, 87.0f), e(1118830592, 51, 88.0f), e(1118961664, 64, 89.0f), 
        e(1119092736, 65, 90.0f), e(1119223808, 66, 91.0f), e(1119354880, 67, 92.0f), e(1119485952, 68, 93.0f), e(1119617024, 69, 94.0f), e(1119748096, 70, 95.0f), e(1119879168, 71, 96.0f), e(1120010240, 72, 97.0f), e(1120141312, 73, 98.0f), e(1120272384, 74, 99.0f)
    };

    static uint64_t get_hash(const float value) noexcept
    {
        uint32_t bits;
        std::memcpy(&bits, &value, sizeof(bits));
        if (((bits - 1) & ~0x80000000u) >= 0x7F800000u)
            bits &= 0x7F800000u;
        return bits;
    }

public:
    [[nodiscard]]
    static bool contains(const float key) noexcept
    {
        if (key < 0.0f || key > 99.0f)
            return false;

        const uint64_t hash = get_hash(key);
        const size_t index = hash % 100;
        int8_t i = buckets[index] - static_cast<int8_t>(1);

        while (i >= 0)
        {
            const auto& [hash_code, next, key1] = entries[i];

            if (hash_code == hash && key1 == key)
                return true;

            i = next;
        }

        return false;
    }

    static constexpr size_t item_count = 100;
    static constexpr float min_key = 0.0f;
    static constexpr float max_key = 99.0f;

public:
    HashTableChainStructure_Single_100() = delete;
    HashTableChainStructure_Single_100(const HashTableChainStructure_Single_100&) = delete;
    HashTableChainStructure_Single_100& operator=(const HashTableChainStructure_Single_100&) = delete;
    HashTableChainStructure_Single_100(HashTableChainStructure_Single_100&&) = delete;
    HashTableChainStructure_Single_100& operator=(HashTableChainStructure_Single_100&&) = delete;
};