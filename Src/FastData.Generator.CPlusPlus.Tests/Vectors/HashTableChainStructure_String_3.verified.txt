// This file is auto-generated. Do not edit manually.
// Structure: HashTable (HashTableChain)
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashTableChainStructure_String_3 final
{
    struct e
    {
        uint64_t hash_code;
        int8_t next;
        std::string_view key;

        e(const uint64_t hash_code, const int8_t next, const std::string_view key)
           : hash_code(hash_code), next(next), key(key) {}
    };

    static constexpr std::array<int8_t, 3> buckets = {
        3, 2, 0
     };

    inline static const std::array<e, 3> entries = {
        e(18225461187723808291, -1, "a"), e(16750939634977259983, 0, "item"), e(9198652691199425319, -1, "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
    };

    static constexpr uint64_t get_hash(const std::string_view value) noexcept
    {
    uint64_t hash = 352654597;

    for (char32_t ch : value)
        hash = (((hash << 5) | (hash >> 27)) + hash) ^ static_cast<uint32_t>(ch);

    return 352654597 + (hash * 1566083941);
    }

public:
    [[nodiscard]]
    static bool contains(const std::string_view key) noexcept
    {
        if (const size_t len = key.length(); len < 1u || len > 255u)
            return false;

        const uint64_t hash = get_hash(key);
        const size_t index = hash % 3;
        int8_t i = buckets[index] - static_cast<int8_t>(1);

        while (i >= 0)
        {
            const auto& [hash_code, next, key1] = entries[i];

            if (hash_code == hash && key1 == key)
                return true;

            i = next;
        }

        return false;
    }

    static constexpr size_t item_count = 3;
    static constexpr size_t min_length = 1;
    static constexpr size_t max_length = 255;

public:
    HashTableChainStructure_String_3() = delete;
    HashTableChainStructure_String_3(const HashTableChainStructure_String_3&) = delete;
    HashTableChainStructure_String_3& operator=(const HashTableChainStructure_String_3&) = delete;
    HashTableChainStructure_String_3(HashTableChainStructure_String_3&&) = delete;
    HashTableChainStructure_String_3& operator=(HashTableChainStructure_String_3&&) = delete;
};