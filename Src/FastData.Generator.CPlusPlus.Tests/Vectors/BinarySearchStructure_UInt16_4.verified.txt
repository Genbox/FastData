// This file is auto-generated. Do not edit manually.
// Structure: BinarySearch
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class BinarySearchStructure_UInt16_4 final {
    static constexpr std::array<uint16_t, 4> keys = {
        0, 1, 2, std::numeric_limits<uint16_t>::max()
    };

public:
    [[nodiscard]]
    static constexpr bool contains(const uint16_t key) noexcept {
        if (key < 0 || key > std::numeric_limits<uint16_t>::max())
            return false;

        int32_t lo = 0;
        int32_t hi = 3;
        while (lo <= hi) {
            const int32_t mid = lo + ((hi - lo) >> 1);
            const uint16_t mid_key = keys[mid];

            if (mid_key == key)
                return true;

            if (mid_key < key)
                lo = mid + 1;
            else
                hi = mid - 1;
        }

        return false;
    }

    static constexpr size_t item_count = 4;
    static constexpr uint16_t min_key = 0;
    static constexpr uint16_t max_key = std::numeric_limits<uint16_t>::max();
};