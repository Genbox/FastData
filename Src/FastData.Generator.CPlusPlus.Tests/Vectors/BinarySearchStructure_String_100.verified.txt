// This file is auto-generated. Do not edit manually.
// Structure: BinarySearch
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class BinarySearchStructure_String_100 final
{
    static constexpr std::array<std::string_view, 100> keys = {
        "0", "1", "10", "11", "12", "13", "14", "15", "16", "17", 
        "18", "19", "2", "20", "21", "22", "23", "24", "25", "26", 
        "27", "28", "29", "3", "30", "31", "32", "33", "34", "35", 
        "36", "37", "38", "39", "4", "40", "41", "42", "43", "44", 
        "45", "46", "47", "48", "49", "5", "50", "51", "52", "53", 
        "54", "55", "56", "57", "58", "59", "6", "60", "61", "62", 
        "63", "64", "65", "66", "67", "68", "69", "7", "70", "71", 
        "72", "73", "74", "75", "76", "77", "78", "79", "8", "80", 
        "81", "82", "83", "84", "85", "86", "87", "88", "89", "9", 
        "90", "91", "92", "93", "94", "95", "96", "97", "98", "99"
    };

public:
    [[nodiscard]]
    static constexpr bool contains(const std::string_view key) noexcept
    {
        if (const size_t len = key.length(); len < 1u || len > 2u)
            return false;

        size_t lo = 0;
        size_t hi = 99;
        while (lo <= hi)
        {
            const size_t mid = lo + ((hi - lo) >> 1);

            if (keys[mid] == key)
                return true;

            if (keys[mid] < key)
                lo = mid + 1;
            else
                hi = mid - 1;
        }

        return false;
    }

    static constexpr size_t item_count = 100;
    static constexpr size_t min_key_length = 1;
    static constexpr size_t max_key_length = 2;
};