// This file is auto-generated. Do not edit manually.
// Structure: HashTable
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashTableStructure_String_13 final
{
    struct e
    {
        std::u32string_view key;
        int8_t next;
        uint64_t hash_code;
        
        e(const std::u32string_view key, const int8_t next, const uint64_t hash_code)
           : key(key), next(next), hash_code(hash_code) {}
    };

    static constexpr std::array<int8_t, 13> buckets = {
        6, 13, 10, 0, 11, 2, 12, 3, 7, 0, 
        0, 0, 0
     };

    inline static const std::array<e, 13> entries = {
        e(U"æ", -1, 18225460979434644138), e(U"à", -1, 18225460988831147784), e(U"ä", -1, 18225460982566812020), e(U"ö", -1, 18225461004491987194), e(U"ü", 0, 18225461020152826604), e(U"ß", 3, 18225461065569260893), e(U"é", 4, 18225460999793735371), e(U"è", -1, 18225461001359819312), e(U"ê", -1, 18225460998227651430), e(U"ç", 8, 18225460977868560197), 
        e(U"ñ", -1, 18225461012322406899), e(U"ø", -1, 18225461026417162368), e(U"å", 7, 18225460981000728079)
    };

    static constexpr uint64_t get_hash(const std::u32string_view value) noexcept
    {
    uint64_t hash = 352654597;

    for (char32_t ch : value)
        hash = (((hash << 5) | (hash >> 27)) + hash) ^ static_cast<uint32_t>(ch);

    return 352654597 + (hash * 1566083941);
    }

public:
    [[nodiscard]]
    static constexpr bool contains(const std::u32string_view key) noexcept
    {
        if (key.length() != 1u)
            return false;

        const uint64_t hash = get_hash(key);
        const size_t index = hash % 13;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const auto& entry = entries[i];

            if (entry.hash_code == hash && entry.key == key)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr size_t item_count = 13;
    static constexpr size_t min_key_length = 1;
    static constexpr size_t max_key_length = 1;
};