// This file is auto-generated. Do not edit manually.
// Structure: HashTable
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashTableStructure_UInt32_4 final
{
    struct e
    {
        uint32_t key;
        int8_t next;
        
        
        e(const uint32_t key, const int8_t next)
           : key(key), next(next) {}
    };

    static constexpr std::array<int8_t, 4> buckets = {
        1, 2, 3, 4
     };

    inline static const std::array<e, 4> entries = {
        e(0, -1), e(1u, -1), e(2u, -1), e(std::numeric_limits<uint32_t>::max(), -1)
    };

    static constexpr uint64_t get_hash(const uint32_t value) noexcept
    {
        return static_cast<uint64_t>(value);
    }

public:
    [[nodiscard]]
    static constexpr bool contains(const uint32_t key) noexcept
    {
        if (key < 0 || key > std::numeric_limits<uint32_t>::max())
            return false;

        const uint64_t hash = get_hash(key);
        const size_t index = hash % 4;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const auto& entry = entries[i];

            if (entry.key == key)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr size_t item_count = 4;
    static constexpr uint32_t min_key = 0;
    static constexpr uint32_t max_key = std::numeric_limits<uint32_t>::max();
};