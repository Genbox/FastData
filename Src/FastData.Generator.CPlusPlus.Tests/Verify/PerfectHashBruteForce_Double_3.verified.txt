// This file is auto-generated. Do not edit manually.
// Structure: PerfectHashBruteForce
#pragma once
#include <array>
#include <cstdint>
#include <limits>

class my_data
{
    struct e
    {
        double value;
        uint32_t hash_code;

        e(const double value, const uint32_t hash_code)
        : value(value), hash_code(hash_code) {}
    };

    inline static const std::array<e, 3> entries = {
        e(std::numeric_limits<double>::max(), 2066174499u), e(0.0, 1364076727u), e(std::numeric_limits<double>::lowest(), 2886815657u)
    };

    static uint32_t get_hash(const double value)
    {
        uint64_t bits;
        std::memcpy(&bits, &value, sizeof(bits));
        if (((bits - 1) & ~0x8000000000000000ull) >= 0x7FF0000000000000ull)
            bits &= 0x7FF0000000000000ull;
        return static_cast<uint32_t>(bits) ^ static_cast<uint32_t>(bits >> 32);
    }

    static uint32_t murmur_32(uint32_t h)
    {
        h ^= h >> 16;
        h *= 0x85EBCA6BU;
        h ^= h >> 13;
        h *= 0xC2B2AE35U;
        h ^= h >> 16;
        return h;
    }

public:
    static bool contains(const double value)
    {
        if (value < std::numeric_limits<double>::lowest() || value > std::numeric_limits<double>::max())
            return false;
        const uint32_t hash = murmur_32(get_hash(value) ^ 1);
        const uint32_t index = hash % 3;
        const e& entry = entries[index];

        return hash == entry.hash_code && value == entry.value;
    }

    static constexpr unsigned int item_count = 3;
    static constexpr double min_value = std::numeric_limits<double>::lowest();
    static constexpr double max_value = std::numeric_limits<double>::max();
};