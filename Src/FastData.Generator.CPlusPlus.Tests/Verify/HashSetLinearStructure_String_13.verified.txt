// This file is auto-generated. Do not edit manually.
// Structure: HashSet (HashSetLinear)
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashSetLinearStructure_String_13 final
{
    struct b
    {
        uint8_t start_index;
        uint8_t end_index;

        b(const uint8_t start_index, const uint8_t end_index)
        : start_index(start_index), end_index(end_index) { }
    };

    inline static const std::array<b, 47> buckets = {
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(1, 1), b(2, 2), b(3, 3), b(0, 0), b(0, 0), b(4, 4), b(5, 5), 
        b(0, 0), b(0, 0), b(6, 6), b(7, 7), b(0, 0), b(0, 0), b(0, 0), b(8, 8), b(0, 0), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(9, 9), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(10, 10), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(11, 11), b(0, 0), b(12, 12)
    };

    static constexpr std::array<std::u32string_view, 13> items = {
        U"ö", U"ü", U"è", U"ä", U"é", U"å", U"ê", U"æ", U"ç", U"ñ", 
        U"ß", U"ø", U"à"
    };

    static constexpr std::array<uint64_t, 13> hash_codes = {
        18225461004491987194, 18225461020152826604, 18225461001359819312, 18225460982566812020, 18225460999793735371, 18225460981000728079, 18225460998227651430, 18225460979434644138, 18225460977868560197, 18225461012322406899, 
        18225461065569260893, 18225461026417162368, 18225460988831147784
    };

    static constexpr uint64_t get_hash(const std::u32string_view value) noexcept
    {
    uint64_t hash = 352654597;

    for (char32_t ch : value)
        hash = (((hash << 5) | (hash >> 27)) + hash) ^ static_cast<uint32_t>(ch);

    return 352654597 + (hash * 1566083941);
    }

public:
    [[nodiscard]]
    static bool contains(const std::u32string_view value) noexcept
    {
        if (value.length() != 1u)
            return false;

        const uint64_t hash = get_hash(value);
        const auto& [start_index, end_index]= buckets[hash % 47];

        uint8_t index = start_index;

        while (index <= end_index)
        {
            if (hash_codes[index] == hash && items[index] == value)
                return true;

            index++;
        }

        return false;
    }

    static constexpr size_t item_count = 13;
    static constexpr size_t min_length = 1;
    static constexpr size_t max_length = 1;

public:
    HashSetLinearStructure_String_13() = delete;
    HashSetLinearStructure_String_13(const HashSetLinearStructure_String_13&) = delete;
    HashSetLinearStructure_String_13& operator=(const HashSetLinearStructure_String_13&) = delete;
    HashSetLinearStructure_String_13(HashSetLinearStructure_String_13&&) = delete;
    HashSetLinearStructure_String_13& operator=(HashSetLinearStructure_String_13&&) = delete;
};