// This file is auto-generated. Do not edit manually.
// Structure: EytzingerSearch
#pragma once
#include <string_view>
#include <array>
#include <cstdint>
#include <limits>

class my_data final
{
    static constexpr std::array<std::string_view, 3> entries = {
        "item2", "item1", "item3"
    };

public:
    [[nodiscard]]
    static bool contains(const std::string_view value) noexcept
    {
        if (const size_t len = value.length(); len != 5u)
            return false;

        size_t i = 0;
        while (i < entries.size())
        {
            if (entries[i] == value)
                return true;

            if (entries[i] < value)
                i = 2 * i + 2;
            else
                i = 2 * i + 1;
        }

        return false;
    }

    static constexpr unsigned int item_count = 3;
    static constexpr int min_length = 5;
    static constexpr int max_length = 5;

public:
    my_data() = delete;
    my_data(const my_data&) = delete;
    my_data& operator=(const my_data&) = delete;
    my_data(my_data&&) = delete;
    my_data& operator=(my_data&&) = delete;
};