// This file is auto-generated. Do not edit manually.
// Structure: HashSet (HashSetLinear)
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashSetLinearStructure_Int32_100 final
{
    struct b
    {
        uint8_t start_index;
        uint8_t end_index;

        b(const uint8_t start_index, const uint8_t end_index)
        : start_index(start_index), end_index(end_index) { }
    };

    inline static const std::array<b, 239> buckets = {
        b(0, 0), b(1, 1), b(2, 2), b(3, 3), b(4, 4), b(5, 5), b(6, 6), b(7, 7), b(8, 8), b(9, 9), 
        b(10, 10), b(11, 11), b(12, 12), b(13, 13), b(14, 14), b(15, 15), b(16, 16), b(17, 17), b(18, 18), b(19, 19), 
        b(20, 20), b(21, 21), b(22, 22), b(23, 23), b(24, 24), b(25, 25), b(26, 26), b(27, 27), b(28, 28), b(29, 29), 
        b(30, 30), b(31, 31), b(32, 32), b(33, 33), b(34, 34), b(35, 35), b(36, 36), b(37, 37), b(38, 38), b(39, 39), 
        b(40, 40), b(41, 41), b(42, 42), b(43, 43), b(44, 44), b(45, 45), b(46, 46), b(47, 47), b(48, 48), b(49, 49), 
        b(50, 50), b(51, 51), b(52, 52), b(53, 53), b(54, 54), b(55, 55), b(56, 56), b(57, 57), b(58, 58), b(59, 59), 
        b(60, 60), b(61, 61), b(62, 62), b(63, 63), b(64, 64), b(65, 65), b(66, 66), b(67, 67), b(68, 68), b(69, 69), 
        b(70, 70), b(71, 71), b(72, 72), b(73, 73), b(74, 74), b(75, 75), b(76, 76), b(77, 77), b(78, 78), b(79, 79), 
        b(80, 80), b(81, 81), b(82, 82), b(83, 83), b(84, 84), b(85, 85), b(86, 86), b(87, 87), b(88, 88), b(89, 89), 
        b(90, 90), b(91, 91), b(92, 92), b(93, 93), b(94, 94), b(95, 95), b(96, 96), b(97, 97), b(98, 98), b(99, 99), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0)
    };

    static constexpr std::array<int32_t, 100> items = {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
        10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
        30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
        50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
        70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 
        90, 91, 92, 93, 94, 95, 96, 97, 98, 99
    };

    static constexpr std::array<uint64_t, 100> hash_codes = {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
        10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
        30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
        50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
        70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 
        90, 91, 92, 93, 94, 95, 96, 97, 98, 99
    };

    static constexpr uint64_t get_hash(const int32_t value) noexcept
    {
        return static_cast<uint64_t>(value);
    }

public:
    [[nodiscard]]
    static bool contains(const int32_t value) noexcept
    {
        if (value < 0 || value > 99)
            return false;

        const uint64_t hash = get_hash(value);
        const auto& [start_index, end_index]= buckets[hash % 239];

        uint8_t index = start_index;

        while (index <= end_index)
        {
            if (hash_codes[index] == hash && items[index] == value)
                return true;

            index++;
        }

        return false;
    }

    static constexpr size_t item_count = 100;
    static constexpr int32_t min_value = 0;
    static constexpr int32_t max_value = 99;

public:
    HashSetLinearStructure_Int32_100() = delete;
    HashSetLinearStructure_Int32_100(const HashSetLinearStructure_Int32_100&) = delete;
    HashSetLinearStructure_Int32_100& operator=(const HashSetLinearStructure_Int32_100&) = delete;
    HashSetLinearStructure_Int32_100(HashSetLinearStructure_Int32_100&&) = delete;
    HashSetLinearStructure_Int32_100& operator=(HashSetLinearStructure_Int32_100&&) = delete;
};