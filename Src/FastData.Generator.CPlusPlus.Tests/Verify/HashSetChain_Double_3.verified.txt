// This file is auto-generated. Do not edit manually.
// Structure: HashSetChain
#pragma once
#include <array>
#include <cstdint>
#include <limits>

class my_data
{
    struct e
    {
        uint32_t hash_code;
        int8_t next;
        double value;

        e(const uint32_t hash_code, const int8_t next, double value)
           : hash_code(hash_code), next(next), value(value) {}
    };

    static constexpr std::array<int8_t, 3> buckets = {
        3, 1, 0
     };

    inline static const std::array<e, 3> entries = {
        e(1048576, -1, std::numeric_limits<double>::lowest()), e(0, -1, 0.0), e(2148532224, 1, std::numeric_limits<double>::max())
    };

    static uint32_t get_hash(double value)
    {
        uint64_t bits;
        std::memcpy(&bits, &value, sizeof(bits));
        if (((bits - 1) & ~0x8000000000000000ull) >= 0x7FF0000000000000ull)
            bits &= 0x7FF0000000000000ull;
        return static_cast<uint32_t>(bits) ^ static_cast<uint32_t>(bits >> 32);
    }

public:
    static bool contains(const double value)
    {
        if (value < std::numeric_limits<double>::lowest() || value > std::numeric_limits<double>::max())
            return false;

        const uint32_t hash = get_hash(value);
        const uint32_t index = hash % 3;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const auto& [hash_code, next, value1] = entries[i];

            if (hash_code == hash && value1 == value)
                return true;

            i = next;
        }

        return false;
    }

    static constexpr unsigned int item_count = 3;
    static constexpr double min_value = std::numeric_limits<double>::lowest();
    static constexpr double max_value = std::numeric_limits<double>::max();
};