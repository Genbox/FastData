// This file is auto-generated. Do not edit manually.
// Structure: PerfectHashBruteForce
#pragma once
#include <array>
#include <cstdint>

class my_data
{
    struct e
    {
        const int32_t value;
        const uint32_t hash_code;

        e(const int32_t value, const uint32_t hash_code)
        : value(value), hash_code(hash_code) {}
    };

    inline static const std::array<e, 3> entries = {
        e(3, 3262916883u), e(1, 2476801540u), e(2, 1228498187u)
    };

    static uint32_t get_hash(const int32_t value)
    {
        return static_cast<uint32_t>(value);
    }

    static uint32_t murmur_32(uint32_t h)
    {
        h ^= h >> 16;
        h *= 0x85EBCA6BU;
        h ^= h >> 13;
        h *= 0xC2B2AE35U;
        h ^= h >> 16;
        return h;
    }

public:
    static bool contains(const int32_t value)
    {
        if (value < 1 || value > 3)
            return false;
        const uint32_t hash = Murmur_32(get_hash(value) ^ 10);
        const uint32_t index = hash % 3;
        const e& entry = entries[index];

        return hash == entry.hash_code && value == entry.value;
    }

    static constexpr unsigned int item_count = 3;
    static constexpr int32_t min_value = 1;
    static constexpr int32_t max_value = 3;
};