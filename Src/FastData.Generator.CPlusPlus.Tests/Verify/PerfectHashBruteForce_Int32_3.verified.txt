// This file is auto-generated. Do not edit manually.
// Structure: PerfectHashBruteForce
#pragma once
#include <array>
#include <cstdint>
#include <limits>

class my_data
{
    struct e
    {
        int32_t value;
        uint32_t hash_code;

        e(const int32_t value, const uint32_t hash_code)
        : value(value), hash_code(hash_code) {}
    };

    inline static const std::array<e, 3> entries = {
        e(std::numeric_limits<int32_t>::max(), 1427853558u), e(0ll, 1364076727u), e(std::numeric_limits<int32_t>::lowest(), 2340387434u)
    };

static uint32_t get_hash(int32_t value)
{
    return static_cast<uint32_t>(value);
}

    static uint32_t murmur_32(uint32_t h)
    {
        h ^= h >> 16;
        h *= 0x85EBCA6BU;
        h ^= h >> 13;
        h *= 0xC2B2AE35U;
        h ^= h >> 16;
        return h;
    }

public:
    static bool contains(const int32_t value)
    {
        if (value < std::numeric_limits<int32_t>::lowest() || value > std::numeric_limits<int32_t>::max())
            return false;
        const uint32_t hash = murmur_32(get_hash(value) ^ 1);
        const uint32_t index = hash % 3;
        const e& entry = entries[index];

        return hash == entry.hash_code && value == entry.value;
    }

    static constexpr unsigned int item_count = 3;
    static constexpr int32_t min_value = std::numeric_limits<int32_t>::lowest();
    static constexpr int32_t max_value = std::numeric_limits<int32_t>::max();
};