// This file is auto-generated. Do not edit manually.
// Structure: HashTable (HashTablePerfect)
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashTablePerfectStructure_Int32_3 final
{
inline static const std::array<int32_t, 3> entries = {
            3, 1, 2
};

    static constexpr uint64_t get_hash(const int32_t value) noexcept
    {
        return static_cast<uint64_t>(value);
    }

public:
    [[nodiscard]]
    static bool contains(const int32_t key) noexcept
    {
        if (key < 1 || key > 3)
            return false;

        const uint64_t hash = get_hash(key);
        const size_t index = hash % 3;

        return key == entries[index];
    }

    static constexpr size_t item_count = 3;
    static constexpr int32_t min_value = 1;
    static constexpr int32_t max_value = 3;

public:
    HashTablePerfectStructure_Int32_3() = delete;
    HashTablePerfectStructure_Int32_3(const HashTablePerfectStructure_Int32_3&) = delete;
    HashTablePerfectStructure_Int32_3& operator=(const HashTablePerfectStructure_Int32_3&) = delete;
    HashTablePerfectStructure_Int32_3(HashTablePerfectStructure_Int32_3&&) = delete;
    HashTablePerfectStructure_Int32_3& operator=(HashTablePerfectStructure_Int32_3&&) = delete;
};