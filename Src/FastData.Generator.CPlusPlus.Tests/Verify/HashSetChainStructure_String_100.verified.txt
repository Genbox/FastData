// This file is auto-generated. Do not edit manually.
// Structure: HashSet (HashSetChain)
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashSetChainStructure_String_100 final
{
    struct e
    {
        uint64_t hash_code;
        int8_t next;
        std::u32string_view value;

        e(const uint64_t hash_code, const int8_t next, const std::u32string_view value)
           : hash_code(hash_code), next(next), value(value) {}
    };

    static constexpr std::array<int8_t, 100> buckets = {
        69, 91, 23, 0, 0, 0, 89, 31, 65, 0, 
        0, 0, 36, 73, 85, 30, 0, 0, 52, 97, 
        40, 0, 0, 79, 94, 33, 67, 0, 0, 99, 
        38, 75, 0, 0, 0, 0, 72, 95, 0, 0, 
        0, 55, 92, 22, 0, 0, 0, 0, 32, 77, 
        0, 10, 0, 0, 74, 88, 29, 0, 0, 70, 
        98, 24, 0, 0, 80, 90, 34, 66, 0, 0, 
        100, 35, 76, 86, 0, 0, 0, 51, 96, 39, 
        0, 0, 56, 93, 21, 68, 0, 0, 0, 37, 
        78, 0, 9, 0, 0, 71, 87, 0, 0, 0
     };

    inline static const std::array<e, 100> entries = {
        e(18225461114117863064, -1, U"0"), e(18225461112551779123, -1, U"1"), e(18225461110985695182, -1, U"2"), e(18225461109419611241, -1, U"3"), e(18225461107853527300, -1, U"4"), e(18225461106287443359, -1, U"5"), e(18225461104721359418, -1, U"6"), e(18225461103155275477, -1, U"7"), e(18225461126646534592, -1, U"8"), e(18225461125080450651, -1, U"9"), 
        e(11144406353614615889, -1, U"10"), e(11144406355180699830, -1, U"11"), e(11144406356746783771, -1, U"12"), e(11144406358312867712, -1, U"13"), e(11144406347350280125, -1, U"14"), e(11144406348916364066, -1, U"15"), e(11144406350482448007, -1, U"16"), e(11144406352048531948, -1, U"17"), e(11144406341085944361, -1, U"18"), e(11144406342652028302, -1, U"19"), 
        e(11144406502392590284, -1, U"20"), e(11144406500826506343, -1, U"21"), e(11144406499260422402, 19, U"22"), e(11144406497694338461, 18, U"23"), e(11144406508656926048, 17, U"24"), e(11144406507090842107, 16, U"25"), e(11144406505524758166, 15, U"26"), e(11144406503958674225, 14, U"27"), e(11144406489863918756, -1, U"28"), e(11144406488297834815, -1, U"29"), 
        e(11144406350482448007, 25, U"30"), e(11144406352048531948, 24, U"31"), e(11144406347350280125, 27, U"32"), e(11144406348916364066, 26, U"33"), e(11144406356746783771, 12, U"34"), e(11144406358312867712, 13, U"35"), e(11144406353614615889, 10, U"36"), e(11144406355180699830, 11, U"37"), e(11144406337953776479, -1, U"38"), e(11144406339519860420, -1, U"39"), 
        e(11144406298801677954, -1, U"40"), e(11144406297235594013, -1, U"41"), e(11144406301933845836, -1, U"42"), e(11144406300367761895, -1, U"43"), e(11144406305066013718, 6, U"44"), e(11144406303499929777, 7, U"45"), e(11144406308198181600, 4, U"46"), e(11144406306632097659, 5, U"47"), e(11144406286273006426, -1, U"48"), e(11144406284706922485, -1, U"49"), 
        e(11144406146891535677, 45, U"50"), e(11144406148457619618, 44, U"51"), e(11144406150023703559, 47, U"52"), e(11144406151589787500, 46, U"53"), e(11144406153155871441, 3, U"54"), e(11144406154721955382, 2, U"55"), e(11144406156288039323, 1, U"56"), e(11144406157854123264, 0, U"57"), e(11144406134362864149, -1, U"58"), e(11144406135928948090, -1, U"59"), 
        e(11144406295669510072, -1, U"60"), e(11144406294103426131, -1, U"61"), e(11144406292537342190, 59, U"62"), e(11144406290971258249, 58, U"63"), e(11144406289405174308, -1, U"64"), e(11144406287839090367, -1, U"65"), e(11144406286273006426, 48, U"66"), e(11144406284706922485, 49, U"67"), e(11144406308198181600, 53, U"68"), e(11144406306632097659, 52, U"69"), 
        e(11144406143759367795, 43, U"70"), e(11144406145325451736, 42, U"71"), e(11144406140627199913, 41, U"72"), e(11144406142193283854, 40, U"73"), e(11144406137495032031, 61, U"74"), e(11144406139061115972, 60, U"75"), e(11144406134362864149, 63, U"76"), e(11144406135928948090, 62, U"77"), e(11144406156288039323, 56, U"78"), e(11144406157854123264, 57, U"79"), 
        e(11144406868856232478, -1, U"80"), e(11144406867290148537, -1, U"81"), e(11144406871988400360, -1, U"82"), e(11144406870422316419, -1, U"83"), e(11144406862591896714, -1, U"84"), e(11144406861025812773, -1, U"85"), e(11144406865724064596, -1, U"86"), e(11144406864157980655, -1, U"87"), e(11144406881384904006, -1, U"88"), e(11144406879818820065, -1, U"89"), 
        e(11144406716946090201, -1, U"90"), e(11144406718512174142, -1, U"91"), e(11144406720078258083, -1, U"92"), e(11144406721644342024, -1, U"93"), e(11144406710681754437, 81, U"94"), e(11144406712247838378, 80, U"95"), e(11144406713813922319, 83, U"96"), e(11144406715380006260, 82, U"97"), e(11144406729474761729, -1, U"98"), e(11144406731040845670, -1, U"99")
    };

    static constexpr uint64_t get_hash(const std::u32string_view value) noexcept
    {
    uint64_t hash = 352654597;

    for (char32_t ch : value)
        hash = (((hash << 5) | (hash >> 27)) + hash) ^ static_cast<uint32_t>(ch);

    return 352654597 + (hash * 1566083941);
    }

public:
    [[nodiscard]]
    static bool contains(const std::u32string_view value) noexcept
    {
        if (const size_t len = value.length(); len < 1u || len > 2u)
            return false;

        const uint64_t hash = get_hash(value);
        const size_t index = hash % 100;
        int8_t i = buckets[index] - static_cast<int8_t>(1);

        while (i >= 0)
        {
            const auto& [hash_code, next, value1] = entries[i];

            if (hash_code == hash && value1 == value)
                return true;

            i = next;
        }

        return false;
    }

    static constexpr size_t item_count = 100;
    static constexpr size_t min_length = 1;
    static constexpr size_t max_length = 2;

public:
    HashSetChainStructure_String_100() = delete;
    HashSetChainStructure_String_100(const HashSetChainStructure_String_100&) = delete;
    HashSetChainStructure_String_100& operator=(const HashSetChainStructure_String_100&) = delete;
    HashSetChainStructure_String_100(HashSetChainStructure_String_100&&) = delete;
    HashSetChainStructure_String_100& operator=(HashSetChainStructure_String_100&&) = delete;
};