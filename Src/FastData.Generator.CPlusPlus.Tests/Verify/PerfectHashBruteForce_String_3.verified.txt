// This file is auto-generated. Do not edit manually.
// Structure: PerfectHashBruteForce
#pragma once
#include <string>
#include <array>
#include <cstdint>
#include <limits>

class my_data
{
    struct e
    {
        std::string value;
        uint32_t hash_code;

        e(const std::string value, const uint32_t hash_code)
        : value(value), hash_code(hash_code) {}
    };

    inline static const std::array<e, 3> entries = {
        e("item2", 2874739758u), e("item3", 2030593309u), e("item1", 3482164928u)
    };

    static uint32_t get_hash(const std::string& value)
    {
        uint32_t hash = 352654597;

        const char_t* ptr = value.data();
        size_t len = value.size();

        while (len-- > 0) {
            hash = (((hash << 5) | (hash >> 27)) + hash) ^ *ptr;
            ptr++;
        }

        return 352654597 + (hash * 1566083941);
    }

    static uint32_t murmur_32(uint32_t h)
    {
        h ^= h >> 16;
        h *= 0x85EBCA6BU;
        h ^= h >> 13;
        h *= 0xC2B2AE35U;
        h ^= h >> 16;
        return h;
    }

public:
    static bool contains(const std::string& value)
    {
        if (const size_t len = value.length(); len != 5u)
            return false;
        const uint32_t hash = murmur_32(get_hash(value) ^ 3);
        const uint32_t index = hash % 3;
        const e& entry = entries[index];

        return hash == entry.hash_code && value == entry.value;
    }

    static constexpr unsigned int item_count = 3;
    static constexpr int min_length = 5;
    static constexpr int max_length = 5;
};