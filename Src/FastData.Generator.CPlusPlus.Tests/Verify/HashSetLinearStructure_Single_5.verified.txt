// This file is auto-generated. Do not edit manually.
// Structure: HashSet
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashSetLinearStructure_Single_5 final
{
    struct b
    {
        uint8_t start_index;
        uint8_t end_index;

        b(const uint8_t start_index, const uint8_t end_index)
        : start_index(start_index), end_index(end_index) { }
    };

    inline static const std::array<b, 17> buckets = {
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(1, 1), b(0, 0), b(0, 0), b(0, 0), b(2, 2), b(0, 0), 
        b(0, 0), b(0, 0), b(0, 0), b(3, 3), b(0, 0), b(0, 0), b(4, 4)
    };

    static constexpr std::array<float, 5> items = {
        0.0f, 1.0f, std::numeric_limits<float>::lowest(), -1.0f, std::numeric_limits<float>::max()
    };

    static constexpr std::array<uint64_t, 5> hash_codes = {
        0, 1065353216, 4286578687, 3212836864, 2139095039
    };

    static uint64_t get_hash(const float value) noexcept
    {
        uint32_t bits;
        std::memcpy(&bits, &value, sizeof(bits));
        if (((bits - 1) & ~0x80000000u) >= 0x7F800000u)
            bits &= 0x7F800000u;
        return bits;
    }

public:
    [[nodiscard]]
    static bool contains(const float value) noexcept
    {
        if (value < std::numeric_limits<float>::lowest() || value > std::numeric_limits<float>::max())
            return false;

        const uint64_t hash = get_hash(value);
        const auto& [start_index, end_index]= buckets[hash % 17];

        uint8_t index = start_index;

        while (index <= end_index)
        {
            if (hash_codes[index] == hash && items[index] == value)
                return true;

            index++;
        }

        return false;
    }

    static constexpr size_t item_count = 5;
    static constexpr float min_value = std::numeric_limits<float>::lowest();
    static constexpr float max_value = std::numeric_limits<float>::max();

public:
    HashSetLinearStructure_Single_5() = delete;
    HashSetLinearStructure_Single_5(const HashSetLinearStructure_Single_5&) = delete;
    HashSetLinearStructure_Single_5& operator=(const HashSetLinearStructure_Single_5&) = delete;
    HashSetLinearStructure_Single_5(HashSetLinearStructure_Single_5&&) = delete;
    HashSetLinearStructure_Single_5& operator=(HashSetLinearStructure_Single_5&&) = delete;
};