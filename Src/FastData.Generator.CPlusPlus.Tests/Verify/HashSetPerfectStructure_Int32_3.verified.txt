// This file is auto-generated. Do not edit manually.
// Structure: HashSet
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashSetPerfectStructure_Int32_3 final
{
    struct e
    {
        int32_t value;
        uint64_t hash_code;

        e(const int32_t value, const uint64_t hash_code)
        : value(value), hash_code(hash_code) {}
    };

    inline static const std::array<e, 3> entries = {
        e(3, 3), e(1, 1), e(2, 2)
    };

    static constexpr uint64_t get_hash(const int32_t value) noexcept
    {
        return static_cast<uint64_t>(value);
    }

public:
    [[nodiscard]]
    static bool contains(const int32_t value) noexcept
    {
        if (value < 1 || value > 3)
            return false;
        const uint64_t hash = get_hash(value);
        const size_t index = hash % 3;
        const e& entry = entries[index];

        return hash == entry.hash_code && value == entry.value;
    }

    static constexpr size_t item_count = 3;
    static constexpr int32_t min_value = 1;
    static constexpr int32_t max_value = 3;

public:
    HashSetPerfectStructure_Int32_3() = delete;
    HashSetPerfectStructure_Int32_3(const HashSetPerfectStructure_Int32_3&) = delete;
    HashSetPerfectStructure_Int32_3& operator=(const HashSetPerfectStructure_Int32_3&) = delete;
    HashSetPerfectStructure_Int32_3(HashSetPerfectStructure_Int32_3&&) = delete;
    HashSetPerfectStructure_Int32_3& operator=(HashSetPerfectStructure_Int32_3&&) = delete;
};