// This file is auto-generated. Do not edit manually.
// Structure: HashSetChain
#pragma once
#include <string>
#include <array>
#include <cstdint>

class my_data
{
    struct e
    {
        const uint32_t hash_code;
        const int8_t next;
        const std::string& value;

        e(const uint32_t hash_code, const int8_t next, const std::string& value)
           : hash_code(hash_code), next(next), value(value) {}
    };

    inline static const std::array<int8_t, 3> buckets = {
        3, 0, 1
     };

    inline static const std::array<e, 3> entries = {
        e(2011983611, -1, "item1"), e(3578067552, -1, "item2"), e(849184197, 1, "item3")
    };

    static uint32_t get_hash(const std::string& value)
    {
        uint32_t hash1 = (5381 << 16) + 5381;
        uint32_t hash2 = (5381 << 16) + 5381;

        const char* ptr = value.data();
        uint32_t length = value.size();

        auto ptr32 = reinterpret_cast<const uint32_t*>(ptr);
        while (length >= 4) {
            hash1 = (hash1 << 5 | hash1 >> (32 - 5)) + hash1 ^ ptr32[0];
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ ptr32[1];
            ptr32 += 2;
            length -= 4;
        }

        auto ptr_char = reinterpret_cast<const char*>(ptr32);
        while (length-- > 0) {
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ *ptr_char++;
        }

        return hash1 + hash2 * 0x5D588B65;
    }

public:
    static bool contains(const std::string& value)
    {
        if (const size_t len = value.length(); len != 5u)
            return false;

        const uint32_t hash = get_hash(value);
        const uint32_t index = hash % 3;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const auto& [hash_code, next, value1] = entries[i];

            if (hash_code == hash && value1 == value)
                return true;

            i = next;
        }

        return false;
    }

    static constexpr unsigned int item_count = 3;
    static constexpr int min_length = 5;
    static constexpr int max_length = 5;
};