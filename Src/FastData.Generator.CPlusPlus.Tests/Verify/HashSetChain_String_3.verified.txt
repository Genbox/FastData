// This file is auto-generated. Do not edit manually.
// Structure: HashSetChain
#pragma once
#include <string_view>
#include <array>
#include <cstdint>
#include <limits>

class my_data final
{
    struct e
    {
        uint32_t hash_code;
        int8_t next;
        std::string_view value;

        e(const uint32_t hash_code, const int8_t next, const std::string_view value)
           : hash_code(hash_code), next(next), value(value) {}
    };

    static constexpr std::array<int8_t, 3> buckets = {
        3, 2, 1
     };

    inline static const std::array<e, 3> entries = {
        e(3957504911, -1, "item1"), e(2391420970, -1, "item2"), e(825337029, -1, "item3")
    };

    static constexpr uint32_t get_hash(const std::string_view value) noexcept
    {
        uint32_t hash = 352654597;

        const char* ptr = value.data();
        size_t len = value.size();

        while (len-- > 0) {
            hash = (((hash << 5) | (hash >> 27)) + hash) ^ *ptr;
            ptr++;
        }

        return 352654597 + (hash * 1566083941);
    }

public:
    [[nodiscard]]
    static bool contains(const std::string_view value) noexcept
    {
        if (const size_t len = value.length(); len != 5u)
            return false;

        const uint32_t hash = get_hash(value);
        const uint32_t index = hash % 3;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const auto& [hash_code, next, value1] = entries[i];

            if (hash_code == hash && value1 == value)
                return true;

            i = next;
        }

        return false;
    }

    static constexpr unsigned int item_count = 3;
    static constexpr int min_length = 5;
    static constexpr int max_length = 5;

public:
    my_data() = delete;
    my_data(const my_data&) = delete;
    my_data& operator=(const my_data&) = delete;
    my_data(my_data&&) = delete;
    my_data& operator=(my_data&&) = delete;
};