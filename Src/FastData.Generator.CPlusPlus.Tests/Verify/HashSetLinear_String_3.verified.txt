// This file is auto-generated. Do not edit manually.
// Structure: HashSetLinear
#pragma once
#include <string>
#include <array>
#include <cstdint>

class my_data
{
    struct b
    {
        uint8_t start_index;
        uint8_t end_index;

        b(const uint8_t start_index, const uint8_t end_index)
        : start_index(start_index), end_index(end_index) { }
    };

    static constexpr std::array<b, 11> buckets = {
        b(0, 0), b(0, 0), b(1, 1), b(0, 0), b(2, 2), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0)
    };

    static constexpr std::array<std::string&, 3> items = {
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "item", "a"
    };

    static constexpr std::array<uint32_t, 3> hash_codes = {
        2265191819, 1949155672, 972181027
    };

    static uint32_t get_hash(const std::string& value)
    {
        uint32_t hash1 = (5381 << 16) + 5381;
        uint32_t hash2 = (5381 << 16) + 5381;

        const char* ptr = value.data();
        uint32_t length = static_cast<uint32_t>(value.size());

        auto ptr32 = reinterpret_cast<const uint32_t*>(ptr);
        while (length >= 4) {
            hash1 = (hash1 << 5 | hash1 >> (32 - 5)) + hash1 ^ ptr32[0];
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ ptr32[1];
            ptr32 += 2;
            length -= 4;
        }

        auto ptr_char = reinterpret_cast<const char*>(ptr32);
        while (length-- > 0) {
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ *ptr_char++;
        }

        return hash1 + hash2 * 0x5D588B65;
    }

public:
    static bool contains(const std::string& value)
    {
        if (const size_t len = value.length(); len < 1u || len > 255u)
            return false;

        const uint32_t hash = get_hash(value);
        const auto& [start_index, end_index]= buckets[hash % 11];

        uint8_t index = start_index;

        while (index <= end_index)
        {
            if (hash_codes[index] == hash && value == items[index])
                return true;

            index++;
        }

        return false;
    }

    static constexpr unsigned int item_count = 3;
    static constexpr int min_length = 1;
    static constexpr int max_length = 255;
};