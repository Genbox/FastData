// This file is auto-generated. Do not edit manually.
// Structure: HashSetLinear
#pragma once
#include <array>
#include <cstdint>

class my_data
{
    struct b
    {
        const uint8_t start_index;
        const uint8_t end_index;

        b(const uint8_t start_index, const uint8_t end_index)
        : start_index(start_index), end_index(end_index) { }
    };

    inline static const std::array<b, 7> buckets = {
        b(0, 1), b(2, 2), b(3, 3), b(0, 0), b(0, 0), b(0, 0), b(0, 0)
    };

    inline static const std::array<uint64_t, 4> items = {
        18446744073709551615ull, 0ull, 1ull, 2ull
    };

    inline static const std::array<uint32_t, 4> hash_codes = {
        0, 0, 1, 2
    };

    static uint32_t get_hash(const uint64_t value)
    {
        return static_cast<uint32_t>(value);
    }

public:
    static bool contains(const uint64_t value)
    {
        if (value < 0ull || value > 18446744073709551615ull)
            return false;

        const uint32_t hash = get_hash(value);
        const auto& [start_index, end_index]= buckets[hash % 7];

        uint8_t index = start_index;

        while (index <= end_index)
        {
            if (hash_codes[index] == hash && items[index] == value)
                return true;

            index++;
        }

        return false;
    }

    static constexpr unsigned int item_count = 4;
    static constexpr uint64_t min_value = 0ull;
    static constexpr uint64_t max_value = 18446744073709551615ull;
};