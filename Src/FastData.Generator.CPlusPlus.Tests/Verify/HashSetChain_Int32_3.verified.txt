// This file is auto-generated. Do not edit manually.
// Structure: HashSetChain
#pragma once
#include <array>
#include <cstdint>
#include <limits>

class my_data
{
    struct e
    {
        uint32_t hash_code;
        int8_t next;
        int32_t value;

        e(const uint32_t hash_code, const int8_t next, int32_t value)
           : hash_code(hash_code), next(next), value(value) {}
    };

    inline static const std::array<int8_t, 3> buckets = {
        2, 3, 1
     };

    inline static const std::array<e, 3> entries = {
        e(2147483648, -1, std::numeric_limits<int32_t>::lowest()), e(0, -1, 0ll), e(2147483647, -1, std::numeric_limits<int32_t>::max())
    };

static uint32_t get_hash(int32_t value)
{
    return static_cast<uint32_t>(value);
}

public:
    static bool contains(const int32_t value)
    {
        if (value < std::numeric_limits<int32_t>::lowest() || value > std::numeric_limits<int32_t>::max())
            return false;

        const uint32_t hash = get_hash(value);
        const uint32_t index = hash % 3;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const auto& [hash_code, next, value1] = entries[i];

            if (hash_code == hash && value1 == value)
                return true;

            i = next;
        }

        return false;
    }

    static constexpr unsigned int item_count = 3;
    static constexpr int32_t min_value = std::numeric_limits<int32_t>::lowest();
    static constexpr int32_t max_value = std::numeric_limits<int32_t>::max();
};