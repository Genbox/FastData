// This file is auto-generated. Do not edit manually.
// Structure: HashSet
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashSetChainStructure_Int32_100 final
{
    struct e
    {
        uint64_t hash_code;
        int8_t next;
        int32_t value;

        e(const uint64_t hash_code, const int8_t next, const int32_t value)
           : hash_code(hash_code), next(next), value(value) {}
    };

    static constexpr std::array<int8_t, 100> buckets = {
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100
     };

    inline static const std::array<e, 100> entries = {
        e(0, -1, 0), e(1, -1, 1), e(2, -1, 2), e(3, -1, 3), e(4, -1, 4), e(5, -1, 5), e(6, -1, 6), e(7, -1, 7), e(8, -1, 8), e(9, -1, 9), 
        e(10, -1, 10), e(11, -1, 11), e(12, -1, 12), e(13, -1, 13), e(14, -1, 14), e(15, -1, 15), e(16, -1, 16), e(17, -1, 17), e(18, -1, 18), e(19, -1, 19), 
        e(20, -1, 20), e(21, -1, 21), e(22, -1, 22), e(23, -1, 23), e(24, -1, 24), e(25, -1, 25), e(26, -1, 26), e(27, -1, 27), e(28, -1, 28), e(29, -1, 29), 
        e(30, -1, 30), e(31, -1, 31), e(32, -1, 32), e(33, -1, 33), e(34, -1, 34), e(35, -1, 35), e(36, -1, 36), e(37, -1, 37), e(38, -1, 38), e(39, -1, 39), 
        e(40, -1, 40), e(41, -1, 41), e(42, -1, 42), e(43, -1, 43), e(44, -1, 44), e(45, -1, 45), e(46, -1, 46), e(47, -1, 47), e(48, -1, 48), e(49, -1, 49), 
        e(50, -1, 50), e(51, -1, 51), e(52, -1, 52), e(53, -1, 53), e(54, -1, 54), e(55, -1, 55), e(56, -1, 56), e(57, -1, 57), e(58, -1, 58), e(59, -1, 59), 
        e(60, -1, 60), e(61, -1, 61), e(62, -1, 62), e(63, -1, 63), e(64, -1, 64), e(65, -1, 65), e(66, -1, 66), e(67, -1, 67), e(68, -1, 68), e(69, -1, 69), 
        e(70, -1, 70), e(71, -1, 71), e(72, -1, 72), e(73, -1, 73), e(74, -1, 74), e(75, -1, 75), e(76, -1, 76), e(77, -1, 77), e(78, -1, 78), e(79, -1, 79), 
        e(80, -1, 80), e(81, -1, 81), e(82, -1, 82), e(83, -1, 83), e(84, -1, 84), e(85, -1, 85), e(86, -1, 86), e(87, -1, 87), e(88, -1, 88), e(89, -1, 89), 
        e(90, -1, 90), e(91, -1, 91), e(92, -1, 92), e(93, -1, 93), e(94, -1, 94), e(95, -1, 95), e(96, -1, 96), e(97, -1, 97), e(98, -1, 98), e(99, -1, 99)
    };

    static constexpr uint64_t get_hash(const int32_t value) noexcept
    {
        return static_cast<uint64_t>(value);
    }

public:
    [[nodiscard]]
    static bool contains(const int32_t value) noexcept
    {
        if (value < 0 || value > 99)
            return false;

        const uint64_t hash = get_hash(value);
        const size_t index = hash % 100;
        int8_t i = buckets[index] - 1;

        while (i >= 0)
        {
            const auto& [hash_code, next, value1] = entries[i];

            if (hash_code == hash && value1 == value)
                return true;

            i = next;
        }

        return false;
    }

    static constexpr size_t item_count = 100;
    static constexpr int32_t min_value = 0;
    static constexpr int32_t max_value = 99;

public:
    HashSetChainStructure_Int32_100() = delete;
    HashSetChainStructure_Int32_100(const HashSetChainStructure_Int32_100&) = delete;
    HashSetChainStructure_Int32_100& operator=(const HashSetChainStructure_Int32_100&) = delete;
    HashSetChainStructure_Int32_100(HashSetChainStructure_Int32_100&&) = delete;
    HashSetChainStructure_Int32_100& operator=(HashSetChainStructure_Int32_100&&) = delete;
};