// This file is auto-generated. Do not edit manually.
// Structure: BinarySearch (EytzingerSearch)
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class EytzingerSearchStructure_Double_4 final
{
    static constexpr std::array<double, 4> keys = {
        1.0, 0.0, std::numeric_limits<double>::max(), std::numeric_limits<double>::lowest()
    };

public:
    [[nodiscard]]
    static bool contains(const double key) noexcept
    {
        if (key < std::numeric_limits<double>::lowest() || key > std::numeric_limits<double>::max())
            return false;

        size_t i = 0;
        while (i < keys.size())
        {
            if (keys[i] == key)
                return true;

            if (keys[i] < key)
                i = 2 * i + 2;
            else
                i = 2 * i + 1;
        }

        return false;
    }

    static constexpr size_t item_count = 4;
    static constexpr double min_value = std::numeric_limits<double>::lowest();
    static constexpr double max_value = std::numeric_limits<double>::max();

public:
    EytzingerSearchStructure_Double_4() = delete;
    EytzingerSearchStructure_Double_4(const EytzingerSearchStructure_Double_4&) = delete;
    EytzingerSearchStructure_Double_4& operator=(const EytzingerSearchStructure_Double_4&) = delete;
    EytzingerSearchStructure_Double_4(EytzingerSearchStructure_Double_4&&) = delete;
    EytzingerSearchStructure_Double_4& operator=(EytzingerSearchStructure_Double_4&&) = delete;
};