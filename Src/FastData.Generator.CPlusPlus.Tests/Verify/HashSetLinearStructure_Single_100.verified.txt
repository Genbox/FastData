// This file is auto-generated. Do not edit manually.
// Structure: HashSet
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class HashSetLinearStructure_Single_100 final
{
    struct b
    {
        uint8_t start_index;
        uint8_t end_index;

        b(const uint8_t start_index, const uint8_t end_index)
        : start_index(start_index), end_index(end_index) { }
    };

    inline static const std::array<b, 239> buckets = {
        b(0, 0), b(1, 1), b(0, 0), b(2, 2), b(3, 3), b(0, 0), b(0, 0), b(0, 0), b(4, 4), b(5, 5), 
        b(0, 0), b(0, 0), b(0, 0), b(6, 6), b(7, 7), b(0, 0), b(0, 0), b(0, 0), b(8, 8), b(0, 0), 
        b(0, 0), b(9, 9), b(0, 0), b(10, 10), b(0, 0), b(0, 0), b(11, 11), b(0, 0), b(12, 12), b(0, 0), 
        b(0, 0), b(13, 13), b(0, 0), b(14, 14), b(0, 0), b(0, 0), b(15, 15), b(0, 0), b(16, 16), b(0, 0), 
        b(0, 0), b(17, 17), b(0, 0), b(18, 18), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(19, 19), b(0, 0), 
        b(0, 0), b(20, 20), b(0, 0), b(21, 21), b(0, 0), b(0, 0), b(0, 0), b(22, 22), b(0, 0), b(0, 0), 
        b(0, 0), b(23, 23), b(24, 24), b(0, 0), b(0, 0), b(25, 25), b(0, 0), b(26, 26), b(0, 0), b(0, 0), 
        b(27, 27), b(28, 28), b(29, 29), b(0, 0), b(0, 0), b(30, 30), b(31, 31), b(32, 32), b(0, 0), b(0, 0), 
        b(0, 0), b(33, 33), b(34, 34), b(0, 0), b(0, 0), b(0, 0), b(35, 35), b(36, 36), b(0, 0), b(0, 0), 
        b(0, 0), b(37, 37), b(38, 38), b(0, 0), b(39, 39), b(0, 0), b(40, 40), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(41, 41), b(0, 0), b(0, 0), b(42, 42), b(0, 0), b(43, 43), b(0, 0), b(0, 0), b(44, 44), 
        b(0, 0), b(45, 45), b(0, 0), b(0, 0), b(46, 47), b(0, 0), b(48, 48), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(49, 49), b(0, 0), b(0, 0), b(50, 50), b(0, 0), b(51, 51), b(0, 0), b(0, 0), b(0, 0), 
        b(0, 0), b(52, 52), b(0, 0), b(0, 0), b(53, 53), b(54, 54), b(0, 0), b(0, 0), b(0, 0), b(0, 0), 
        b(55, 55), b(0, 0), b(0, 0), b(56, 56), b(57, 57), b(58, 58), b(0, 0), b(59, 59), b(60, 60), b(61, 61), 
        b(62, 62), b(0, 0), b(0, 0), b(63, 63), b(64, 64), b(65, 65), b(0, 0), b(0, 0), b(0, 0), b(66, 66), 
        b(67, 67), b(0, 0), b(0, 0), b(0, 0), b(68, 68), b(69, 69), b(0, 0), b(0, 0), b(0, 0), b(70, 70), 
        b(71, 71), b(0, 0), b(0, 0), b(0, 0), b(72, 72), b(73, 73), b(0, 0), b(0, 0), b(0, 0), b(74, 74), 
        b(0, 0), b(0, 0), b(75, 75), b(0, 0), b(76, 76), b(0, 0), b(0, 0), b(77, 78), b(0, 0), b(79, 79), 
        b(0, 0), b(0, 0), b(80, 80), b(0, 0), b(81, 81), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(82, 82), 
        b(83, 83), b(0, 0), b(0, 0), b(0, 0), b(84, 84), b(0, 0), b(0, 0), b(85, 85), b(0, 0), b(86, 86), 
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(87, 87), b(0, 0), b(0, 0), b(88, 88), b(89, 89), b(0, 0), 
        b(0, 0), b(90, 90), b(0, 0), b(91, 91), b(0, 0), b(0, 0), b(92, 92), b(93, 93), b(94, 94), b(0, 0), 
        b(0, 0), b(95, 95), b(96, 96), b(97, 97), b(0, 0), b(0, 0), b(0, 0), b(98, 98), b(99, 99)
    };

    static constexpr std::array<float, 100> items = {
        0.0f, 3.0f, 25.0f, 70.0f, 28.0f, 82.0f, 31.0f, 94.0f, 36.0f, 5.0f, 
        42.0f, 75.0f, 48.0f, 87.0f, 54.0f, 99.0f, 60.0f, 8.0f, 68.0f, 80.0f, 
        11.0f, 92.0f, 35.0f, 14.0f, 41.0f, 73.0f, 47.0f, 85.0f, 18.0f, 53.0f, 
        97.0f, 21.0f, 59.0f, 24.0f, 66.0f, 27.0f, 78.0f, 30.0f, 90.0f, 4.0f, 
        34.0f, 40.0f, 71.0f, 46.0f, 83.0f, 52.0f, 95.0f, 7.0f, 58.0f, 64.0f, 
        9.0f, 76.0f, 88.0f, 12.0f, 33.0f, 39.0f, 69.0f, 15.0f, 45.0f, 2.0f, 
        81.0f, 17.0f, 51.0f, 93.0f, 20.0f, 57.0f, 23.0f, 63.0f, 26.0f, 74.0f, 
        29.0f, 86.0f, 32.0f, 98.0f, 38.0f, 67.0f, 44.0f, 79.0f, 6.0f, 50.0f, 
        91.0f, 56.0f, 62.0f, 1.0f, 72.0f, 10.0f, 84.0f, 96.0f, 13.0f, 37.0f, 
        65.0f, 43.0f, 77.0f, 16.0f, 49.0f, 89.0f, 19.0f, 55.0f, 22.0f, 61.0f
    };

    static constexpr std::array<uint64_t, 100> hash_codes = {
        0, 1077936128, 1103626240, 1116471296, 1105199104, 1118044160, 1106771968, 1119617024, 1108344832, 1084227584, 
        1109917696, 1117126656, 1111490560, 1118699520, 1113063424, 1120272384, 1114636288, 1090519040, 1116209152, 1117782016, 
        1093664768, 1119354880, 1108082688, 1096810496, 1109655552, 1116864512, 1111228416, 1118437376, 1099956224, 1112801280, 
        1120010240, 1101529088, 1114374144, 1103101952, 1115947008, 1104674816, 1117519872, 1106247680, 1119092736, 1082130432, 
        1107820544, 1109393408, 1116602368, 1110966272, 1118175232, 1112539136, 1119748096, 1088421888, 1114112000, 1115684864, 
        1091567616, 1117257728, 1118830592, 1094713344, 1107558400, 1109131264, 1116340224, 1097859072, 1110704128, 1073741824, 
        1117913088, 1099431936, 1112276992, 1119485952, 1101004800, 1113849856, 1102577664, 1115422720, 1104150528, 1116995584, 
        1105723392, 1118568448, 1107296256, 1120141312, 1108869120, 1116078080, 1110441984, 1117650944, 1086324736, 1112014848, 
        1119223808, 1113587712, 1115160576, 1065353216, 1116733440, 1092616192, 1118306304, 1119879168, 1095761920, 1108606976, 
        1115815936, 1110179840, 1117388800, 1098907648, 1111752704, 1118961664, 1100480512, 1113325568, 1102053376, 1114898432
    };

    static uint64_t get_hash(const float value) noexcept
    {
        uint32_t bits;
        std::memcpy(&bits, &value, sizeof(bits));
        if (((bits - 1) & ~0x80000000u) >= 0x7F800000u)
            bits &= 0x7F800000u;
        return bits;
    }

public:
    [[nodiscard]]
    static bool contains(const float value) noexcept
    {
        if (value < 0.0f || value > 99.0f)
            return false;

        const uint64_t hash = get_hash(value);
        const auto& [start_index, end_index]= buckets[hash % 239];

        uint8_t index = start_index;

        while (index <= end_index)
        {
            if (hash_codes[index] == hash && items[index] == value)
                return true;

            index++;
        }

        return false;
    }

    static constexpr size_t item_count = 100;
    static constexpr float min_value = 0.0f;
    static constexpr float max_value = 99.0f;

public:
    HashSetLinearStructure_Single_100() = delete;
    HashSetLinearStructure_Single_100(const HashSetLinearStructure_Single_100&) = delete;
    HashSetLinearStructure_Single_100& operator=(const HashSetLinearStructure_Single_100&) = delete;
    HashSetLinearStructure_Single_100(HashSetLinearStructure_Single_100&&) = delete;
    HashSetLinearStructure_Single_100& operator=(HashSetLinearStructure_Single_100&&) = delete;
};