// This file is auto-generated. Do not edit manually.
// Structure: HashSetPerfect
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class my_data final
{
    struct e
    {
        std::string_view value;
        uint64_t hash_code;

        e(const std::string_view value, const uint64_t hash_code)
        : value(value), hash_code(hash_code) {}
    };

    inline static const std::array<e, 3> entries = {
        e("item1", 2617859997), e("item3", 677793355), e("item2", 1354700345)
    };

    static constexpr uint64_t get_hash(const std::string_view value) noexcept
    {
        {uint64_t hash = 352654597;

        const char* ptr = value.data();
        size_t len = value.size();

        while (len-- > 0) {
            hash = (((hash << 5) | (hash >> 27)) + hash) ^ *ptr;
            ptr++;
        }

        return 352654597 + (hash * 1566083941);
    }

    static uint64 mixer(uint64 h) noexcept
    {
        h ^= h >> 33;
        h *= 0xFF51AFD7ED558CCD;
        h ^= h >> 33;
        h *= 0xC4CEB9FE1A85EC53;
        h ^= h >> 33;
        return h;
    }

public:
    [[nodiscard]]
    static bool contains(const std::string_view value) noexcept
    {
        if (value.length() != 5u)
            return false;
        const uint64_t hash = mixer(get_hash(value) ^ 7);
        const size_t index = hash % 3;
        const e& entry = entries[index];

        return hash == entry.hash_code && value == entry.value;
    }

    static constexpr size_t item_count = 3;
    static constexpr size_t min_length = 5;
    static constexpr size_t max_length = 5;

public:
    my_data() = delete;
    my_data(const my_data&) = delete;
    my_data& operator=(const my_data&) = delete;
    my_data(my_data&&) = delete;
    my_data& operator=(my_data&&) = delete;
};