// This file is auto-generated. Do not edit manually.
// Structure: HashSetLinear
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class my_data final
{
    struct b
    {
        uint8_t start_index;
        uint8_t end_index;

        b(const uint8_t start_index, const uint8_t end_index)
        : start_index(start_index), end_index(end_index) { }
    };

    inline static const std::array<b, 7> buckets = {
        b(0, 0), b(0, 0), b(1, 1), b(0, 0), b(0, 0), b(2, 2), b(0, 0)
    };

    static constexpr std::array<std::string_view, 3> items = {
        "item2", "item1", "item3"
    };

    static constexpr std::array<uint64_t, 3> hash_codes = {
        17825845003995989450, 17825845005562073391, 17825845002429905509
    };

    static constexpr uint64_t get_hash(const std::string_view value) noexcept
    {
        {uint64_t hash = 352654597;

        const char* ptr = value.data();
        size_t len = value.size();

        while (len-- > 0) {
            hash = (((hash << 5) | (hash >> 27)) + hash) ^ *ptr;
            ptr++;
        }

        return 352654597 + (hash * 1566083941);
    }

public:
    [[nodiscard]]
    static bool contains(const std::string_view value) noexcept
    {
        if (value.length() != 5u)
            return false;

        const uint64_t hash = get_hash(value);
        const auto& [start_index, end_index]= buckets[hash % 7];

        uint8_t index = start_index;

        while (index <= end_index)
        {
            if (hash_codes[index] == hash && items[index] == value)
                return true;

            index++;
        }

        return false;
    }

    static constexpr size_t item_count = 3;
    static constexpr size_t min_length = 5;
    static constexpr size_t max_length = 5;

public:
    my_data() = delete;
    my_data(const my_data&) = delete;
    my_data& operator=(const my_data&) = delete;
    my_data(my_data&&) = delete;
    my_data& operator=(my_data&&) = delete;
};