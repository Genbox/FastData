// This file is auto-generated. Do not edit manually.
// Structure: HashSetLinear
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class my_data final
{
    struct b
    {
        uint8_t start_index;
        uint8_t end_index;

        b(const uint8_t start_index, const uint8_t end_index)
        : start_index(start_index), end_index(end_index) { }
    };

    inline static const std::array<b, 7> buckets = {
        b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(0, 0), b(1, 1), b(2, 2)
    };

    static constexpr std::array<double, 3> items = {
        0.0, std::numeric_limits<double>::max(), std::numeric_limits<double>::lowest()
    };

    static constexpr std::array<uint64_t, 3> hash_codes = {
        0, 9218868437227405311, 18442240474082181119
    };

    static uint64_t get_hash(const double value) noexcept
    {
        uint64_t bits;
        std::memcpy(&bits, &value, sizeof(bits));
        if (((bits - 1) & ~0x8000000000000000ull) >= 0x7FF0000000000000ull)
            bits &= 0x7FF0000000000000ull;
        return bits;
    }

public:
    [[nodiscard]]
    static bool contains(const double value) noexcept
    {
        if (value < std::numeric_limits<double>::lowest() || value > std::numeric_limits<double>::max())
            return false;

        const uint64_t hash = get_hash(value);
        const auto& [start_index, end_index]= buckets[hash % 7];

        uint8_t index = start_index;

        while (index <= end_index)
        {
            if (hash_codes[index] == hash && items[index] == value)
                return true;

            index++;
        }

        return false;
    }

    static constexpr size_t item_count = 3;
    static constexpr double min_value = std::numeric_limits<double>::lowest();
    static constexpr double max_value = std::numeric_limits<double>::max();

public:
    my_data() = delete;
    my_data(const my_data&) = delete;
    my_data& operator=(const my_data&) = delete;
    my_data(my_data&&) = delete;
    my_data& operator=(my_data&&) = delete;
};