// This file is auto-generated. Do not edit manually.
// Structure: HashSetPerfect
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

class my_data final
{
    struct e
    {
        int32_t value;
        uint64_t hash_code;

        e(const int32_t value, const uint64_t hash_code)
        : value(value), hash_code(hash_code) {}
    };

    inline static const std::array<e, 3> entries = {
        e(std::numeric_limits<int32_t>::max(), 1427853558), e(0, 1364076727), e(std::numeric_limits<int32_t>::lowest(), 2340387434)
    };

    static constexpr uint64_t get_hash(const int32_t value) noexcept
    {
        return static_cast<uint64_t>(value);
    }

    static uint64 mixer(uint64 h) noexcept
    {
        h ^= h >> 33;
        h *= 0xFF51AFD7ED558CCD;
        h ^= h >> 33;
        h *= 0xC4CEB9FE1A85EC53;
        h ^= h >> 33;
        return h;
    }

public:
    [[nodiscard]]
    static bool contains(const int32_t value) noexcept
    {
        if (value < std::numeric_limits<int32_t>::lowest() || value > std::numeric_limits<int32_t>::max())
            return false;
        const uint64_t hash = mixer(get_hash(value) ^ 1);
        const size_t index = hash % 3;
        const e& entry = entries[index];

        return hash == entry.hash_code && value == entry.value;
    }

    static constexpr size_t item_count = 3;
    static constexpr int32_t min_value = std::numeric_limits<int32_t>::lowest();
    static constexpr int32_t max_value = std::numeric_limits<int32_t>::max();

public:
    my_data() = delete;
    my_data(const my_data&) = delete;
    my_data& operator=(const my_data&) = delete;
    my_data(my_data&&) = delete;
    my_data& operator=(my_data&&) = delete;
};