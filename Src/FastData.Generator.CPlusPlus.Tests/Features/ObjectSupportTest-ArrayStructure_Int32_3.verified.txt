// This file is auto-generated. Do not edit manually.
// Structure: Array
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

struct Person {
    int32_t age;
    std::u32string_view name;
    const Person* other;

    constexpr Person(const int32_t age, const std::u32string_view name, const Person* other) noexcept : age(age), name(name), other(other) { }
};
class ArrayStructure_Int32_3 final {
    inline static const std::array<Person*, 3> values = {
        new Person(1, U"Bob", new Person(4, U"Anna", nullptr)), new Person(2, U"Billy", nullptr), new Person(3, U"Bibi", nullptr)
    };
    static constexpr std::array<int32_t, 3> keys = {
        1, 2, 3
    };

public:
    [[nodiscard]]
    static constexpr bool contains(const int32_t key) noexcept {
        if (key < 1 || key > 3)
            return false;

        for (size_t i = 0; i < 3; i++)
        {
            if (keys[i] == key)
                return true;
        }
        return false;
    }
    [[nodiscard]]
    static constexpr bool try_lookup(const int32_t key, const Person*& value) noexcept {
        if (key < 1 || key > 3)
            return false;

        for (size_t i = 0; i < 3; i++) {
            if (keys[i] == key) {
                value = values[i];
                return true;
            }
        }

        value = nullptr;
        return false;
    }

    static constexpr size_t item_count = 3;
    static constexpr int32_t min_key = 1;
    static constexpr int32_t max_key = 3;
};