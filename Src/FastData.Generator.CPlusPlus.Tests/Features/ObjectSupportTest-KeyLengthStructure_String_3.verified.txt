// This file is auto-generated. Do not edit manually.
// Structure: Auto (KeyLength)
#pragma once
#include <array>
#include <cstdint>
#include <limits>
#include <string_view>

struct Person {
    int32_t age;
    std::string_view name;
   const Person* other;

    Person(const int32_t age, const std::string_view name, const Person* other) : age(age), name(name), other(other) { }
};
class KeyLengthStructure_String_3 final
{
    static constexpr std::array<int32_t, 3> offsets = {
        0, 1, 2
    };
    static inline std::array<Person*, 3> values = {
        new Person(1, "Bob", new Person(4, "Anna", nullptr)), new Person(2, "Billy", nullptr), new Person(3, "Bibi", nullptr)
    };
    static constexpr std::array<std::string_view, 3> keys = {
        "a", "aa", "aaa"
    };

public:
    [[nodiscard]]
    static bool contains(const std::string_view key) noexcept
    {
        if (const size_t len = key.length(); len < 1u || len > 3u)
            return false;

        return key == keys[key.length() - 1];
    }[[nodiscard]]
static bool try_lookup(const std::string_view key, const Person*& value) noexcept
{
        if (const size_t len = key.length(); len < 1u || len > 3u)
            return false;

    size_t idx = key.length() - 1;
    if (key == keys[idx])
    {
        value = values[offsets[idx]];
        return true;
    }

    value = nullptr;
    return false;
}

    static constexpr size_t item_count = 3;
    static constexpr size_t min_key_length = 1;
    static constexpr size_t max_key_length = 3;

public:
    KeyLengthStructure_String_3() = delete;
    KeyLengthStructure_String_3(const KeyLengthStructure_String_3&) = delete;
    KeyLengthStructure_String_3& operator=(const KeyLengthStructure_String_3&) = delete;
    KeyLengthStructure_String_3(KeyLengthStructure_String_3&&) = delete;
    KeyLengthStructure_String_3& operator=(KeyLengthStructure_String_3&&) = delete;
};