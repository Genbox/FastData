// This file is auto-generated. Do not edit manually.
// Structure: HashSetChain
#include <array>
#include <cstdint>

class MyData
{
    struct E
    {
        uint32_t hash_code;
        int8_t next;
        float value;

        E(const uint32_t hash_code, const int8_t next, const float& value)
           : hash_code(hash_code), next(next), value(value) {}
    };

    inline static const std::array<int8_t, 5> buckets = {
        3, 4, 1, 0, 5
     };

    inline static const std::array<E, 5> entries = {
        E(4286578687, -1, -3.4028235E+38f), E(3212836864, -1, -1f), E(0, -1, 0f), E(1065353216, -1, 1f), E(2139095039, 1, 3.4028235E+38f)
    };

    static uint32_t get_hash(const float value)
    {
        return reinterpret_cast<uint32_t>(value);
    }

public:
    static bool contains(const float& value)
    {
        if (value < -3.4028234663852886E+38f || value > 3.4028234663852886E+38f)
            return false;

        const uint32_t hash = get_hash(value);
        const uint32_t index = hash % 5;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const E& entry = entries[i];

            if (entry.hash_code == hash && value == entry.value)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr int item_count = 5;
    static constexpr float min_value = -3.4028234663852886E+38f;
    static constexpr float max_value = 3.4028234663852886E+38f;
};