// This file is auto-generated. Do not edit manually.
// Structure: PerfectHashBruteForce
#pragma once
#include <array>
#include <cstdint>

class my_data
{
    struct e
    {
        int32_t value;
        uint32_t hash_code;

        e(const int32_t& value, const uint32_t hash_code)
        : value(value), hash_code(hash_code) {}
    };

    static constexpr std::array<e, 5> entries = {
        e(1, 5u), e(-1, 4294967291u), e(-2147483648, 2147483652u), e(2147483647, 2147483643u), e(0, 4u)
    };

    static uint32_t get_hash(const int32_t value, const uint32_t seed)
    {
        return reinterpret_cast<uint32_t>(value ^ seed);
    }

public:
    static bool contains(const int32_t& value)
    {
        if (value < -2147483648 || value > 2147483647)
            return false;

        const uint32_t hash = get_hash(value, 4);
        const uint32_t index = hash % 5;
        const e& entry = entries[index];

        return hash == entry.hash_code && value == entry.value;
    }

    static constexpr unsigned int item_count = 5;
    static constexpr int32_t min_value = -2147483648;
    static constexpr int32_t max_value = 2147483647;
};