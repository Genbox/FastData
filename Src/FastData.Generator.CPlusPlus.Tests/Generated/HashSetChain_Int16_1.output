// This file is auto-generated. Do not edit manually.
// Structure: HashSetChain
#include <array>
#include <cstdint>

class MyData
{
    struct E
    {
        uint32_t hash_code;
        int8_t next;
        int16_t value;

        E(const uint32_t hash_code, const int8_t next, const int16_t& value)
           : hash_code(hash_code), next(next), value(value) {}
    };

    inline static const std::array<int8_t, 1> buckets = {
        1
     };

    inline static const std::array<E, 1> entries = {
        E(1, -1, 1)
    };

    static uint32_t get_hash(const std::string& str)
    {
        uint32_t hash1 = (5381 << 16) + 5381;
        uint32_t hash2 = (5381 << 16) + 5381;

        const char* ptr = str.data();
        uint32_t length = static_cast<uint32_t>(str.size());

        auto ptr32 = reinterpret_cast<const uint32_t*>(ptr);
        while (length >= 4) {
            hash1 = (hash1 << 5 | hash1 >> (32 - 5)) + hash1 ^ ptr32[0];
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ ptr32[1];
            ptr32 += 2;
            length -= 4;
        }

        auto ptr_char = reinterpret_cast<const char*>(ptr32);
        while (length-- > 0) {
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ *ptr_char++;
        }

        return hash1 + (hash2 * 0x5D588B65);
    }

public:
    static bool contains(const int16_t& value)
    {
       if (const size_t len = value.length(); len != 1)
           return false;

        const uint32_t hash = get_hash(value);
        const uint32_t index = hash % 1;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const E& entry = entries[i];

            if (entry.hash_code == hash && value == entry.value)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr int item_count = 1;
    static constexpr int8_t min_value = 1;
    static constexpr int8_t max_value = 1;
};