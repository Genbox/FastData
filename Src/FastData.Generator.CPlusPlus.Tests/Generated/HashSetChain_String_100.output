// This file is auto-generated. Do not edit manually.
// Structure: HashSetChain
#include <string>
#include <array>
#include <cstdint>

class HashSetChain_String_100
{
    struct E
    {
        uint32_t hash_code;
        int8_t next;
        std::string value;

        E(const uint32_t hash_code, const int8_t next, const std::string& value)
           : hash_code(hash_code), next(next), value(value) {}
    };

    inline static const std::array<int8_t, 100> buckets = {
        0, 51, 85, 66, 43, 11, 27, 0, 0, 0, 
        0, 0, 98, 73, 89, 84, 61, 33, 41, 17, 
        21, 68, 0, 0, 0, 0, 96, 75, 54, 0, 
        63, 48, 14, 82, 0, 0, 0, 50, 100, 93, 
        72, 0, 52, 0, 32, 77, 12, 88, 65, 0, 
        0, 0, 0, 0, 74, 57, 69, 91, 0, 0, 
        83, 86, 67, 44, 18, 28, 0, 0, 0, 90, 
        0, 97, 76, 0, 81, 62, 0, 42, 49, 22, 
        80, 0, 0, 0, 94, 95, 78, 53, 87, 64, 
        45, 13, 25, 99, 0, 0, 58, 0, 92, 71
     };

    inline static const std::array<E, 100> entries = {
        E(380679832, -1, "0"), E(3109563187, -1, "1"), E(1543479246, -1, "2"), E(4272362601, -1, "3"), E(2706278660, -1, "4"), E(1140194719, -1, "5"), E(3869078074, -1, "6"), E(2302994133, -1, "7"), E(24449472, -1, "8"), E(2753332827, -1, "9"), 
        E(1942893905, -1, "10"), E(3508977846, 2, "11"), E(780094491, -1, "12"), E(2346178432, 0, "13"), E(4268492733, 7, "14"), E(1539609378, -1, "15"), E(3105693319, 5, "16"), E(376809964, -1, "17"), E(2299124265, -1, "18"), E(3865208206, -1, "19"), 
        E(3246855820, -1, "20"), E(1680771879, -1, "21"), E(114687938, -1, "22"), E(2843571293, -1, "23"), E(921256992, -1, "24"), E(3650140347, -1, "25"), E(2084056406, 19, "26"), E(517972465, 18, "27"), E(3603086180, -1, "28"), E(2037002239, -1, "29"), 
        E(1660568903, -1, "30"), E(3226652844, -1, "31"), E(2823368317, -1, "32"), E(94484962, -1, "33"), E(3629937371, -1, "34"), E(901054016, -1, "35"), E(497769489, -1, "36"), E(2063853430, -1, "37"), E(2016799263, -1, "38"), E(3582883204, -1, "39"), 
        E(2964530818, -1, "40"), E(1398446877, -1, "41"), E(1801731404, 39, "42"), E(235647463, 38, "43"), E(638931990, -1, "44"), E(3367815345, -1, "45"), E(3771099872, 8, "46"), E(2205015931, -1, "47"), E(3320761178, 15, "48"), E(1754677237, -1, "49"), 
        E(1378243901, 3, "50"), E(2944327842, -1, "51"), E(215444487, 1, "52"), E(1781528428, -1, "53"), E(3347612369, -1, "54"), E(618729014, -1, "55"), E(2184812955, -1, "56"), E(3750896896, -1, "57"), E(1734474261, -1, "58"), E(3300558202, -1, "59"), 
        E(2682205816, 35, "60"), E(1116121875, -1, "61"), E(3845005230, 37, "62"), E(2278921289, 36, "63"), E(712837348, -1, "64"), E(3441720703, 30, "65"), E(1875636762, 33, "66"), E(309552821, -1, "67"), E(2325975456, -1, "68"), E(759891515, -1, "69"), 
        E(1095918899, -1, "70"), E(2662002840, -1, "71"), E(2258718313, -1, "72"), E(3824802254, -1, "73"), E(3421517727, 9, "74"), E(692634372, 46, "75"), E(289349845, 45, "76"), E(1855433786, -1, "77"), E(739688539, 29, "78"), E(2305772480, 28, "79"), 
        E(1788434974, 6, "80"), E(222351033, 14, "81"), E(625635560, 4, "82"), E(3354518915, 69, "83"), E(4114033802, 59, "84"), E(2547949861, 58, "85"), E(2951234388, -1, "86"), E(1385150447, 25, "87"), E(1432204614, 55, "88"), E(4161087969, 54, "89"), 
        E(202148057, -1, "90"), E(1768231998, -1, "91"), E(3334315939, 78, "92"), E(605432584, -1, "93"), E(2527746885, -1, "94"), E(4093830826, -1, "95"), E(1364947471, 34, "96"), E(2931031412, -1, "97"), E(4140884993, 23, "98"), E(1412001638, 22, "99")
    };

    static uint32_t get_hash(const std::string& str)
    {
        uint32_t hash1 = (5381 << 16) + 5381;
        uint32_t hash2 = (5381 << 16) + 5381;

        const char* ptr = str.data();
        uint32_t length = static_cast<uint32_t>(str.size());

        auto ptr32 = reinterpret_cast<const uint32_t*>(ptr);
        while (length >= 4) {
            hash1 = (hash1 << 5 | hash1 >> (32 - 5)) + hash1 ^ ptr32[0];
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ ptr32[1];
            ptr32 += 2;
            length -= 4;
        }

        auto ptr_char = reinterpret_cast<const char*>(ptr32);
        while (length-- > 0) {
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ *ptr_char++;
        }

        return hash1 + (hash2 * 0x5D588B65);
    }

public:
    static bool contains(const std::string& value)
    {
        if (const size_t len = value.length(); len < 1 || len > 2)
            return false;

        const uint32_t hash = get_hash(value);
        const uint32_t index = hash % 100;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const E& entry = entries[i];

            if (entry.hash_code == hash && value == entry.value)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr int item_count = 100;
    static constexpr int min_length = 1;
    static constexpr int max_length = 2;
};