// This file is auto-generated. Do not edit manually.
// Structure: HashSetChain
#include <string>
#include <array>
#include <cstdint>

class MyData
{
    struct E
    {
        uint32_t hash_code;
        int8_t next;
        std::string value;

        E(const uint32_t hash_code, const int8_t next, const std::string& value)
           : hash_code(hash_code), next(next), value(value) {}
    };

    inline static const std::array<int8_t, 7> buckets = {
        3, 0, 0, 7, 0, 2, 4
     };

    inline static const std::array<E, 7> entries = {
        E(3645924380, -1, "aaa"), E(3844005527, -1, "aaaaa"), E(2517435613, 0, "aaaaaa"), E(3612615712, -1, "aaaaaaa"), E(1489999822, -1, "aaaaaaaa"), E(1495121428, 4, "aaaaaaaaa"), E(3989733254, 5, "aaaaaaaaaa")
    };

    static uint32_t get_hash(const std::string& value)
    {
        uint32_t hash1 = (5381 << 16) + 5381;
        uint32_t hash2 = (5381 << 16) + 5381;

        const char* ptr = value.data();
        uint32_t length = static_cast<uint32_t>(value.size());

        auto ptr32 = reinterpret_cast<const uint32_t*>(ptr);
        while (length >= 4) {
            hash1 = (hash1 << 5 | hash1 >> (32 - 5)) + hash1 ^ ptr32[0];
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ ptr32[1];
            ptr32 += 2;
            length -= 4;
        }

        auto ptr_char = reinterpret_cast<const char*>(ptr32);
        while (length-- > 0) {
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ *ptr_char++;
        }

        return hash1 + (hash2 * 0x5D588B65);
    }

public:
    static bool contains(const std::string& value)
    {
       if ((1012ULL & (1ULL << (value.length() - 1) % 64)) == 0)
           return false;

        const uint32_t hash = get_hash(value);
        const uint32_t index = hash % 7;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const E& entry = entries[i];

            if (entry.hash_code == hash && value == entry.value)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr int item_count = 7;
    static constexpr int min_length = 3;
    static constexpr int max_length = 10;
};