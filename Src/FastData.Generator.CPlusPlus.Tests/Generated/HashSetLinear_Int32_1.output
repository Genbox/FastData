// This file is auto-generated. Do not edit manually.
// Structure: HashSetLinear
#include <array>
#include <cstdint>

class MyData
{
    struct B
    {
        uint8_t start_index;
        uint8_t end_index;

        B(const uint8_t start_index, const uint8_t end_index)
        : start_index(start_index), end_index(end_index) { }
    };

    inline static const std::array<B, 3> buckets = {
        B(0, 0), B(0, 0), B(0, 0)
    };

    inline static const std::array<int32_t, 1> items = {
        1
    };

    inline static const std::array<uint32_t, 1> hash_codes = {
        1
    };

    static uint32_t get_hash(const int32_t value)
    {
        return reinterpret_cast<uint32_t>(value);
    }

public:
    static bool contains(const int32_t& value)
    {
       if (const size_t len = value.length(); len != 1)
           return false;

        const uint32_t hash = get_hash(value);
        const B& b = buckets[hash % 3];

        uint8_t index = b.start_index;
        const uint8_t end_index = b.end_index;

        while (index <= end_index)
        {
            if (hash_codes[index] == hash && value == items[index])
                return true;

            index++;
        }

        return false;
    }

    static constexpr int item_count = 1;
    static constexpr int8_t min_value = 1;
    static constexpr int8_t max_value = 1;
};