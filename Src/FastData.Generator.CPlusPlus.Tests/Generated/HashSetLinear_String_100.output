#include <string>
#include <array>
#include <cstdint>

class HashSetLinear_String_100
{
    struct B
    {
        uint8_t start_index;
        uint8_t end_index;

        B(const uint8_t start_index, const uint8_t end_index)
        : start_index(start_index), end_index(end_index) { }
    };

    inline static const std::array<B, 631> buckets = {
        B(0, 0), B(0, 0), B(1, 1), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(2, 2), B(0, 0), B(3, 3), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(4, 4), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(5, 5), B(6, 6), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(7, 7), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(8, 8), B(9, 9), B(0, 0), B(0, 0), 
        B(0, 0), B(10, 10), B(0, 0), B(11, 11), B(12, 12), B(0, 0), B(0, 0), B(0, 0), B(13, 13), B(0, 0), 
        B(14, 14), B(15, 15), B(0, 0), B(16, 16), B(0, 0), B(0, 0), B(0, 0), B(17, 17), B(0, 0), B(0, 0), 
        B(0, 0), B(18, 18), B(0, 0), B(0, 0), B(19, 19), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(20, 20), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(21, 21), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(22, 22), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(23, 23), B(0, 0), B(0, 0), B(0, 0), B(24, 25), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(26, 26), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(27, 27), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(28, 28), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(29, 29), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(30, 30), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(31, 31), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(32, 32), B(33, 33), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(34, 34), B(35, 35), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(36, 36), 
        B(37, 37), B(0, 0), B(38, 38), B(0, 0), B(0, 0), B(0, 0), B(39, 39), B(40, 40), B(0, 0), B(41, 41), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(42, 42), B(0, 0), B(43, 43), B(0, 0), B(0, 0), B(0, 0), 
        B(44, 44), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(45, 45), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(46, 46), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(47, 47), B(0, 0), B(0, 0), B(48, 48), B(49, 49), B(0, 0), B(0, 0), B(50, 50), B(0, 0), B(0, 0), 
        B(51, 51), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(52, 52), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(53, 53), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(54, 54), B(0, 0), 
        B(55, 55), B(0, 0), B(56, 56), B(0, 0), B(0, 0), B(0, 0), B(57, 57), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(58, 58), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(59, 59), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(60, 60), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(61, 61), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(62, 62), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(63, 63), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(64, 64), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(65, 65), B(66, 66), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(67, 67), B(68, 68), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(69, 69), B(70, 70), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(71, 71), B(0, 0), B(72, 72), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(73, 73), B(0, 0), B(74, 74), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(75, 75), B(0, 0), B(0, 0), B(76, 76), B(0, 0), B(0, 0), B(0, 0), B(77, 77), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(78, 78), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(79, 79), B(0, 0), B(80, 80), 
        B(0, 0), B(81, 81), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(82, 82), B(0, 0), B(83, 83), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(84, 84), B(0, 0), B(85, 85), B(0, 0), B(0, 0), B(0, 0), B(86, 86), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(87, 87), B(0, 0), B(0, 0), B(88, 88), 
        B(0, 0), B(0, 0), B(0, 0), B(89, 89), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(90, 90), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(91, 91), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(92, 92), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(93, 93), B(94, 94), B(0, 0), B(95, 95), B(0, 0), B(0, 0), B(0, 0), 
        B(96, 96), B(97, 97), B(0, 0), B(98, 98), B(0, 0), B(0, 0), B(0, 0), B(99, 99), B(0, 0), B(0, 0), 
        B(0, 0)
    };

    inline static const std::array<std::string, 100> items = {
        "95", "48", "94", "49", "19", "79", "18", "78", "0", "57", 
        "40", "86", "56", "41", "87", "55", "93", "34", "23", "37", 
        "36", "11", "10", "17", "89", "8", "24", "73", "72", "75", 
        "39", "38", "60", "1", "61", "2", "84", "54", "92", "85", 
        "53", "91", "52", "90", "31", "30", "33", "16", "68", "9", 
        "15", "69", "46", "47", "99", "44", "82", "25", "26", "27", 
        "74", "77", "76", "59", "58", "62", "3", "63", "4", "64", 
        "5", "51", "97", "50", "96", "28", "32", "29", "14", "98", 
        "45", "83", "42", "80", "43", "81", "20", "21", "35", "22", 
        "13", "12", "88", "65", "6", "71", "66", "7", "70", "67"
    };

    inline static const std::array<uint32_t, 100> hash_codes = {
        4093830826, 3320761178, 2527746885, 1754677237, 3865208206, 2305772480, 2299124265, 739688539, 380679832, 3750896896, 
        2964530818, 2951234388, 2184812955, 1398446877, 1385150447, 618729014, 605432584, 3629937371, 2843571293, 2063853430, 
        497769489, 3508977846, 1942893905, 376809964, 4161087969, 24449472, 921256992, 3824802254, 2258718313, 692634372, 
        3582883204, 2016799263, 2682205816, 3109563187, 1116121875, 1543479246, 4114033802, 3347612369, 3334315939, 2547949861, 
        1781528428, 1768231998, 215444487, 202148057, 3226652844, 1660568903, 94484962, 3105693319, 2325975456, 2753332827, 
        1539609378, 759891515, 3771099872, 2205015931, 1412001638, 638931990, 625635560, 3650140347, 2084056406, 517972465, 
        3421517727, 1855433786, 289349845, 3300558202, 1734474261, 3845005230, 4272362601, 2278921289, 2706278660, 712837348, 
        1140194719, 2944327842, 2931031412, 1378243901, 1364947471, 3603086180, 2823368317, 2037002239, 4268492733, 4140884993, 
        3367815345, 3354518915, 1801731404, 1788434974, 235647463, 222351033, 3246855820, 1680771879, 901054016, 114687938, 
        2346178432, 780094491, 1432204614, 3441720703, 3869078074, 2662002840, 1875636762, 2302994133, 1095918899, 309552821
    };

    static uint32_t get_hash(const std::string& str)
    {
        uint32_t hash1 = (5381 << 16) + 5381;
        uint32_t hash2 = (5381 << 16) + 5381;

        const char* ptr = str.data();
        uint32_t length = static_cast<uint32_t>(str.size());

        auto ptr32 = reinterpret_cast<const uint32_t*>(ptr);
        while (length >= 4) {
            hash1 = (hash1 << 5 | hash1 >> (32 - 5)) + hash1 ^ ptr32[0];
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ ptr32[1];
            ptr32 += 2;
            length -= 4;
        }

        auto ptr_char = reinterpret_cast<const char*>(ptr32);
        while (length-- > 0) {
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ *ptr_char++;
        }

        return hash1 + (hash2 * 0x5D588B65);
    }

public:
    static bool contains(const std::string& value)
    {
        if (const size_t len = value.length(); len < 1 || len > 2)
            return false;

        const uint32_t hash = get_hash(value);
        const B& b = buckets[hash % 631];

        uint8_t index = b.start_index;
        const uint8_t end_index = b.end_index;

        while (index <= end_index)
        {
            if (hash_codes[index] == hash && value == items[index])
                return true;

            index++;
        }

        return false;
    }

    static constexpr int item_count = 100;
};