// This file is auto-generated. Do not edit manually.
// Structure: HashSetLinear
#include <array>
#include <cstdint>

class HashSetLinear_Single_100
{
    struct B
    {
        uint8_t start_index;
        uint8_t end_index;

        B(const uint8_t start_index, const uint8_t end_index)
        : start_index(start_index), end_index(end_index) { }
    };

    inline static const std::array<B, 239> buckets = {
        B(0, 0), B(1, 1), B(0, 0), B(2, 2), B(3, 3), B(0, 0), B(0, 0), B(0, 0), B(4, 4), B(5, 5), 
        B(0, 0), B(0, 0), B(0, 0), B(6, 6), B(7, 7), B(0, 0), B(0, 0), B(0, 0), B(8, 8), B(0, 0), 
        B(0, 0), B(9, 9), B(0, 0), B(10, 10), B(0, 0), B(0, 0), B(11, 11), B(0, 0), B(12, 12), B(0, 0), 
        B(0, 0), B(13, 13), B(0, 0), B(14, 14), B(0, 0), B(0, 0), B(15, 15), B(0, 0), B(16, 16), B(0, 0), 
        B(0, 0), B(17, 17), B(0, 0), B(18, 18), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(19, 19), B(0, 0), 
        B(0, 0), B(20, 20), B(0, 0), B(21, 21), B(0, 0), B(0, 0), B(0, 0), B(22, 22), B(0, 0), B(0, 0), 
        B(0, 0), B(23, 23), B(24, 24), B(0, 0), B(0, 0), B(25, 25), B(0, 0), B(26, 26), B(0, 0), B(0, 0), 
        B(27, 27), B(28, 28), B(29, 29), B(0, 0), B(0, 0), B(30, 30), B(31, 31), B(32, 32), B(0, 0), B(0, 0), 
        B(0, 0), B(33, 33), B(34, 34), B(0, 0), B(0, 0), B(0, 0), B(35, 35), B(36, 36), B(0, 0), B(0, 0), 
        B(0, 0), B(37, 37), B(38, 38), B(0, 0), B(39, 39), B(0, 0), B(40, 40), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(41, 41), B(0, 0), B(0, 0), B(42, 42), B(0, 0), B(43, 43), B(0, 0), B(0, 0), B(44, 44), 
        B(0, 0), B(45, 45), B(0, 0), B(0, 0), B(46, 47), B(0, 0), B(48, 48), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(49, 49), B(0, 0), B(0, 0), B(50, 50), B(0, 0), B(51, 51), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(52, 52), B(0, 0), B(0, 0), B(53, 53), B(54, 54), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(55, 55), B(0, 0), B(0, 0), B(56, 56), B(57, 57), B(58, 58), B(0, 0), B(59, 59), B(60, 60), B(61, 61), 
        B(62, 62), B(0, 0), B(0, 0), B(63, 63), B(64, 64), B(65, 65), B(0, 0), B(0, 0), B(0, 0), B(66, 66), 
        B(67, 67), B(0, 0), B(0, 0), B(0, 0), B(68, 68), B(69, 69), B(0, 0), B(0, 0), B(0, 0), B(70, 70), 
        B(71, 71), B(0, 0), B(0, 0), B(0, 0), B(72, 72), B(73, 73), B(0, 0), B(0, 0), B(0, 0), B(74, 74), 
        B(0, 0), B(0, 0), B(75, 75), B(0, 0), B(76, 76), B(0, 0), B(0, 0), B(77, 78), B(0, 0), B(79, 79), 
        B(0, 0), B(0, 0), B(80, 80), B(0, 0), B(81, 81), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(82, 82), 
        B(83, 83), B(0, 0), B(0, 0), B(0, 0), B(84, 84), B(0, 0), B(0, 0), B(85, 85), B(0, 0), B(86, 86), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(87, 87), B(0, 0), B(0, 0), B(88, 88), B(89, 89), B(0, 0), 
        B(0, 0), B(90, 90), B(0, 0), B(91, 91), B(0, 0), B(0, 0), B(92, 92), B(93, 93), B(94, 94), B(0, 0), 
        B(0, 0), B(95, 95), B(96, 96), B(97, 97), B(0, 0), B(0, 0), B(0, 0), B(98, 98), B(99, 99)
    };

    inline static const std::array<float, 100> items = {
        0, 3, 25, 70, 28, 82, 31, 94, 36, 5, 
        42, 75, 48, 87, 54, 99, 60, 8, 68, 80, 
        11, 92, 35, 14, 41, 73, 47, 85, 18, 53, 
        97, 21, 59, 24, 66, 27, 78, 30, 90, 4, 
        34, 40, 71, 46, 83, 52, 95, 7, 58, 64, 
        9, 76, 88, 12, 33, 39, 69, 15, 45, 2, 
        81, 17, 51, 93, 20, 57, 23, 63, 26, 74, 
        29, 86, 32, 98, 38, 67, 44, 79, 6, 50, 
        91, 56, 62, 1, 72, 10, 84, 96, 13, 37, 
        65, 43, 77, 16, 49, 89, 19, 55, 22, 61
    };

    inline static const std::array<uint32_t, 100> hash_codes = {
        0, 1077936128, 1103626240, 1116471296, 1105199104, 1118044160, 1106771968, 1119617024, 1108344832, 1084227584, 
        1109917696, 1117126656, 1111490560, 1118699520, 1113063424, 1120272384, 1114636288, 1090519040, 1116209152, 1117782016, 
        1093664768, 1119354880, 1108082688, 1096810496, 1109655552, 1116864512, 1111228416, 1118437376, 1099956224, 1112801280, 
        1120010240, 1101529088, 1114374144, 1103101952, 1115947008, 1104674816, 1117519872, 1106247680, 1119092736, 1082130432, 
        1107820544, 1109393408, 1116602368, 1110966272, 1118175232, 1112539136, 1119748096, 1088421888, 1114112000, 1115684864, 
        1091567616, 1117257728, 1118830592, 1094713344, 1107558400, 1109131264, 1116340224, 1097859072, 1110704128, 1073741824, 
        1117913088, 1099431936, 1112276992, 1119485952, 1101004800, 1113849856, 1102577664, 1115422720, 1104150528, 1116995584, 
        1105723392, 1118568448, 1107296256, 1120141312, 1108869120, 1116078080, 1110441984, 1117650944, 1086324736, 1112014848, 
        1119223808, 1113587712, 1115160576, 1065353216, 1116733440, 1092616192, 1118306304, 1119879168, 1095761920, 1108606976, 
        1115815936, 1110179840, 1117388800, 1098907648, 1111752704, 1118961664, 1100480512, 1113325568, 1102053376, 1114898432
    };

    static uint32_t get_hash(const std::string& str)
    {
        uint32_t hash1 = (5381 << 16) + 5381;
        uint32_t hash2 = (5381 << 16) + 5381;

        const char* ptr = str.data();
        uint32_t length = static_cast<uint32_t>(str.size());

        auto ptr32 = reinterpret_cast<const uint32_t*>(ptr);
        while (length >= 4) {
            hash1 = (hash1 << 5 | hash1 >> (32 - 5)) + hash1 ^ ptr32[0];
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ ptr32[1];
            ptr32 += 2;
            length -= 4;
        }

        auto ptr_char = reinterpret_cast<const char*>(ptr32);
        while (length-- > 0) {
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ *ptr_char++;
        }

        return hash1 + (hash2 * 0x5D588B65);
    }

public:
    static bool contains(const float& value)
    {
        if (const size_t len = value.length(); len < 0 || len > 99)
            return false;

        const uint32_t hash = get_hash(value);
        const B& b = buckets[hash % 239];

        uint8_t index = b.start_index;
        const uint8_t end_index = b.end_index;

        while (index <= end_index)
        {
            if (hash_codes[index] == hash && value == items[index])
                return true;

            index++;
        }

        return false;
    }

    static constexpr int item_count = 100;
    static constexpr int8_t min_value = 0;
    static constexpr int8_t max_value = 99;
};