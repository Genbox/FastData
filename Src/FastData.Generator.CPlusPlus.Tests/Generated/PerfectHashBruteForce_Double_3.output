// This file is auto-generated. Do not edit manually.
// Structure: PerfectHashBruteForce
#include <array>
#include <cstdint>

class MyData
{
    struct E
    {
        double value;
        uint32_t hash_code;

        E(const double& value, const uint32_t hash_code)
        : value(value), hash_code(hash_code) {}
    };

    inline static const std::array<E, 3> entries = {
        E(-1, 3218079744), E(1, 1070596096), E(0, 2097152)
    };

    static uint32_t get_hash(const double value, uint32_t seed,)
    {
        return reinterpret_cast<uint32_t>(value ^ seed);
    }

public:
    static bool contains(const double& value)
    {
        if (const size_t len = value.length(); len < -1 || len > 1)
            return false;

        const uint32_t hash = get_hash(value, 2097152);
        const uint32_t index = hash % 3;
        const E& entry = entries[index];

        return hash == entry.hash_code && value == entry.value;
    }

    static constexpr int item_count = 3;
    static constexpr int8_t min_value = -1;
    static constexpr int8_t max_value = 1;
};