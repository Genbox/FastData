// This file is auto-generated. Do not edit manually.
// Structure: PerfectHashBruteForce
#pragma once
#include <array>
#include <cstdint>

class my_data
{
    struct e
    {
        uint32_t value;
        uint32_t hash_code;

        e(const uint32_t value, const uint32_t hash_code)
        : value(value), hash_code(hash_code) {}
    };

    static constexpr std::array<e, 4> entries = {
        e(1u, 0u), e(0u, 1u), e(4294967295u, 4294967294u), e(2u, 3u)
    };

    static uint32_t get_hash(const uint32_t value, const uint32_t seed)
    {
        return reinterpret_cast<uint32_t>(value ^ seed);
    }

public:
    static bool contains(const uint32_t value)
    {
        if (value < 0u || value > 4294967295u)
            return false;

        const uint32_t hash = get_hash(value, 1);
        const uint32_t index = hash % 4;
        const e& entry = entries[index];

        return hash == entry.hash_code && value == entry.value;
    }

    static constexpr unsigned int item_count = 4;
    static constexpr uint32_t min_value = 0u;
    static constexpr uint32_t max_value = 4294967295u;
};