// This file is auto-generated. Do not edit manually.
// Structure: HashSetChain
#include <array>
#include <cstdint>

class HashSetChain_Single_100
{
    struct E
    {
        uint32_t hash_code;
        int8_t next;
        float value;

        E(const uint32_t hash_code, const int8_t next, const float& value)
           : hash_code(hash_code), next(next), value(value) {}
    };

    inline static const std::array<int8_t, 100> buckets = {
        78, 0, 0, 0, 85, 0, 0, 0, 92, 0, 
        0, 0, 99, 0, 0, 0, 81, 0, 0, 0, 
        88, 0, 0, 0, 95, 0, 0, 0, 77, 0, 
        0, 0, 84, 0, 0, 0, 91, 0, 0, 0, 
        98, 0, 0, 0, 80, 0, 0, 0, 87, 0, 
        0, 0, 94, 0, 0, 0, 76, 0, 0, 0, 
        83, 0, 0, 0, 90, 0, 0, 0, 97, 0, 
        0, 0, 79, 0, 0, 0, 86, 0, 0, 0, 
        93, 0, 0, 0, 100, 0, 0, 0, 82, 0, 
        0, 0, 89, 0, 0, 0, 96, 0, 0, 0
     };

    inline static const std::array<E, 100> entries = {
        E(0, -1, 0), E(1065353216, -1, 1), E(1073741824, -1, 2), E(1077936128, -1, 3), E(1082130432, -1, 4), E(1084227584, -1, 5), E(1086324736, -1, 6), E(1088421888, -1, 7), E(1090519040, -1, 8), E(1091567616, 1, 9), 
        E(1092616192, -1, 10), E(1093664768, -1, 11), E(1094713344, -1, 12), E(1095761920, -1, 13), E(1096810496, -1, 14), E(1097859072, -1, 15), E(1098907648, -1, 16), E(1099431936, 6, 17), E(1099956224, 2, 18), E(1100480512, -1, 19), 
        E(1101004800, 0, 20), E(1101529088, 7, 21), E(1102053376, -1, 22), E(1102577664, -1, 23), E(1103101952, -1, 24), E(1103626240, 8, 25), E(1104150528, 3, 26), E(1104674816, 9, 27), E(1105199104, -1, 28), E(1105723392, 10, 29), 
        E(1106247680, -1, 30), E(1106771968, 11, 31), E(1107296256, -1, 32), E(1107558400, 20, 33), E(1107820544, 12, 34), E(1108082688, 21, 35), E(1108344832, 4, 36), E(1108606976, 22, 37), E(1108869120, 13, 38), E(1109131264, 23, 39), 
        E(1109393408, -1, 40), E(1109655552, 24, 41), E(1109917696, 14, 42), E(1110179840, 25, 43), E(1110441984, 5, 44), E(1110704128, 26, 45), E(1110966272, 15, 46), E(1111228416, 27, 47), E(1111490560, -1, 48), E(1111752704, 28, 49), 
        E(1112014848, 16, 50), E(1112276992, 29, 51), E(1112539136, 17, 52), E(1112801280, 30, 53), E(1113063424, 18, 54), E(1113325568, 31, 55), E(1113587712, 19, 56), E(1113849856, 32, 57), E(1114112000, 33, 58), E(1114374144, 34, 59), 
        E(1114636288, 35, 60), E(1114898432, 36, 61), E(1115160576, 37, 62), E(1115422720, 38, 63), E(1115684864, 39, 64), E(1115815936, 52, 65), E(1115947008, 40, 66), E(1116078080, 53, 67), E(1116209152, 41, 68), E(1116340224, 54, 69), 
        E(1116471296, 42, 70), E(1116602368, 55, 71), E(1116733440, 43, 72), E(1116864512, 56, 73), E(1116995584, 44, 74), E(1117126656, 57, 75), E(1117257728, 45, 76), E(1117388800, 58, 77), E(1117519872, 46, 78), E(1117650944, 59, 79), 
        E(1117782016, 47, 80), E(1117913088, 60, 81), E(1118044160, 48, 82), E(1118175232, 61, 83), E(1118306304, 49, 84), E(1118437376, 62, 85), E(1118568448, 50, 86), E(1118699520, 63, 87), E(1118830592, 51, 88), E(1118961664, 64, 89), 
        E(1119092736, 65, 90), E(1119223808, 66, 91), E(1119354880, 67, 92), E(1119485952, 68, 93), E(1119617024, 69, 94), E(1119748096, 70, 95), E(1119879168, 71, 96), E(1120010240, 72, 97), E(1120141312, 73, 98), E(1120272384, 74, 99)
    };

    static uint32_t get_hash(const std::string& str)
    {
        uint32_t hash1 = (5381 << 16) + 5381;
        uint32_t hash2 = (5381 << 16) + 5381;

        const char* ptr = str.data();
        uint32_t length = static_cast<uint32_t>(str.size());

        auto ptr32 = reinterpret_cast<const uint32_t*>(ptr);
        while (length >= 4) {
            hash1 = (hash1 << 5 | hash1 >> (32 - 5)) + hash1 ^ ptr32[0];
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ ptr32[1];
            ptr32 += 2;
            length -= 4;
        }

        auto ptr_char = reinterpret_cast<const char*>(ptr32);
        while (length-- > 0) {
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ *ptr_char++;
        }

        return hash1 + (hash2 * 0x5D588B65);
    }

public:
    static bool contains(const float& value)
    {
        if (const size_t len = value.length(); len < 0 || len > 99)
            return false;

        const uint32_t hash = get_hash(value);
        const uint32_t index = hash % 100;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const E& entry = entries[i];

            if (entry.hash_code == hash && value == entry.value)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr int item_count = 100;
    static constexpr int8_t min_value = 0;
    static constexpr int8_t max_value = 99;
};