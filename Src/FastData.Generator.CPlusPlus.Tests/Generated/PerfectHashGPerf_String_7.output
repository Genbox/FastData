// This file is auto-generated. Do not edit manually.
// Structure: PerfectHashGPerf
#include <string>
#include <array>
#include <cstdint>

class PerfectHashGPerf_String_7
{
    inline static const std::array<int8_t, 256> asso = {
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 5, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31
    };

    inline static const std::array<std::string, 31> items = {
        "aaa", "", "", "", "", "aaaaa", "", "", "", "", 
        "aaaaaa", "", "", "", "", "aaaaaaa", "", "", "", "", 
        "aaaaaaaa", "", "", "", "", "aaaaaaaaa", "", "", "", "", 
        "aaaaaaaaaa"
    };

public:
    static bool contains(const std::string& value)
    {
       if ((1012ULL & (1ULL << (value.length() - 1) % 64)) == 0)
           return false;

        const uint32_t hash = get_hash(value);

        if (hash > 30)
            return false;

        return value == items[hash];
    }

    static uint32_t get_hash(const std::string& str)
    {
        uint32_t hash = 0;
        switch (str.length())
        {
            default:
                hash += static_cast<uint32_t>(asso[str[9]]);
            case 9:
                hash += static_cast<uint32_t>(asso[str[8]]);
            case 8:
                hash += static_cast<uint32_t>(asso[str[7]]);
            case 7:
                hash += static_cast<uint32_t>(asso[str[6]]);
            case 6:
                hash += static_cast<uint32_t>(asso[str[5]]);
            case 5:
            case 4:
                hash += static_cast<uint32_t>(asso[str[3]]);
            case 3:
                break;
        }

        return hash;
    }


    static constexpr int item_count = 7;
    static constexpr int min_length = 3;
    static constexpr int max_length = 10;
};