// This file is auto-generated. Do not edit manually.
// Structure: PerfectHashBruteForce
#include <array>
#include <cstdint>

class MyData
{
    struct E
    {
        int16_t value;
        uint32_t hash_code;

        E(const int16_t& value, const uint32_t hash_code)
        : value(value), hash_code(hash_code) {}
    };

    inline static const std::array<E, 100> entries = {
        E(1, 0), E(0, 1), E(3, 2), E(2, 3), E(5, 4), E(4, 5), E(7, 6), E(6, 7), E(9, 8), E(8, 9), 
        E(11, 10), E(10, 11), E(13, 12), E(12, 13), E(15, 14), E(14, 15), E(17, 16), E(16, 17), E(19, 18), E(18, 19), 
        E(21, 20), E(20, 21), E(23, 22), E(22, 23), E(25, 24), E(24, 25), E(27, 26), E(26, 27), E(29, 28), E(28, 29), 
        E(31, 30), E(30, 31), E(33, 32), E(32, 33), E(35, 34), E(34, 35), E(37, 36), E(36, 37), E(39, 38), E(38, 39), 
        E(41, 40), E(40, 41), E(43, 42), E(42, 43), E(45, 44), E(44, 45), E(47, 46), E(46, 47), E(49, 48), E(48, 49), 
        E(51, 50), E(50, 51), E(53, 52), E(52, 53), E(55, 54), E(54, 55), E(57, 56), E(56, 57), E(59, 58), E(58, 59), 
        E(61, 60), E(60, 61), E(63, 62), E(62, 63), E(65, 64), E(64, 65), E(67, 66), E(66, 67), E(69, 68), E(68, 69), 
        E(71, 70), E(70, 71), E(73, 72), E(72, 73), E(75, 74), E(74, 75), E(77, 76), E(76, 77), E(79, 78), E(78, 79), 
        E(81, 80), E(80, 81), E(83, 82), E(82, 83), E(85, 84), E(84, 85), E(87, 86), E(86, 87), E(89, 88), E(88, 89), 
        E(91, 90), E(90, 91), E(93, 92), E(92, 93), E(95, 94), E(94, 95), E(97, 96), E(96, 97), E(99, 98), E(98, 99)
    };

    static uint32_t get_hash(const std::string& str, uint32_t seed)
    {
        uint32_t hash1 = seed;
        uint32_t hash2 = seed;

        const char* ptr = str.data();
        uint32_t length = static_cast<uint32_t>(str.size());

        auto ptr32 = reinterpret_cast<const uint32_t*>(ptr);
        while (length >= 4) {
            hash1 = (hash1 << 5 | hash1 >> (32 - 5)) + hash1 ^ ptr32[0];
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ ptr32[1];
            ptr32 += 2;
            length -= 4;
        }

        auto ptr_char = reinterpret_cast<const char*>(ptr32);
        while (length-- > 0) {
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ *ptr_char++;
        }

        return hash1 + (hash2 * 0x5D588B65);
    }

public:
    static bool contains(const int16_t& value)
    {
        if (const size_t len = value.length(); len < 0 || len > 99)
            return false;

        const uint32_t hash = get_hash(value, 1);
        const uint32_t index = hash % 100;
        const E& entry = entries[index];

        return hash == entry.hash_code && value == entry.value;
    }

    static constexpr int item_count = 100;
    static constexpr int8_t min_value = 0;
    static constexpr int8_t max_value = 99;
};