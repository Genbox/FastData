// This file is auto-generated. Do not edit manually.
// Structure: PerfectHashBruteForce
#pragma once
#include <array>
#include <cstdint>

class my_data
{
    struct e
    {
        float value;
        uint32_t hash_code;

        e(const float& value, const uint32_t hash_code)
        : value(value), hash_code(hash_code) {}
    };

    static constexpr std::array<e, 5> entries = {
        e(-1.0f, 3196059650u), e(340282300000000000000000000000000000000.0f, 2122317821u), e(1.0f, 1048576002u), e(0.0f, 16777218u), e(-340282300000000000000000000000000000000.0f, 4269801469u)
    };

    static uint32_t get_hash(const float value, const uint32_t seed)
    {
        return reinterpret_cast<uint32_t>(value ^ seed);
    }

public:
    static bool contains(const float& value)
    {
        if (value < -340282346638529000000000000000000000000.0f || value > 340282346638529000000000000000000000000.0f)
            return false;

        const uint32_t hash = get_hash(value, 16777218);
        const uint32_t index = hash % 5;
        const e& entry = entries[index];

        return hash == entry.hash_code && value == entry.value;
    }

    static constexpr unsigned int item_count = 5;
    static constexpr float min_value = -340282346638529000000000000000000000000.0f;
    static constexpr float max_value = 340282346638529000000000000000000000000.0f;
};