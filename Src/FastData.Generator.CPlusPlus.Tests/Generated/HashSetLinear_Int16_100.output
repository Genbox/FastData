#include <string>
#include <array>
#include <cstdint>

class HashSetLinear_Int16_100
{
    struct B
    {
        uint8_t start_index;
        uint8_t end_index;

        B(const uint8_t start_index, const uint8_t end_index)
        : start_index(start_index), end_index(end_index) { }
    };

    inline static const std::array<B, 239> buckets = {
        B(0, 0), B(1, 1), B(2, 2), B(3, 3), B(4, 4), B(5, 5), B(6, 6), B(7, 7), B(8, 8), B(9, 9), 
        B(10, 10), B(11, 11), B(12, 12), B(13, 13), B(14, 14), B(15, 15), B(16, 16), B(17, 17), B(18, 18), B(19, 19), 
        B(20, 20), B(21, 21), B(22, 22), B(23, 23), B(24, 24), B(25, 25), B(26, 26), B(27, 27), B(28, 28), B(29, 29), 
        B(30, 30), B(31, 31), B(32, 32), B(33, 33), B(34, 34), B(35, 35), B(36, 36), B(37, 37), B(38, 38), B(39, 39), 
        B(40, 40), B(41, 41), B(42, 42), B(43, 43), B(44, 44), B(45, 45), B(46, 46), B(47, 47), B(48, 48), B(49, 49), 
        B(50, 50), B(51, 51), B(52, 52), B(53, 53), B(54, 54), B(55, 55), B(56, 56), B(57, 57), B(58, 58), B(59, 59), 
        B(60, 60), B(61, 61), B(62, 62), B(63, 63), B(64, 64), B(65, 65), B(66, 66), B(67, 67), B(68, 68), B(69, 69), 
        B(70, 70), B(71, 71), B(72, 72), B(73, 73), B(74, 74), B(75, 75), B(76, 76), B(77, 77), B(78, 78), B(79, 79), 
        B(80, 80), B(81, 81), B(82, 82), B(83, 83), B(84, 84), B(85, 85), B(86, 86), B(87, 87), B(88, 88), B(89, 89), 
        B(90, 90), B(91, 91), B(92, 92), B(93, 93), B(94, 94), B(95, 95), B(96, 96), B(97, 97), B(98, 98), B(99, 99), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0)
    };

    inline static const std::array<int16_t, 100> items = {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
        10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
        30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
        50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
        70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 
        90, 91, 92, 93, 94, 95, 96, 97, 98, 99
    };

    inline static const std::array<uint32_t, 100> hash_codes = {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
        10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
        30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
        50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
        70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 
        90, 91, 92, 93, 94, 95, 96, 97, 98, 99
    };

    static uint32_t get_hash(const std::string& str)
    {
        uint32_t hash1 = (5381 << 16) + 5381;
        uint32_t hash2 = (5381 << 16) + 5381;

        const char* ptr = str.data();
        uint32_t length = static_cast<uint32_t>(str.size());

        auto ptr32 = reinterpret_cast<const uint32_t*>(ptr);
        while (length >= 4) {
            hash1 = (hash1 << 5 | hash1 >> (32 - 5)) + hash1 ^ ptr32[0];
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ ptr32[1];
            ptr32 += 2;
            length -= 4;
        }

        auto ptr_char = reinterpret_cast<const char*>(ptr32);
        while (length-- > 0) {
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ *ptr_char++;
        }

        return hash1 + (hash2 * 0x5D588B65);
    }

public:
    static bool contains(const int16_t& value)
    {
        if (const size_t len = value.length(); len < 0 || len > 99)
            return false;

        const uint32_t hash = get_hash(value);
        const B& b = buckets[hash % 239];

        uint8_t index = b.start_index;
        const uint8_t end_index = b.end_index;

        while (index <= end_index)
        {
            if (hash_codes[index] == hash && value == items[index])
                return true;

            index++;
        }

        return false;
    }

    static constexpr int item_count = 100;
};