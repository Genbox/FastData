#include <string>
#include <array>
#include <cstdint>

class PerfectHashBruteForce_Single_3
{
    struct E
    {
        float value;
        uint32_t hash_code;

        E(const float& value, const uint32_t hash_code)
        : value(value), hash_code(hash_code) {}
    };

    inline static const std::array<E, 3> entries = {
        E(1, 1065353217), E(0, 1), E(-1, 3212836865)
    };

    static uint32_t get_hash(const std::string& str, uint32_t seed)
    {
        uint32_t hash1 = seed;
        uint32_t hash2 = seed;

        const char* ptr = str.data();
        uint32_t length = static_cast<uint32_t>(str.size());

        auto ptr32 = reinterpret_cast<const uint32_t*>(ptr);
        while (length >= 4) {
            hash1 = (hash1 << 5 | hash1 >> (32 - 5)) + hash1 ^ ptr32[0];
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ ptr32[1];
            ptr32 += 2;
            length -= 4;
        }

        auto ptr_char = reinterpret_cast<const char*>(ptr32);
        while (length-- > 0) {
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ *ptr_char++;
        }

        return hash1 + (hash2 * 0x5D588B65);
    }

public:
    static bool contains(const float& value)
    {
        if (const size_t len = value.length(); len < -1 || len > 1)
            return false;

        const uint32_t hash = get_hash(value, 1);
        const uint32_t index = hash % 3;
        const E& entry = entries[index];

        return hash == entry.hash_code && value == entry.value;
    }

    static constexpr int item_count = 3;
};