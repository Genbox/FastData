// This file is auto-generated. Do not edit manually.
// Structure: HashSetChain
#include <array>
#include <cstdint>

class MyData
{
    struct E
    {
        uint32_t hash_code;
        int8_t next;
        int8_t value;

        E(const uint32_t hash_code, const int8_t next, const int8_t& value)
           : hash_code(hash_code), next(next), value(value) {}
    };

    inline static const std::array<int8_t, 3> buckets = {
        2, 3, 0
     };

    inline static const std::array<E, 3> entries = {
        E(4294967295, -1, -1), E(0, 0, 0), E(1, -1, 1)
    };

    static uint32_t get_hash(const int8_t value)
    {
        return reinterpret_cast<uint32_t>(value);
    }

public:
    static bool contains(const int8_t& value)
    {
        if (const size_t len = value.length(); len < -1 || len > 1)
            return false;

        const uint32_t hash = get_hash(value);
        const uint32_t index = hash % 3;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const E& entry = entries[i];

            if (entry.hash_code == hash && value == entry.value)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr int item_count = 3;
    static constexpr int8_t min_value = -1;
    static constexpr int8_t max_value = 1;
};