// This file is auto-generated. Do not edit manually.
// Structure: HashSetChain
#include <array>
#include <cstdint>

class HashSetChain_UInt64_100
{
    struct E
    {
        uint32_t hash_code;
        int8_t next;
        uint64_t value;

        E(const uint32_t hash_code, const int8_t next, const uint64_t& value)
           : hash_code(hash_code), next(next), value(value) {}
    };

    inline static const std::array<int8_t, 100> buckets = {
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100
     };

    inline static const std::array<E, 100> entries = {
        E(0, -1, 0), E(1, -1, 1), E(2, -1, 2), E(3, -1, 3), E(4, -1, 4), E(5, -1, 5), E(6, -1, 6), E(7, -1, 7), E(8, -1, 8), E(9, -1, 9), 
        E(10, -1, 10), E(11, -1, 11), E(12, -1, 12), E(13, -1, 13), E(14, -1, 14), E(15, -1, 15), E(16, -1, 16), E(17, -1, 17), E(18, -1, 18), E(19, -1, 19), 
        E(20, -1, 20), E(21, -1, 21), E(22, -1, 22), E(23, -1, 23), E(24, -1, 24), E(25, -1, 25), E(26, -1, 26), E(27, -1, 27), E(28, -1, 28), E(29, -1, 29), 
        E(30, -1, 30), E(31, -1, 31), E(32, -1, 32), E(33, -1, 33), E(34, -1, 34), E(35, -1, 35), E(36, -1, 36), E(37, -1, 37), E(38, -1, 38), E(39, -1, 39), 
        E(40, -1, 40), E(41, -1, 41), E(42, -1, 42), E(43, -1, 43), E(44, -1, 44), E(45, -1, 45), E(46, -1, 46), E(47, -1, 47), E(48, -1, 48), E(49, -1, 49), 
        E(50, -1, 50), E(51, -1, 51), E(52, -1, 52), E(53, -1, 53), E(54, -1, 54), E(55, -1, 55), E(56, -1, 56), E(57, -1, 57), E(58, -1, 58), E(59, -1, 59), 
        E(60, -1, 60), E(61, -1, 61), E(62, -1, 62), E(63, -1, 63), E(64, -1, 64), E(65, -1, 65), E(66, -1, 66), E(67, -1, 67), E(68, -1, 68), E(69, -1, 69), 
        E(70, -1, 70), E(71, -1, 71), E(72, -1, 72), E(73, -1, 73), E(74, -1, 74), E(75, -1, 75), E(76, -1, 76), E(77, -1, 77), E(78, -1, 78), E(79, -1, 79), 
        E(80, -1, 80), E(81, -1, 81), E(82, -1, 82), E(83, -1, 83), E(84, -1, 84), E(85, -1, 85), E(86, -1, 86), E(87, -1, 87), E(88, -1, 88), E(89, -1, 89), 
        E(90, -1, 90), E(91, -1, 91), E(92, -1, 92), E(93, -1, 93), E(94, -1, 94), E(95, -1, 95), E(96, -1, 96), E(97, -1, 97), E(98, -1, 98), E(99, -1, 99)
    };

    static uint32_t get_hash(const std::string& str)
    {
        uint32_t hash1 = (5381 << 16) + 5381;
        uint32_t hash2 = (5381 << 16) + 5381;

        const char* ptr = str.data();
        uint32_t length = static_cast<uint32_t>(str.size());

        auto ptr32 = reinterpret_cast<const uint32_t*>(ptr);
        while (length >= 4) {
            hash1 = (hash1 << 5 | hash1 >> (32 - 5)) + hash1 ^ ptr32[0];
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ ptr32[1];
            ptr32 += 2;
            length -= 4;
        }

        auto ptr_char = reinterpret_cast<const char*>(ptr32);
        while (length-- > 0) {
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ *ptr_char++;
        }

        return hash1 + (hash2 * 0x5D588B65);
    }

public:
    static bool contains(const uint64_t& value)
    {
        if (const size_t len = value.length(); len < 0 || len > 99)
            return false;

        const uint32_t hash = get_hash(value);
        const uint32_t index = hash % 100;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const E& entry = entries[i];

            if (entry.hash_code == hash && value == entry.value)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr int item_count = 100;
    static constexpr uint8_t min_value = 0;
    static constexpr uint8_t max_value = 99;
};