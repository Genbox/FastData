// This file is auto-generated. Do not edit manually.
// Structure: BinarySearch
#include <array>
#include <cstdint>

class BinarySearch_Int32_100
{
    inline static const std::array<int32_t, 100> entries = {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
        10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
        30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
        50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
        70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 
        90, 91, 92, 93, 94, 95, 96, 97, 98, 99
    };

public:
    static bool contains(const int32_t& value)
    {
        if (const size_t len = value.length(); len < 0 || len > 99)
            return false;

        int lo = 0;
        int hi = 99;
        while (lo <= hi)
        {
            const int i = lo + ((hi - lo) >> 1);
            const int order = entries[i].compare(value);

            if (order == 0)
                return true;
            if (order < 0)
                lo = i + 1;
            else
                hi = i - 1;
        }

        return ((~lo) >= 0);
    }

    static constexpr int item_count = 100;
    static constexpr int8_t min_value = 0;
    static constexpr int8_t max_value = 99;
};