// This file is auto-generated. Do not edit manually.
// Structure: HashSetLinear
#include <array>
#include <cstdint>

class MyData
{
    struct B
    {
        uint8_t start_index;
        uint8_t end_index;

        B(const uint8_t start_index, const uint8_t end_index)
        : start_index(start_index), end_index(end_index) { }
    };

    inline static const std::array<B, 239> buckets = {
        B(0, 0), B(1, 1), B(2, 2), B(0, 0), B(0, 0), B(0, 0), B(3, 3), B(0, 0), B(0, 0), B(4, 4), 
        B(0, 0), B(0, 0), B(5, 5), B(6, 6), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(7, 7), B(0, 0), 
        B(8, 8), B(0, 0), B(0, 0), B(9, 9), B(0, 0), B(0, 0), B(10, 10), B(11, 11), B(0, 0), B(12, 12), 
        B(0, 0), B(13, 13), B(0, 0), B(0, 0), B(14, 14), B(15, 15), B(0, 0), B(16, 16), B(17, 17), B(0, 0), 
        B(18, 18), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(19, 19), B(0, 0), B(0, 0), B(20, 20), B(0, 0), 
        B(0, 0), B(21, 21), B(22, 22), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(23, 23), B(0, 0), B(24, 24), 
        B(0, 0), B(0, 0), B(25, 25), B(26, 26), B(27, 27), B(0, 0), B(0, 0), B(0, 0), B(28, 28), B(29, 29), 
        B(30, 30), B(0, 0), B(0, 0), B(31, 31), B(32, 32), B(0, 0), B(33, 33), B(34, 34), B(0, 0), B(35, 35), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(36, 36), B(0, 0), B(0, 0), B(37, 37), B(38, 38), B(0, 0), 
        B(39, 39), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(40, 40), B(41, 41), B(0, 0), B(42, 42), B(0, 0), 
        B(0, 0), B(43, 43), B(44, 44), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(45, 45), 
        B(0, 0), B(0, 0), B(46, 46), B(47, 48), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(49, 49), B(0, 0), 
        B(50, 50), B(0, 0), B(0, 0), B(51, 51), B(0, 0), B(0, 0), B(52, 52), B(53, 53), B(0, 0), B(54, 54), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(55, 55), B(56, 56), B(0, 0), B(57, 57), B(58, 58), B(0, 0), 
        B(59, 59), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(60, 60), B(0, 0), B(61, 61), B(62, 62), B(0, 0), 
        B(0, 0), B(63, 63), B(64, 65), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(66, 66), B(0, 0), B(67, 67), 
        B(0, 0), B(0, 0), B(68, 68), B(69, 69), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(70, 70), B(0, 0), 
        B(71, 71), B(0, 0), B(0, 0), B(72, 72), B(73, 73), B(0, 0), B(74, 74), B(75, 75), B(0, 0), B(76, 76), 
        B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(77, 77), B(0, 0), B(0, 0), B(78, 78), B(0, 0), B(0, 0), 
        B(79, 79), B(80, 80), B(0, 0), B(0, 0), B(0, 0), B(81, 81), B(82, 82), B(0, 0), B(83, 83), B(0, 0), 
        B(0, 0), B(84, 84), B(85, 85), B(0, 0), B(0, 0), B(0, 0), B(0, 0), B(86, 86), B(0, 0), B(87, 87), 
        B(0, 0), B(0, 0), B(88, 88), B(0, 0), B(0, 0), B(0, 0), B(89, 89), B(0, 0), B(90, 90), B(0, 0), 
        B(91, 91), B(0, 0), B(0, 0), B(92, 92), B(0, 0), B(0, 0), B(93, 93), B(94, 94), B(0, 0), B(95, 95), 
        B(96, 96), B(0, 0), B(0, 0), B(0, 0), B(97, 97), B(98, 98), B(0, 0), B(99, 99), B(0, 0)
    };

    inline static const std::array<double, 100> items = {
        0, 32, 67, 96, 61, 42, 87, 18, 78, 52, 
        33, 69, 23, 98, 62, 10, 43, 89, 28, 80, 
        53, 34, 71, 15, 63, 44, 91, 1, 19, 3, 
        82, 54, 8, 35, 73, 24, 64, 45, 93, 29, 
        84, 13, 55, 36, 75, 66, 46, 95, 7, 20, 
        86, 56, 37, 77, 25, 68, 11, 47, 97, 30, 
        88, 2, 57, 38, 79, 6, 16, 70, 48, 99, 
        21, 90, 58, 9, 39, 81, 26, 72, 49, 31, 
        5, 92, 14, 59, 40, 83, 17, 74, 50, 65, 
        22, 94, 60, 41, 85, 27, 4, 76, 12, 51
    };

    inline static const std::array<uint32_t, 100> hash_codes = {
        0, 1077936128, 1079033856, 1079508992, 1078886400, 1078263808, 1079361536, 1077018624, 1079214080, 1078591488, 
        1077968896, 1079066624, 1077346304, 1079541760, 1078919168, 1076101120, 1078296576, 1079394304, 1077673984, 1079246848, 
        1078624256, 1078001664, 1079099392, 1076756480, 1078951936, 1078329344, 1079427072, 1072693248, 1077084160, 1074266112, 
        1079279616, 1078657024, 1075838976, 1078034432, 1079132160, 1077411840, 1078984704, 1078362112, 1079459840, 1077739520, 
        1079312384, 1076494336, 1078689792, 1078067200, 1079164928, 1079017472, 1078394880, 1079492608, 1075576832, 1077149696, 
        1079345152, 1078722560, 1078099968, 1079197696, 1077477376, 1079050240, 1076232192, 1078427648, 1079525376, 1077805056, 
        1079377920, 1073741824, 1078755328, 1078132736, 1079230464, 1075314688, 1076887552, 1079083008, 1078460416, 1079558144, 
        1077215232, 1079410688, 1078788096, 1075970048, 1078165504, 1079263232, 1077542912, 1079115776, 1078493184, 1077870592, 
        1075052544, 1079443456, 1076625408, 1078820864, 1078198272, 1079296000, 1076953088, 1079148544, 1078525952, 1079001088, 
        1077280768, 1079476224, 1078853632, 1078231040, 1079328768, 1077608448, 1074790400, 1079181312, 1076363264, 1078558720
    };

    static uint32_t get_hash(const std::string& str)
    {
        uint32_t hash1 = (5381 << 16) + 5381;
        uint32_t hash2 = (5381 << 16) + 5381;

        const char* ptr = str.data();
        uint32_t length = static_cast<uint32_t>(str.size());

        auto ptr32 = reinterpret_cast<const uint32_t*>(ptr);
        while (length >= 4) {
            hash1 = (hash1 << 5 | hash1 >> (32 - 5)) + hash1 ^ ptr32[0];
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ ptr32[1];
            ptr32 += 2;
            length -= 4;
        }

        auto ptr_char = reinterpret_cast<const char*>(ptr32);
        while (length-- > 0) {
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ *ptr_char++;
        }

        return hash1 + (hash2 * 0x5D588B65);
    }

public:
    static bool contains(const double& value)
    {
        if (const size_t len = value.length(); len < 0 || len > 99)
            return false;

        const uint32_t hash = get_hash(value);
        const B& b = buckets[hash % 239];

        uint8_t index = b.start_index;
        const uint8_t end_index = b.end_index;

        while (index <= end_index)
        {
            if (hash_codes[index] == hash && value == items[index])
                return true;

            index++;
        }

        return false;
    }

    static constexpr int item_count = 100;
    static constexpr int8_t min_value = 0;
    static constexpr int8_t max_value = 99;
};