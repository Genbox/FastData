// This file is auto-generated. Do not edit manually.
// Structure: HashSetLinear
#include <string>
#include <array>
#include <cstdint>

class MyData
{
    struct B
    {
        uint8_t start_index;
        uint8_t end_index;

        B(const uint8_t start_index, const uint8_t end_index)
        : start_index(start_index), end_index(end_index) { }
    };

    inline static const std::array<B, 17> buckets = {
        B(0, 0), B(0, 0), B(0, 0), B(1, 1), B(0, 0), B(2, 2), B(3, 3), B(4, 4), B(0, 0), B(0, 0), 
        B(5, 5), B(0, 0), B(0, 0), B(0, 0), B(6, 6), B(0, 0), B(0, 0)
    };

    inline static const std::array<std::string, 7> items = {
        "aaa", "aaaaa", "aaaaaaaaa", "aaaaaaaa", "aaaaaaaaaa", "aaaaaaa", "aaaaaa"
    };

    inline static const std::array<uint32_t, 7> hash_codes = {
        3645924380, 3844005527, 1495121428, 1489999822, 3989733254, 3612615712, 2517435613
    };

    static uint32_t get_hash(const std::string& value)
    {
        uint32_t hash1 = (5381 << 16) + 5381;
        uint32_t hash2 = (5381 << 16) + 5381;

        const char* ptr = value.data();
        uint32_t length = static_cast<uint32_t>(value.size());

        auto ptr32 = reinterpret_cast<const uint32_t*>(ptr);
        while (length >= 4) {
            hash1 = (hash1 << 5 | hash1 >> (32 - 5)) + hash1 ^ ptr32[0];
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ ptr32[1];
            ptr32 += 2;
            length -= 4;
        }

        auto ptr_char = reinterpret_cast<const char*>(ptr32);
        while (length-- > 0) {
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ *ptr_char++;
        }

        return hash1 + (hash2 * 0x5D588B65);
    }

public:
    static bool contains(const std::string& value)
    {
       if ((1012ULL & (1ULL << (value.length() - 1) % 64)) == 0)
           return false;

        const uint32_t hash = get_hash(value);
        const B& b = buckets[hash % 17];

        uint8_t index = b.start_index;
        const uint8_t end_index = b.end_index;

        while (index <= end_index)
        {
            if (hash_codes[index] == hash && value == items[index])
                return true;

            index++;
        }

        return false;
    }

    static constexpr int item_count = 7;
    static constexpr int min_length = 3;
    static constexpr int max_length = 10;
};