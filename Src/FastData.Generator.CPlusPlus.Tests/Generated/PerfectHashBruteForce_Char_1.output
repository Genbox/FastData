// This file is auto-generated. Do not edit manually.
// Structure: PerfectHashBruteForce
#include <array>
#include <cstdint>

class MyData
{
    struct E
    {
        char value;
        uint32_t hash_code;

        E(const char& value, const uint32_t hash_code)
        : value(value), hash_code(hash_code) {}
    };

    inline static const std::array<E, 1> entries = {
        E('a', 96)
    };

    static uint32_t get_hash(const char value, uint32_t seed,)
    {
        return reinterpret_cast<uint32_t>(value ^ seed);
    }

public:
    static bool contains(const char& value)
    {
       if (const size_t len = value.length(); len != 97)
           return false;

        const uint32_t hash = get_hash(value, 1);
        const uint32_t index = hash % 1;
        const E& entry = entries[index];

        return hash == entry.hash_code && value == entry.value;
    }

    static constexpr int item_count = 1;
    static constexpr uint8_t min_value = a;
    static constexpr uint8_t max_value = a;
};