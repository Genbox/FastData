// This file is auto-generated. Do not edit manually.
// Structure: HashSetChain
#include <array>
#include <cstdint>

class HashSetChain_Double_100
{
    struct E
    {
        uint32_t hash_code;
        int8_t next;
        double value;

        E(const uint32_t hash_code, const int8_t next, const double& value)
           : hash_code(hash_code), next(next), value(value) {}
    };

    inline static const std::array<int8_t, 100> buckets = {
        84, 0, 0, 0, 90, 0, 0, 0, 96, 0, 
        0, 0, 77, 0, 0, 0, 83, 0, 0, 0, 
        89, 0, 0, 0, 95, 0, 0, 0, 76, 0, 
        0, 0, 82, 0, 0, 0, 88, 0, 0, 0, 
        94, 0, 0, 0, 100, 0, 0, 0, 81, 0, 
        0, 0, 87, 0, 0, 0, 93, 0, 0, 0, 
        99, 0, 0, 0, 80, 0, 0, 0, 86, 0, 
        0, 0, 92, 0, 0, 0, 98, 0, 0, 0, 
        79, 0, 0, 0, 85, 0, 0, 0, 91, 0, 
        0, 0, 97, 0, 0, 0, 78, 0, 0, 0
     };

    inline static const std::array<E, 100> entries = {
        E(0, -1, 0), E(1072693248, -1, 1), E(1073741824, -1, 2), E(1074266112, -1, 3), E(1074790400, 0, 4), E(1075052544, -1, 5), E(1075314688, -1, 6), E(1075576832, -1, 7), E(1075838976, -1, 8), E(1075970048, 1, 9), 
        E(1076101120, -1, 10), E(1076232192, -1, 11), E(1076363264, -1, 12), E(1076494336, -1, 13), E(1076625408, -1, 14), E(1076756480, -1, 15), E(1076887552, -1, 16), E(1076953088, 6, 17), E(1077018624, 2, 18), E(1077084160, -1, 19), 
        E(1077149696, -1, 20), E(1077215232, 7, 21), E(1077280768, -1, 22), E(1077346304, -1, 23), E(1077411840, -1, 24), E(1077477376, 8, 25), E(1077542912, 3, 26), E(1077608448, 9, 27), E(1077673984, -1, 28), E(1077739520, 10, 29), 
        E(1077805056, -1, 30), E(1077870592, 11, 31), E(1077936128, -1, 32), E(1077968896, 20, 33), E(1078001664, 12, 34), E(1078034432, 21, 35), E(1078067200, 4, 36), E(1078099968, 22, 37), E(1078132736, 13, 38), E(1078165504, 23, 39), 
        E(1078198272, -1, 40), E(1078231040, 24, 41), E(1078263808, 14, 42), E(1078296576, 25, 43), E(1078329344, 5, 44), E(1078362112, 26, 45), E(1078394880, 15, 46), E(1078427648, 27, 47), E(1078460416, -1, 48), E(1078493184, 28, 49), 
        E(1078525952, 16, 50), E(1078558720, 29, 51), E(1078591488, 17, 52), E(1078624256, 30, 53), E(1078657024, 18, 54), E(1078689792, 31, 55), E(1078722560, 19, 56), E(1078755328, 32, 57), E(1078788096, 33, 58), E(1078820864, 34, 59), 
        E(1078853632, 35, 60), E(1078886400, 36, 61), E(1078919168, 37, 62), E(1078951936, 38, 63), E(1078984704, 39, 64), E(1079001088, 52, 65), E(1079017472, 40, 66), E(1079033856, 53, 67), E(1079050240, 41, 68), E(1079066624, 54, 69), 
        E(1079083008, 42, 70), E(1079099392, 55, 71), E(1079115776, 43, 72), E(1079132160, 56, 73), E(1079148544, 44, 74), E(1079164928, 57, 75), E(1079181312, 45, 76), E(1079197696, 58, 77), E(1079214080, 46, 78), E(1079230464, 59, 79), 
        E(1079246848, 47, 80), E(1079263232, 60, 81), E(1079279616, 48, 82), E(1079296000, 61, 83), E(1079312384, 49, 84), E(1079328768, 62, 85), E(1079345152, 50, 86), E(1079361536, 63, 87), E(1079377920, 51, 88), E(1079394304, 64, 89), 
        E(1079410688, 65, 90), E(1079427072, 66, 91), E(1079443456, 67, 92), E(1079459840, 68, 93), E(1079476224, 69, 94), E(1079492608, 70, 95), E(1079508992, 71, 96), E(1079525376, 72, 97), E(1079541760, 73, 98), E(1079558144, 74, 99)
    };

    static uint32_t get_hash(const std::string& str)
    {
        uint32_t hash1 = (5381 << 16) + 5381;
        uint32_t hash2 = (5381 << 16) + 5381;

        const char* ptr = str.data();
        uint32_t length = static_cast<uint32_t>(str.size());

        auto ptr32 = reinterpret_cast<const uint32_t*>(ptr);
        while (length >= 4) {
            hash1 = (hash1 << 5 | hash1 >> (32 - 5)) + hash1 ^ ptr32[0];
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ ptr32[1];
            ptr32 += 2;
            length -= 4;
        }

        auto ptr_char = reinterpret_cast<const char*>(ptr32);
        while (length-- > 0) {
            hash2 = (hash2 << 5 | hash2 >> (32 - 5)) + hash2 ^ *ptr_char++;
        }

        return hash1 + (hash2 * 0x5D588B65);
    }

public:
    static bool contains(const double& value)
    {
        if (const size_t len = value.length(); len < 0 || len > 99)
            return false;

        const uint32_t hash = get_hash(value);
        const uint32_t index = hash % 100;
        int8_t i = static_cast<int8_t>(buckets[index] - 1);

        while (i >= 0)
        {
            const E& entry = entries[i];

            if (entry.hash_code == hash && value == entry.value)
                return true;

            i = entry.next;
        }

        return false;
    }

    static constexpr int item_count = 100;
    static constexpr int8_t min_value = 0;
    static constexpr int8_t max_value = 99;
};