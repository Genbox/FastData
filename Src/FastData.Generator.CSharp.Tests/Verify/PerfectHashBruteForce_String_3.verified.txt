// <auto-generated />
// Structure: PerfectHashBruteForce
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;


internal static class MyData 
{
    private static readonly E[] _entries = {
        new E("item3", 94714119u), new E("item2", 1729332148u), new E("item1", 2649680336u)
    };

    
    public static bool Contains(string value)
    {
        if (value.Length != 5u)
            return false;

        uint hash = Murmur_32(Hash(value) ^ 13);
        uint index = unchecked((uint)(((((6148914691236517206ul * hash) >> 32) + 1) * 3) >> 32));
        ref E entry = ref _entries[index];

        return hash == entry.HashCode && StringComparer.Ordinal.Equals(value, entry.Value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(string value)
    {
        uint hash1 = (5381 << 16) + 5381;
        uint hash2 = (5381 << 16) + 5381;
        int length = value.Length;
        ref char ptr = ref MemoryMarshal.GetReference(value.AsSpan());
        ref uint ptr32 = ref Unsafe.As<char, uint>(ref ptr);

        while (length >= 4)
        {
            hash1 = (((hash1 << 5) | (hash1 >> (32 - 5))) + hash1) ^ ptr32;
            hash2 = (((hash2 << 5) | (hash2 >> (32 - 5))) + hash2) ^ Unsafe.Add(ref ptr32, 1);

            ptr32 = ref Unsafe.Add(ref ptr32, 2);
            length -= 4;
        }

        ref char ptrChar = ref Unsafe.As<uint, char>(ref ptr32);
        while (length-- > 0)
        {
            hash2 = (((hash2 << 5) | (hash2 >> (32 - 5))) + hash2) ^ ptrChar;
            ptrChar = ref Unsafe.Add(ref ptrChar, 1);
        }

        return hash1 + (hash2 * 1566083941);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static uint Murmur_32(uint h)
    {
        unchecked
        {
            h ^= h >> 16;
            h *= 0x85EBCA6BU;
            h ^= h >> 13;
            h *= 0xC2B2AE35U;
            h ^= h >> 16;
            return h;
        }
    }

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal E(string value, uint hashCode)
        {
            Value = value;
            HashCode = hashCode;
        }

        internal string Value;
        internal uint HashCode;
    }

    public const int ItemCount = 3;
    public const int MinLength = 5;
    public const int MaxLength = 5;
}