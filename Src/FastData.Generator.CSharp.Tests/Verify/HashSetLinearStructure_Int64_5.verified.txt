// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSet (HashSetLinear)
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashSetLinearStructure_Int64_5
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(1, 1), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(2, 2), new B(0, 0), new B(3, 3), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(4, 4), new B(0, 0), new B(0, 0), new B(0, 0)
    };

    private static readonly long[] _items = new long[] {
        0l, 1l, 9223372036854775806l, long.MinValue, -5l
    };

    private static readonly ulong[] _hashCodes = {
        0, 1, 9223372036854775806, 9223372036854775808, 18446744073709551611
    };

    
    public static bool Contains(long value)
    {
        if (value < long.MinValue || value > 9223372036854775806l)
            return false;

        ulong hash = Hash(value);
        ref B b = ref _buckets[(uint)(hash % 17)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value == _items[index])
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(long value)
    {
        return (ulong)value;
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct B
    {
        internal readonly byte StartIndex;
        internal readonly byte EndIndex;

        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }
    }

    public const uint ItemCount = 5;
    public const long MinValue = long.MinValue;
    public const long MaxValue = 9223372036854775806l;
}