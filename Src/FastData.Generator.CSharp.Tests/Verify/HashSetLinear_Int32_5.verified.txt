// <auto-generated />
// Structure: HashSetLinear
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;


internal static class MyData 
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(1, 1), new B(0, 0), new B(0, 0), new B(0, 0), new B(2, 2), new B(3, 3), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(4, 4), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0)
    };

    private static readonly int[] _items = new int[] {
        0, 1, 2147483647, -2147483648, -1
    };

    private static readonly uint[] _hashCodes = {
        0, 1, 2147483647, 2147483648, 4294967295
    };

    
    public static bool Contains(int value)
    {
        if (value < -2147483648 || value > 2147483647)
            return false;

        uint hash = Hash(value);
        ref B b = ref _buckets[unchecked((uint)(((((802032351030850071ul * hash) >> 32) + 1) * 23) >> 32))];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(int value)
    {
        return unchecked((uint)(value));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct B
    {
        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal byte StartIndex;
        internal byte EndIndex;
    }

    public const int ItemCount = 5;
    public const int MinValue = -2147483648;
    public const int MaxValue = 2147483647;
}