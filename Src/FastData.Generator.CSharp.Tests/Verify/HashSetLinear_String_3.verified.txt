// <auto-generated />
// Structure: HashSetLinear
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;


internal static class MyData 
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(0, 0), new B(0, 0), new B(1, 1), new B(0, 0), new B(0, 0), new B(2, 2)
    };

    private static readonly string[] _items = new string[] {
        "item2", "item1", "item3"
    };

    private static readonly uint[] _hashCodes = {
        2391420970, 3957504911, 825337029
    };

    
    public static bool Contains(string value)
    {
        if (value.Length != 5u)
            return false;

        uint hash = Hash(value);
        ref B b = ref _buckets[unchecked((uint)(((((2635249153387078803ul * hash) >> 32) + 1) * 7) >> 32))];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && StringComparer.Ordinal.Equals(value, _items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static uint Hash(string value)
    {
         uint hash1 = 352654597;
         uint hash2 = 352654597;

         ref char ptr = ref MemoryMarshal.GetReference(value.AsSpan());
         int len = value.Length;

         while (len-- > 0)
         {
             hash2 = (((hash2 << 5) | (hash2 >> 27)) + hash2) ^ ptr;
             ptr = ref Unsafe.Add(ref ptr, 1);
         }

         return hash1 + (hash2 * 1566083941);
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct B
    {
        internal readonly byte StartIndex;
        internal readonly byte EndIndex;

        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }
    }

    public const int ItemCount = 3;
    public const int MinLength = 5;
    public const int MaxLength = 5;
}