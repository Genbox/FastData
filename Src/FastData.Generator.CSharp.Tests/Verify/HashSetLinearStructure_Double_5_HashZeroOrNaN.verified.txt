// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSet (HashSetLinear)
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashSetLinearStructure_Double_5_HashZeroOrNaN
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(1, 1), new B(0, 0), new B(2, 2), new B(0, 0), new B(3, 3), new B(4, 4), 
        new B(0, 0)
    };

    private static readonly double[] _items = new double[] {
        1.0, 2.0, 3.0, 4.0, 5.0
    };

    private static readonly ulong[] _hashCodes = {
        4607182418800017408, 4611686018427387904, 4613937818241073152, 4616189618054758400, 4617315517961601024
    };

    
    public static bool Contains(double value)
    {
        if (value < 1.0 || value > 5.0)
            return false;

        ulong hash = Hash(value);
        ref B b = ref _buckets[(uint)(hash % 11)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value == _items[index])
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(double value)
    {
        return Unsafe.ReadUnaligned<ulong>(ref Unsafe.As<double, byte>(ref value));
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct B
    {
        internal readonly byte StartIndex;
        internal readonly byte EndIndex;

        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }
    }

    public const uint ItemCount = 5;
    public const double MinValue = 1.0;
    public const double MaxValue = 5.0;
}