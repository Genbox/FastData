// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSet (HashSetLinear)
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashSetLinearStructure_UInt16_4
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(1, 1), new B(2, 2), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(3, 3), new B(0, 0), 
        new B(0, 0)
    };

    private static readonly ushort[] _items = new ushort[] {
        ushort.MinValue, 1, 2, ushort.MaxValue
    };

    private static readonly ulong[] _hashCodes = {
        0, 1, 2, 65535
    };

    
    public static bool Contains(ushort value)
    {
        if (value < ushort.MinValue || value > ushort.MaxValue)
            return false;

        ulong hash = Hash(value);
        ref B b = ref _buckets[(uint)(hash % 11)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value == _items[index])
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(ushort value)
    {
        return (ulong)value;
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct B
    {
        internal readonly byte StartIndex;
        internal readonly byte EndIndex;

        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }
    }

    public const uint ItemCount = 4;
    public const ushort MinValue = ushort.MinValue;
    public const ushort MaxValue = ushort.MaxValue;
}