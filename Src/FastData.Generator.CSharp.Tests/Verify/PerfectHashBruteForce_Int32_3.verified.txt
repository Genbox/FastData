// <auto-generated />
// Structure: PerfectHashBruteForce
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;


internal static class MyData 
{
    private static readonly E[] _entries = {
        new E(3, 0u), new E(2, 1u), new E(1, 2u)
    };

    
    public static bool Contains(int value)
    {
        if (value < 1 || value > 3)
            return false;

        uint hash = Hash(value, 3);
        uint index = unchecked((uint)(((((6148914691236517206ul * hash) >> 32) + 1) * 3) >> 32));
        ref E entry = ref _entries[index];

        return hash == entry.HashCode && value.Equals(entry.Value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(int value, uint seed)
    {
        return unchecked((uint)(value^ seed));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal E(int value, uint hashCode)
        {
            Value = value;
            HashCode = hashCode;
        }

        internal int Value;
        internal uint HashCode;
    }

    public const int ItemCount = 3;
    public const int MinValue = 1;
    public const int MaxValue = 3;
}