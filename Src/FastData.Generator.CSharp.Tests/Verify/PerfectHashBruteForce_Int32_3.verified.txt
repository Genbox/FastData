// <auto-generated />
// Structure: PerfectHashBruteForce
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;


internal static class MyData 
{
    private static readonly E[] _entries = {
        new E(3, 3262916883u), new E(1, 2476801540u), new E(2, 1228498187u)
    };

    
    public static bool Contains(int value)
    {
        if (value < 1 || value > 3)
            return false;

        uint hash = Murmur_32(Hash(value) ^ 10);
        uint index = unchecked((uint)(((((6148914691236517206ul * hash) >> 32) + 1) * 3) >> 32));
        ref E entry = ref _entries[index];

        return hash == entry.HashCode && value.Equals(entry.Value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(int value)
    {
        return unchecked((uint)(value));
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static uint Murmur_32(uint h)
    {
        unchecked
        {
            h ^= h >> 16;
            h *= 0x85EBCA6BU;
            h ^= h >> 13;
            h *= 0xC2B2AE35U;
            h ^= h >> 16;
            return h;
        }
    }

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal E(int value, uint hashCode)
        {
            Value = value;
            HashCode = hashCode;
        }

        internal int Value;
        internal uint HashCode;
    }

    public const int ItemCount = 3;
    public const int MinValue = 1;
    public const int MaxValue = 3;
}