// <auto-generated />
// Structure: HashSetLinear
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;


internal static class MyData 
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(1, 1), new B(0, 0), new B(2, 2), new B(0, 0), new B(0, 0), new B(3, 3), new B(0, 0), new B(4, 4), new B(0, 0), 
        new B(0, 0)
    };

    private static readonly sbyte[] _items = new sbyte[] {
        0, 1, -1, 127, -128
    };

    private static readonly uint[] _hashCodes = {
        0, 1, 4294967295, 127, 4294967168
    };

    
    public static bool Contains(sbyte value)
    {
        if (value < -128 || value > 127)
            return false;

        uint hash = Hash(value);
        ref B b = ref _buckets[unchecked((uint)(((((1676976733973595602ul * hash) >> 32) + 1) * 11) >> 32))];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(sbyte value)
    {
        return unchecked((uint)(value));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct B
    {
        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal byte StartIndex;
        internal byte EndIndex;
    }

    public const int ItemCount = 5;
    public const sbyte MinValue = -128;
    public const sbyte MaxValue = 127;
}