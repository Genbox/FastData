// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: BinarySearch
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class BinarySearchStructure_Single_100
{
    private static readonly float[] _entries = new float[] {
        0f, 1f, 2f, 3f, 4f, 5f, 6f, 7f, 8f, 9f, 
        10f, 11f, 12f, 13f, 14f, 15f, 16f, 17f, 18f, 19f, 
        20f, 21f, 22f, 23f, 24f, 25f, 26f, 27f, 28f, 29f, 
        30f, 31f, 32f, 33f, 34f, 35f, 36f, 37f, 38f, 39f, 
        40f, 41f, 42f, 43f, 44f, 45f, 46f, 47f, 48f, 49f, 
        50f, 51f, 52f, 53f, 54f, 55f, 56f, 57f, 58f, 59f, 
        60f, 61f, 62f, 63f, 64f, 65f, 66f, 67f, 68f, 69f, 
        70f, 71f, 72f, 73f, 74f, 75f, 76f, 77f, 78f, 79f, 
        80f, 81f, 82f, 83f, 84f, 85f, 86f, 87f, 88f, 89f, 
        90f, 91f, 92f, 93f, 94f, 95f, 96f, 97f, 98f, 99f
    };

    
    public static bool Contains(float value)
    {
        if (value < 0f || value > 99f)
            return false;

        int lo = 0;
        int hi = 99;
        while (lo <= hi)
        {
            int i = lo + ((hi - lo) >> 1);
            int order = _entries[i].CompareTo(value);

            if (order == 0)
                return true;
            if (order < 0)
                lo = i + 1;
            else
                hi = i - 1;
        }

        return ~lo >= 0;
    }

    public const uint ItemCount = 100;
    public const float MinValue = 0f;
    public const float MaxValue = 99f;
}