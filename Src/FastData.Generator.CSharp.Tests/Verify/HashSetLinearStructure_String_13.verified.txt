// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSet (HashSetLinear)
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashSetLinearStructure_String_13
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(1, 1), new B(2, 2), new B(3, 3), new B(0, 0), new B(0, 0), new B(4, 4), new B(5, 5), 
        new B(0, 0), new B(0, 0), new B(6, 6), new B(7, 7), new B(0, 0), new B(0, 0), new B(0, 0), new B(8, 8), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(9, 9), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(10, 10), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(11, 11), new B(0, 0), new B(12, 12)
    };

    private static readonly string[] _items = new string[] {
        "ö", "ü", "è", "ä", "é", "å", "ê", "æ", "ç", "ñ", 
        "ß", "ø", "à"
    };

    private static readonly ulong[] _hashCodes = {
        18225461004491987194, 18225461020152826604, 18225461001359819312, 18225460982566812020, 18225460999793735371, 18225460981000728079, 18225460998227651430, 18225460979434644138, 18225460977868560197, 18225461012322406899, 
        18225461065569260893, 18225461026417162368, 18225460988831147784
    };

    
    public static bool Contains(string value)
    {
        if (value.Length != 1u)
            return false;

        ulong hash = Hash(value);
        ref B b = ref _buckets[(uint)(hash % 47)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (StringComparer.Ordinal.Equals(_hashCodes[index], hash) && StringComparer.Ordinal.Equals(value, _items[index]))
                return true;

            index++;
        }

        return false;
    }


    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(string value)
    {
        ulong hash = 352654597;

        ref char ptr = ref MemoryMarshal.GetReference(value.AsSpan());
        int len = value.Length;

        while (len-- > 0)
        {
            hash = (((hash << 5) | (hash >> 27)) + hash) ^ ptr;
            ptr = ref Unsafe.Add(ref ptr, 1);
        }

        return 352654597 + (hash * 1566083941);
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct B
    {
        internal readonly byte StartIndex;
        internal readonly byte EndIndex;

        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }
    }

    public const uint ItemCount = 13;
    public const uint MinLength = 1;
    public const uint MaxLength = 1;
}