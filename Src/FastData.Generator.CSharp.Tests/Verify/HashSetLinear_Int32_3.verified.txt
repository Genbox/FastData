// <auto-generated />
// Structure: HashSetLinear
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;


internal static class MyData 
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(0, 0), new B(1, 1), new B(2, 2), new B(0, 0), new B(0, 0), new B(0, 0)
    };

    private static readonly int[] _items = new int[] {
        1, 2, 3
    };

    private static readonly uint[] _hashCodes = {
        1, 2, 3
    };

    
    public static bool Contains(int value)
    {
        if (value < 1 || value > 3)
            return false;

        uint hash = Hash(value);
        ref B b = ref _buckets[unchecked((uint)(((((2635249153387078803ul * hash) >> 32) + 1) * 7) >> 32))];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(int value)
    {
        return unchecked((uint)(value));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct B
    {
        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal byte StartIndex;
        internal byte EndIndex;
    }

    public const int ItemCount = 3;
    public const int MinValue = 1;
    public const int MaxValue = 3;
}