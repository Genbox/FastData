// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSet (HashSetLinear)
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashSetLinearStructure_Int16_5
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(1, 1), new B(0, 0), new B(0, 0), new B(2, 2), new B(0, 0), new B(3, 3), new B(0, 0), new B(0, 0), new B(4, 4), 
        new B(0, 0)
    };

    private static readonly short[] _items = new short[] {
        0, 1, -1, short.MinValue, short.MaxValue
    };

    private static readonly ulong[] _hashCodes = {
        0, 1, 18446744073709551615, 18446744073709518848, 32767
    };

    
    public static bool Contains(short value)
    {
        if (value < short.MinValue || value > short.MaxValue)
            return false;

        ulong hash = Hash(value);
        ref B b = ref _buckets[(uint)(hash % 11)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value == _items[index])
                return true;

            index++;
        }

        return false;
    }


    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(short value)
    {
        return (ulong)value;
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct B
    {
        internal readonly byte StartIndex;
        internal readonly byte EndIndex;

        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }
    }

    public const uint ItemCount = 5;
    public const short MinValue = short.MinValue;
    public const short MaxValue = short.MaxValue;
}