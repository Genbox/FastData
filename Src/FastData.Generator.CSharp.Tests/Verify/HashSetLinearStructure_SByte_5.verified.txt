// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSet (HashSetLinear)
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashSetLinearStructure_SByte_5
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(1, 1), new B(0, 0), new B(0, 0), new B(2, 2), new B(0, 0), new B(3, 3), new B(0, 0), new B(0, 0), new B(4, 4), 
        new B(0, 0)
    };

    private static readonly sbyte[] _items = new sbyte[] {
        0, 1, -1, sbyte.MaxValue, sbyte.MinValue
    };

    private static readonly ulong[] _hashCodes = {
        0, 1, 18446744073709551615, 127, 18446744073709551488
    };

    
    public static bool Contains(sbyte value)
    {
        if (value < sbyte.MinValue || value > sbyte.MaxValue)
            return false;

        ulong hash = Hash(value);
        ref B b = ref _buckets[(uint)(hash % 11)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value == _items[index])
                return true;

            index++;
        }

        return false;
    }


    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(sbyte value)
    {
        return (ulong)value;
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct B
    {
        internal readonly byte StartIndex;
        internal readonly byte EndIndex;

        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }
    }

    public const uint ItemCount = 5;
    public const sbyte MinValue = sbyte.MinValue;
    public const sbyte MaxValue = sbyte.MaxValue;
}