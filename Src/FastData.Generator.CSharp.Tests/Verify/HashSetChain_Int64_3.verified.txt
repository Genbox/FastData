// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSetChain
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;


internal static class MyData
{
    private static readonly sbyte[] _buckets = new sbyte[] {
        2, 0, 3
     };

    private static readonly E[] _entries = {
        new E(2147483648, -1, long.MinValue), new E(0, -1, 0l), new E(2147483648, 0, long.MaxValue)
    };

    
    public static bool Contains(long value)
    {
        if (value < long.MinValue || value > long.MaxValue)
            return false;

        uint hash = Hash(value);
        uint index = unchecked((uint)(((((6148914691236517206ul * hash) >> 32) + 1) * 3) >> 32));
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.HashCode == hash && value.Equals(entry.Value))
                return true;

            i = entry.Next;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static uint Hash(long value)
    {
        return unchecked((uint)(value.GetHashCode()));
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct E
    {
        internal readonly uint HashCode;
        internal readonly sbyte Next;
        internal readonly long Value;

        internal E(uint hashCode, sbyte next, long value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const uint ItemCount = 3;
    public const long MinValue = long.MinValue;
    public const long MaxValue = long.MaxValue;
}