// <auto-generated />
// Structure: PerfectHashBruteForce
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;


internal static class MyData 
{
    private static readonly E[] _entries = {
        new E(1.7976931348623157E+308, 2066174499u), new E(0, 1364076727u), new E(-1.7976931348623157E+308, 2886815657u)
    };

    
    public static bool Contains(double value)
    {
        if (value < -1.7976931348623157E+308 || value > 1.7976931348623157E+308)
            return false;

        uint hash = Murmur_32(Hash(value) ^ 1);
        uint index = unchecked((uint)(((((6148914691236517206ul * hash) >> 32) + 1) * 3) >> 32));
        ref E entry = ref _entries[index];

        return hash == entry.HashCode && value.Equals(entry.Value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static uint Hash(double value)
    {
        return unchecked((uint)(value.GetHashCode()));
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static uint Murmur_32(uint h)
    {
        unchecked
        {
            h ^= h >> 16;
            h *= 0x85EBCA6BU;
            h ^= h >> 13;
            h *= 0xC2B2AE35U;
            h ^= h >> 16;
            return h;
        }
    }

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal E(double value, uint hashCode)
        {
            Value = value;
            HashCode = hashCode;
        }

        internal double Value;
        internal uint HashCode;
    }

    public const int ItemCount = 3;
    public const double MinValue = -1.7976931348623157E+308;
    public const double MaxValue = 1.7976931348623157E+308;
}