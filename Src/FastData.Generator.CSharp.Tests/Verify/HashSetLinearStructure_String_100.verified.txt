// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSet
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashSetLinearStructure_String_100
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(0, 0), new B(1, 1), new B(0, 0), new B(0, 0), new B(0, 0), new B(2, 2), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(3, 4), new B(0, 0), new B(0, 0), new B(0, 0), new B(5, 6), new B(0, 0), new B(7, 7), new B(8, 8), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(9, 9), new B(0, 0), new B(10, 10), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(11, 12), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(13, 13), new B(14, 14), new B(15, 15), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(16, 16), new B(17, 17), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(18, 18), new B(0, 0), new B(0, 0), new B(0, 0), new B(19, 19), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(20, 20), new B(21, 21), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(22, 22), new B(23, 23), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(24, 25), new B(0, 0), new B(26, 27), new B(0, 0), new B(0, 0), new B(0, 0), new B(28, 29), new B(30, 30), new B(0, 0), 
        new B(31, 32), new B(0, 0), new B(0, 0), new B(0, 0), new B(33, 34), new B(0, 0), new B(0, 0), new B(0, 0), new B(35, 35), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(36, 37), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(38, 38), new B(39, 39), new B(40, 40), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(41, 41), new B(42, 42), new B(0, 0), new B(0, 0), new B(0, 0), new B(43, 43), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(44, 45), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(46, 46), 
        new B(47, 47), new B(0, 0), new B(48, 48), new B(0, 0), new B(0, 0), new B(0, 0), new B(49, 49), new B(0, 0), new B(0, 0), new B(50, 50), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(51, 52), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(53, 53), new B(54, 54), new B(55, 55), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(56, 56), new B(57, 57), new B(0, 0), new B(0, 0), new B(0, 0), new B(58, 58), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(59, 59), new B(60, 60), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(61, 61), new B(62, 62), new B(0, 0), new B(0, 0), new B(0, 0), new B(63, 63), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(64, 65), new B(0, 0), new B(66, 66), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(67, 68), new B(69, 69), new B(0, 0), new B(70, 70), new B(0, 0), new B(0, 0), new B(0, 0), new B(71, 72), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(73, 74), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(75, 75), new B(76, 76), new B(77, 77), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(78, 78), new B(79, 79), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(80, 80), new B(0, 0), new B(0, 0), new B(0, 0), new B(81, 81), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(82, 82), new B(83, 83), new B(0, 0), new B(0, 0), new B(84, 84), new B(0, 0), new B(0, 0), new B(85, 85), new B(86, 86), 
        new B(0, 0), new B(0, 0), new B(87, 87), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(88, 89), new B(0, 0), new B(90, 91), new B(0, 0), new B(0, 0), new B(0, 0), new B(92, 92), new B(93, 93), new B(0, 0), 
        new B(94, 95), new B(0, 0), new B(0, 0), new B(0, 0), new B(96, 96), new B(0, 0), new B(0, 0), new B(0, 0), new B(97, 97), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(98, 98), new B(99, 99), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0)
    };

    private static readonly string[] _items = new string[] {
        "86", "41", "6", "38", "9", "35", "13", "75", "29", "24", 
        "64", "30", "16", "92", "53", "21", "83", "42", "3", "19", 
        "95", "70", "84", "61", "37", "11", "77", "59", "78", "56", 
        "26", "66", "48", "69", "47", "0", "32", "14", "90", "51", 
        "23", "81", "40", "5", "39", "8", "72", "28", "98", "63", 
        "89", "31", "17", "93", "54", "20", "82", "45", "2", "96", 
        "71", "87", "60", "7", "34", "12", "74", "79", "57", "25", 
        "65", "68", "46", "33", "15", "91", "52", "22", "80", "43", 
        "4", "18", "94", "73", "99", "85", "62", "88", "36", "10", 
        "76", "58", "55", "27", "67", "49", "44", "1", "97", "50"
    };

    private static readonly ulong[] _hashCodes = {
        11144406865724064596, 11144406297235594013, 18225461104721359418, 11144406337953776479, 18225461125080450651, 11144406358312867712, 11144406358312867712, 11144406139061115972, 11144406488297834815, 11144406508656926048, 
        11144406289405174308, 11144406350482448007, 11144406350482448007, 11144406720078258083, 11144406151589787500, 11144406500826506343, 11144406870422316419, 11144406301933845836, 18225461109419611241, 11144406342652028302, 
        11144406712247838378, 11144406143759367795, 11144406862591896714, 11144406294103426131, 11144406355180699830, 11144406355180699830, 11144406135928948090, 11144406135928948090, 11144406156288039323, 11144406156288039323, 
        11144406505524758166, 11144406286273006426, 11144406286273006426, 11144406306632097659, 11144406306632097659, 18225461114117863064, 11144406347350280125, 11144406347350280125, 11144406716946090201, 11144406148457619618, 
        11144406497694338461, 11144406867290148537, 11144406298801677954, 18225461106287443359, 11144406339519860420, 18225461126646534592, 11144406140627199913, 11144406489863918756, 11144406729474761729, 11144406290971258249, 
        11144406879818820065, 11144406352048531948, 11144406352048531948, 11144406721644342024, 11144406153155871441, 11144406502392590284, 11144406871988400360, 11144406303499929777, 18225461110985695182, 11144406713813922319, 
        11144406145325451736, 11144406864157980655, 11144406295669510072, 18225461103155275477, 11144406356746783771, 11144406356746783771, 11144406137495032031, 11144406157854123264, 11144406157854123264, 11144406507090842107, 
        11144406287839090367, 11144406308198181600, 11144406308198181600, 11144406348916364066, 11144406348916364066, 11144406718512174142, 11144406150023703559, 11144406499260422402, 11144406868856232478, 11144406300367761895, 
        18225461107853527300, 11144406341085944361, 11144406710681754437, 11144406142193283854, 11144406731040845670, 11144406861025812773, 11144406292537342190, 11144406881384904006, 11144406353614615889, 11144406353614615889, 
        11144406134362864149, 11144406134362864149, 11144406154721955382, 11144406503958674225, 11144406284706922485, 11144406284706922485, 11144406305066013718, 18225461112551779123, 11144406715380006260, 11144406146891535677
    };

    
    public static bool Contains(string value)
    {
        if (value.Length < 1u || value.Length > 2u)
            return false;

        ulong hash = Hash(value);
        ref B b = ref _buckets[(uint)(hash % 293)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (StringComparer.Ordinal.Equals(_hashCodes[index], hash) && StringComparer.Ordinal.Equals(value, _items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(string value)
    {
        ulong hash = 352654597;

        ref char ptr = ref MemoryMarshal.GetReference(value.AsSpan());
        int len = value.Length;

        while (len-- > 0)
        {
            hash = (((hash << 5) | (hash >> 27)) + hash) ^ ptr;
            ptr = ref Unsafe.Add(ref ptr, 1);
        }

        return 352654597 + (hash * 1566083941);
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct B
    {
        internal readonly byte StartIndex;
        internal readonly byte EndIndex;

        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }
    }

    public const uint ItemCount = 100;
    public const uint MinLength = 1;
    public const uint MaxLength = 2;
}