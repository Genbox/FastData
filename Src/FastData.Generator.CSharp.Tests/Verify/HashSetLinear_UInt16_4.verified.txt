// <auto-generated />
// Structure: HashSetLinear
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;


internal static class MyData 
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(1, 1), new B(2, 2), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(3, 3), new B(0, 0), 
        new B(0, 0)
    };

    private static readonly ushort[] _items = new ushort[] {
        0, 1, 2, 65535
    };

    private static readonly uint[] _hashCodes = {
        0, 1, 2, 65535
    };

    
    public static bool Contains(ushort value)
    {
        if (value < 0 || value > 65535)
            return false;

        uint hash = Hash(value);
        ref B b = ref _buckets[unchecked((uint)(((((1676976733973595602ul * hash) >> 32) + 1) * 11) >> 32))];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(ushort value)
    {
        return unchecked((uint)(value));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct B
    {
        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal byte StartIndex;
        internal byte EndIndex;
    }

    public const int ItemCount = 4;
    public const ushort MinValue = 0;
    public const ushort MaxValue = 65535;
}