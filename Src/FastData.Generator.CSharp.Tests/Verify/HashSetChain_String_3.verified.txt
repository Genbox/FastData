// <auto-generated />
// Structure: HashSetChain
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;


internal static class MyData 
{
    private static readonly sbyte[] _buckets = new sbyte[] {
        3, 0, 1
     };

    private static readonly E[] _entries = {
        new E(2011983611, -1, "item1"), new E(3578067552, -1, "item2"), new E(849184197, 1, "item3")
    };

    
    public static bool Contains(string value)
    {
        if (value.Length != 5u)
            return false;

        uint hash = Hash(value);
        uint index = unchecked((uint)(((((6148914691236517206ul * hash) >> 32) + 1) * 3) >> 32));
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.HashCode == hash && StringComparer.Ordinal.Equals(value, entry.Value))
                return true;

            i = entry.Next;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(string value)
    {
        uint hash1 = (5381 << 16) + 5381;
        uint hash2 = (5381 << 16) + 5381;
        int length = value.Length;
        ref char ptr = ref MemoryMarshal.GetReference(value.AsSpan());
        ref uint ptr32 = ref Unsafe.As<char, uint>(ref ptr);

        while (length >= 4)
        {
            hash1 = (((hash1 << 5) | (hash1 >> (32 - 5))) + hash1) ^ ptr32;
            hash2 = (((hash2 << 5) | (hash2 >> (32 - 5))) + hash2) ^ Unsafe.Add(ref ptr32, 1);

            ptr32 = ref Unsafe.Add(ref ptr32, 2);
            length -= 4;
        }

        ref char ptrChar = ref Unsafe.As<uint, char>(ref ptr32);
        while (length-- > 0)
        {
            hash2 = (((hash2 << 5) | (hash2 >> (32 - 5))) + hash2) ^ ptrChar;
            ptrChar = ref Unsafe.Add(ref ptrChar, 1);
        }

        return hash1 + (hash2 * 1566083941);
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct E
    {
        internal readonly uint HashCode;
        internal readonly sbyte Next;
        internal readonly string Value;

        internal E(uint hashCode, sbyte next, string value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const int ItemCount = 3;
    public const int MinLength = 5;
    public const int MaxLength = 5;
}