// <auto-generated />
// Structure: HashSetLinear
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;


internal static class MyData 
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(1, 1), new B(0, 0), new B(2, 2)
    };

    private static readonly double[] _items = new double[] {
        0, -1.7976931348623157E+308, 1.7976931348623157E+308
    };

    private static readonly uint[] _hashCodes = {
        0, 1048576, 2148532224
    };

    
    public static bool Contains(double value)
    {
        if (value < -1.7976931348623157E+308 || value > 1.7976931348623157E+308)
            return false;

        uint hash = Hash(value);
        ref B b = ref _buckets[unchecked((uint)(((((2635249153387078803ul * hash) >> 32) + 1) * 7) >> 32))];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static uint Hash(double value)
    {
        return unchecked((uint)(value.GetHashCode()));
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct B
    {
        internal readonly byte StartIndex;
        internal readonly byte EndIndex;

        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }
    }

    public const int ItemCount = 3;
    public const double MinValue = -1.7976931348623157E+308;
    public const double MaxValue = 1.7976931348623157E+308;
}