// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSet (HashSetChain)
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashSetChainStructure_Single_100
{
    private static readonly sbyte[] _buckets = new sbyte[] {
        78, 0, 0, 0, 85, 0, 0, 0, 92, 0, 
        0, 0, 99, 0, 0, 0, 81, 0, 0, 0, 
        88, 0, 0, 0, 95, 0, 0, 0, 77, 0, 
        0, 0, 84, 0, 0, 0, 91, 0, 0, 0, 
        98, 0, 0, 0, 80, 0, 0, 0, 87, 0, 
        0, 0, 94, 0, 0, 0, 76, 0, 0, 0, 
        83, 0, 0, 0, 90, 0, 0, 0, 97, 0, 
        0, 0, 79, 0, 0, 0, 86, 0, 0, 0, 
        93, 0, 0, 0, 100, 0, 0, 0, 82, 0, 
        0, 0, 89, 0, 0, 0, 96, 0, 0, 0
     };

    private static readonly E[] _entries = {
        new E(0, -1, 0f), new E(1065353216, -1, 1f), new E(1073741824, -1, 2f), new E(1077936128, -1, 3f), new E(1082130432, -1, 4f), new E(1084227584, -1, 5f), new E(1086324736, -1, 6f), new E(1088421888, -1, 7f), new E(1090519040, -1, 8f), new E(1091567616, 1, 9f), 
        new E(1092616192, -1, 10f), new E(1093664768, -1, 11f), new E(1094713344, -1, 12f), new E(1095761920, -1, 13f), new E(1096810496, -1, 14f), new E(1097859072, -1, 15f), new E(1098907648, -1, 16f), new E(1099431936, 6, 17f), new E(1099956224, 2, 18f), new E(1100480512, -1, 19f), 
        new E(1101004800, 0, 20f), new E(1101529088, 7, 21f), new E(1102053376, -1, 22f), new E(1102577664, -1, 23f), new E(1103101952, -1, 24f), new E(1103626240, 8, 25f), new E(1104150528, 3, 26f), new E(1104674816, 9, 27f), new E(1105199104, -1, 28f), new E(1105723392, 10, 29f), 
        new E(1106247680, -1, 30f), new E(1106771968, 11, 31f), new E(1107296256, -1, 32f), new E(1107558400, 20, 33f), new E(1107820544, 12, 34f), new E(1108082688, 21, 35f), new E(1108344832, 4, 36f), new E(1108606976, 22, 37f), new E(1108869120, 13, 38f), new E(1109131264, 23, 39f), 
        new E(1109393408, -1, 40f), new E(1109655552, 24, 41f), new E(1109917696, 14, 42f), new E(1110179840, 25, 43f), new E(1110441984, 5, 44f), new E(1110704128, 26, 45f), new E(1110966272, 15, 46f), new E(1111228416, 27, 47f), new E(1111490560, -1, 48f), new E(1111752704, 28, 49f), 
        new E(1112014848, 16, 50f), new E(1112276992, 29, 51f), new E(1112539136, 17, 52f), new E(1112801280, 30, 53f), new E(1113063424, 18, 54f), new E(1113325568, 31, 55f), new E(1113587712, 19, 56f), new E(1113849856, 32, 57f), new E(1114112000, 33, 58f), new E(1114374144, 34, 59f), 
        new E(1114636288, 35, 60f), new E(1114898432, 36, 61f), new E(1115160576, 37, 62f), new E(1115422720, 38, 63f), new E(1115684864, 39, 64f), new E(1115815936, 52, 65f), new E(1115947008, 40, 66f), new E(1116078080, 53, 67f), new E(1116209152, 41, 68f), new E(1116340224, 54, 69f), 
        new E(1116471296, 42, 70f), new E(1116602368, 55, 71f), new E(1116733440, 43, 72f), new E(1116864512, 56, 73f), new E(1116995584, 44, 74f), new E(1117126656, 57, 75f), new E(1117257728, 45, 76f), new E(1117388800, 58, 77f), new E(1117519872, 46, 78f), new E(1117650944, 59, 79f), 
        new E(1117782016, 47, 80f), new E(1117913088, 60, 81f), new E(1118044160, 48, 82f), new E(1118175232, 61, 83f), new E(1118306304, 49, 84f), new E(1118437376, 62, 85f), new E(1118568448, 50, 86f), new E(1118699520, 63, 87f), new E(1118830592, 51, 88f), new E(1118961664, 64, 89f), 
        new E(1119092736, 65, 90f), new E(1119223808, 66, 91f), new E(1119354880, 67, 92f), new E(1119485952, 68, 93f), new E(1119617024, 69, 94f), new E(1119748096, 70, 95f), new E(1119879168, 71, 96f), new E(1120010240, 72, 97f), new E(1120141312, 73, 98f), new E(1120272384, 74, 99f)
    };

    
    public static bool Contains(float value)
    {
        if (value < 0f || value > 99f)
            return false;

        ulong hash = Hash(value);
        uint index = (uint)(hash % 100);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.HashCode == hash && value == entry.Value)
                return true;

            i = entry.Next;
        }

        return false;
    }


    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(float value)
    {
        uint bits = Unsafe.ReadUnaligned<uint>(ref Unsafe.As<float, byte>(ref value));

        if (((bits - 1) & ~(0x8000_0000)) >= 0x7FF0_0000)
            bits &= 0x7FF0_0000;

        return (ulong)bits;
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct E
    {
        internal readonly ulong HashCode;
        internal readonly sbyte Next;
        internal readonly float Value;

        internal E(ulong hashCode, sbyte next, float value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const uint ItemCount = 100;
    public const float MinValue = 0f;
    public const float MaxValue = 99f;
}