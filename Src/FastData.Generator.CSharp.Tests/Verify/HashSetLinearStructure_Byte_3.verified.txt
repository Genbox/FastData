// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSet (HashSetLinear)
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashSetLinearStructure_Byte_3
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(1, 1), new B(0, 0), new B(2, 2), new B(0, 0), new B(0, 0), new B(0, 0)
    };

    private static readonly byte[] _items = new byte[] {
        byte.MinValue, 1, byte.MaxValue
    };

    private static readonly ulong[] _hashCodes = {
        0, 1, 255
    };

    
    public static bool Contains(byte value)
    {
        if (value < byte.MinValue || value > byte.MaxValue)
            return false;

        ulong hash = Hash(value);
        ref B b = ref _buckets[(uint)(hash % 7)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value == _items[index])
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(byte value)
    {
        return (ulong)value;
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct B
    {
        internal readonly byte StartIndex;
        internal readonly byte EndIndex;

        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }
    }

    public const uint ItemCount = 3;
    public const byte MinValue = byte.MinValue;
    public const byte MaxValue = byte.MaxValue;
}