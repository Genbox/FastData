// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: BinarySearch (EytzingerSearch)
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class EytzingerSearchStructure_Single_100
{
    private static readonly float[] _entries = new float[] {
        63f, 31f, 84f, 15f, 47f, 76f, 92f, 7f, 23f, 39f, 
        55f, 71f, 80f, 88f, 96f, 3f, 11f, 19f, 27f, 35f, 
        43f, 51f, 59f, 67f, 74f, 78f, 82f, 86f, 90f, 94f, 
        98f, 1f, 5f, 9f, 13f, 17f, 21f, 25f, 29f, 33f, 
        37f, 41f, 45f, 49f, 53f, 57f, 61f, 65f, 69f, 73f, 
        75f, 77f, 79f, 81f, 83f, 85f, 87f, 89f, 91f, 93f, 
        95f, 97f, 99f, 0f, 2f, 4f, 6f, 8f, 10f, 12f, 
        14f, 16f, 18f, 20f, 22f, 24f, 26f, 28f, 30f, 32f, 
        34f, 36f, 38f, 40f, 42f, 44f, 46f, 48f, 50f, 52f, 
        54f, 56f, 58f, 60f, 62f, 64f, 66f, 68f, 70f, 72f
    };

    
    public static bool Contains(float value)
    {
        if (value < 0f || value > 99f)
            return false;

        int i = 0;
        while (i < _entries.Length)
        {
            int comparison = _entries[i].CompareTo(value);

            if (comparison == 0)
                return true;

            if (comparison < 0)
                i = 2 * i + 2;
            else
                i = 2 * i + 1;
        }

        return false;
    }

    public const uint ItemCount = 100;
    public const float MinValue = 0f;
    public const float MaxValue = 99f;
}