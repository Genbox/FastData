// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSet (HashSetChain)
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashSetChainStructure_Int32_100
{
    private static readonly sbyte[] _buckets = new sbyte[] {
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100
     };

    private static readonly E[] _entries = {
        new E(-1, 0), new E(-1, 1), new E(-1, 2), new E(-1, 3), new E(-1, 4), new E(-1, 5), new E(-1, 6), new E(-1, 7), new E(-1, 8), new E(-1, 9), 
        new E(-1, 10), new E(-1, 11), new E(-1, 12), new E(-1, 13), new E(-1, 14), new E(-1, 15), new E(-1, 16), new E(-1, 17), new E(-1, 18), new E(-1, 19), 
        new E(-1, 20), new E(-1, 21), new E(-1, 22), new E(-1, 23), new E(-1, 24), new E(-1, 25), new E(-1, 26), new E(-1, 27), new E(-1, 28), new E(-1, 29), 
        new E(-1, 30), new E(-1, 31), new E(-1, 32), new E(-1, 33), new E(-1, 34), new E(-1, 35), new E(-1, 36), new E(-1, 37), new E(-1, 38), new E(-1, 39), 
        new E(-1, 40), new E(-1, 41), new E(-1, 42), new E(-1, 43), new E(-1, 44), new E(-1, 45), new E(-1, 46), new E(-1, 47), new E(-1, 48), new E(-1, 49), 
        new E(-1, 50), new E(-1, 51), new E(-1, 52), new E(-1, 53), new E(-1, 54), new E(-1, 55), new E(-1, 56), new E(-1, 57), new E(-1, 58), new E(-1, 59), 
        new E(-1, 60), new E(-1, 61), new E(-1, 62), new E(-1, 63), new E(-1, 64), new E(-1, 65), new E(-1, 66), new E(-1, 67), new E(-1, 68), new E(-1, 69), 
        new E(-1, 70), new E(-1, 71), new E(-1, 72), new E(-1, 73), new E(-1, 74), new E(-1, 75), new E(-1, 76), new E(-1, 77), new E(-1, 78), new E(-1, 79), 
        new E(-1, 80), new E(-1, 81), new E(-1, 82), new E(-1, 83), new E(-1, 84), new E(-1, 85), new E(-1, 86), new E(-1, 87), new E(-1, 88), new E(-1, 89), 
        new E(-1, 90), new E(-1, 91), new E(-1, 92), new E(-1, 93), new E(-1, 94), new E(-1, 95), new E(-1, 96), new E(-1, 97), new E(-1, 98), new E(-1, 99)
    };

    
    public static bool Contains(int value)
    {
        if (value < 0 || value > 99)
            return false;

        ulong hash = Hash(value);
        uint index = (uint)(hash % 100);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (value == entry.Value)
                return true;

            i = entry.Next;
        }

        return false;
    }


    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(int value)
    {
        return (ulong)value;
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct E
    {
        
        internal readonly sbyte Next;
        internal readonly int Value;

        internal E(sbyte next, int value)
        {
            
            Next = next;
            Value = value;
        }
    }

    public const uint ItemCount = 100;
    public const int MinValue = 0;
    public const int MaxValue = 99;
}