// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashTable (HashTableChain)
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashTableChainStructure_String_13
{
    private static readonly sbyte[] _buckets = new sbyte[] {
        6, 13, 10, 0, 11, 2, 12, 3, 7, 0, 
        0, 0, 0
     };

    private static readonly E[] _entries = {
        new E(18225460979434644138, -1, "æ"), new E(18225460988831147784, -1, "à"), new E(18225460982566812020, -1, "ä"), new E(18225461004491987194, -1, "ö"), new E(18225461020152826604, 0, "ü"), new E(18225461065569260893, 3, "ß"), new E(18225460999793735371, 4, "é"), new E(18225461001359819312, -1, "è"), new E(18225460998227651430, -1, "ê"), new E(18225460977868560197, 8, "ç"), 
        new E(18225461012322406899, -1, "ñ"), new E(18225461026417162368, -1, "ø"), new E(18225460981000728079, 7, "å")
    };

    
    public static bool Contains(string value)
    {
        if (value.Length != 1u)
            return false;

        ulong hash = Hash(value);
        uint index = (uint)(hash % 13);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.HashCode == hash && StringComparer.Ordinal.Equals(value, entry.Value))
                return true;

            i = entry.Next;
        }

        return false;
    }


    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(string value)
    {
        ulong hash = 352654597;

        ref char ptr = ref MemoryMarshal.GetReference(value.AsSpan());
        int len = value.Length;

        while (len-- > 0)
        {
            hash = (((hash << 5) | (hash >> 27)) + hash) ^ ptr;
            ptr = ref Unsafe.Add(ref ptr, 1);
        }

        return 352654597 + (hash * 1566083941);
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct E
    {
        internal readonly ulong HashCode;
        internal readonly sbyte Next;
        internal readonly string Value;

        internal E(ulong hashCode, sbyte next, string value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const uint ItemCount = 13;
    public const uint MinLength = 1;
    public const uint MaxLength = 1;
}