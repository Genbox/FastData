// <auto-generated />
// Structure: PerfectHashBruteForce
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;


internal static class MyData 
{
    private static readonly E[] _entries = {
        new E(1, 0u), new E(0, 1u), new E(255, 254u)
    };

    
    public static bool Contains(byte value)
    {
        if (value < 0 || value > 255)
            return false;

        uint hash = Hash(value, 1);
        uint index = unchecked((uint)(((((6148914691236517206ul * hash) >> 32) + 1) * 3) >> 32));
        ref E entry = ref _entries[index];

        return hash == entry.HashCode && value.Equals(entry.Value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(byte value, uint seed)
    {
        return unchecked((uint)(value^ seed));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal E(byte value, uint hashCode)
        {
            Value = value;
            HashCode = hashCode;
        }

        internal byte Value;
        internal uint HashCode;
    }

    public const int ItemCount = 3;
    public const byte MinValue = 0;
    public const byte MaxValue = 255;
}