// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSet (HashSetLinear)
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashSetLinearStructure_Single_5_HashZeroOrNaN
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(1, 1), new B(0, 0), new B(0, 0), new B(2, 2), new B(3, 3), new B(0, 0), new B(0, 0), new B(0, 0), new B(4, 4), 
        new B(0, 0)
    };

    private static readonly float[] _items = new float[] {
        5f, 2f, 1f, 3f, 4f
    };

    private static readonly ulong[] _hashCodes = {
        1084227584, 1073741824, 1065353216, 1077936128, 1082130432
    };

    
    public static bool Contains(float value)
    {
        if (value < 1f || value > 5f)
            return false;

        ulong hash = Hash(value);
        ref B b = ref _buckets[(uint)(hash % 11)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value == _items[index])
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(float value)
    {
        return (ulong)Unsafe.ReadUnaligned<uint>(ref Unsafe.As<float, byte>(ref value));
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct B
    {
        internal readonly byte StartIndex;
        internal readonly byte EndIndex;

        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }
    }

    public const uint ItemCount = 5;
    public const float MinValue = 1f;
    public const float MaxValue = 5f;
}