// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSetPerfect
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;


internal static class MyData
{
    private static readonly E[] _entries = {
        new E(int.MaxValue, 1427853558), new E(0, 1364076727), new E(int.MinValue, 2340387434)
    };

    
    public static bool Contains(int value)
    {
        if (value < int.MinValue || value > int.MaxValue)
            return false;

        ulong hash = Mixer(Hash(value) ^ 1);
        uint index = hash % 3;
        ref E entry = ref _entries[index];

        return hash == entry.HashCode && value.Equals(entry.Value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(int value)
    {
        return (ulong)value;
    }

      [MethodImpl(MethodImplOptions.AggressiveInlining)]
      private static ulong Mixer(ulong h)
      {
          h ^= h >> 33;
          h *= 0xFF51AFD7ED558CCD;
          h ^= h >> 33;
          h *= 0xC4CEB9FE1A85EC53;
          h ^= h >> 33;
          return h;
      }

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal E(int value, ulong hashCode)
        {
            Value = value;
            HashCode = hashCode;
        }

        internal int Value;
        internal ulong HashCode;
    }

    public const uint ItemCount = 3;
    public const int MinValue = int.MinValue;
    public const int MaxValue = int.MaxValue;
}