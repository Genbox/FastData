// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSetLinear
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;


internal static class MyData
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(1, 1), new B(0, 0), new B(2, 2), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0)
    };

    private static readonly int[] _items = new int[] {
        0, int.MaxValue, int.MinValue
    };

    private static readonly ulong[] _hashCodes = {
        0, 2147483647, 18446744071562067968
    };

    
    public static bool Contains(int value)
    {
        if (value < int.MinValue || value > int.MaxValue)
            return false;

        ulong hash = Hash(value);
        ref B b = ref _buckets[hash % 11];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(int value)
    {
        return (ulong)value;
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct B
    {
        internal readonly byte StartIndex;
        internal readonly byte EndIndex;

        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }
    }

    public const uint ItemCount = 3;
    public const int MinValue = int.MinValue;
    public const int MaxValue = int.MaxValue;
}