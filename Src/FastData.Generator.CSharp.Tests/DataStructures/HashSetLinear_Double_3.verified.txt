// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSetLinear
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;


internal static class MyData
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(1, 1), new B(2, 2)
    };

    private static readonly double[] _items = new double[] {
        0.0, double.MaxValue, double.MinValue
    };

    private static readonly ulong[] _hashCodes = {
        0, 9218868437227405311, 18442240474082181119
    };

    
    public static bool Contains(double value)
    {
        if (value < double.MinValue || value > double.MaxValue)
            return false;

        ulong hash = Hash(value);
        ref B b = ref _buckets[hash % 7];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(double value)
    {
        ulong bits = Unsafe.ReadUnaligned<ulong>(ref Unsafe.As<double, byte>(ref value));

        if (((bits - 1) & ~(0x8000_0000_0000_0000)) >= 0x7FF0_0000_0000_0000)
            bits &= 0x7FF0_0000_0000_0000;

        return bits;
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct B
    {
        internal readonly byte StartIndex;
        internal readonly byte EndIndex;

        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }
    }

    public const uint ItemCount = 3;
    public const double MinValue = double.MinValue;
    public const double MaxValue = double.MaxValue;
}