// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashSet
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;


internal static class MyData
{
    private static readonly sbyte[] _buckets = new sbyte[] {
        1, 3, 2
     };

    private static readonly E[] _entries = {
        new E(17825845005562073391, -1, "item1"), new E(17825845003995989450, -1, "item2"), new E(17825845002429905509, -1, "item3")
    };

    
    public static bool Contains(string value)
    {
        if (value.Length != 5u)
            return false;

        ulong hash = Hash(value);
        uint index = (uint)(hash % 3);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.HashCode == hash && StringComparer.Ordinal.Equals(value, entry.Value))
                return true;

            i = entry.Next;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(string value)
    {
        ulong hash = 352654597;

        ref char ptr = ref MemoryMarshal.GetReference(value.AsSpan());
        int len = value.Length;

        while (len-- > 0)
        {
            hash = (((hash << 5) | (hash >> 27)) + hash) ^ ptr;
            ptr = ref Unsafe.Add(ref ptr, 1);
        }

        return 352654597 + (hash * 1566083941);
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct E
    {
        internal readonly ulong HashCode;
        internal readonly sbyte Next;
        internal readonly string Value;

        internal E(ulong hashCode, sbyte next, string value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const uint ItemCount = 3;
    public const uint MinLength = 5;
    public const uint MaxLength = 5;
}