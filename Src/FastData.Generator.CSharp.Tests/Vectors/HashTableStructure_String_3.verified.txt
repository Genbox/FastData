// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashTable
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashTableStructure_String_3
{
    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal string Key;
        internal sbyte Next;
        internal ulong HashCode;
        
        internal E(string key, sbyte next, ulong hashCode )
        {
            Key = key;
            Next = next;
            HashCode = hashCode;
            
        }
    };

    private static readonly sbyte[] _buckets = new sbyte[] {
        3, 2, 0
     };

    private static readonly E[] _entries = {
        new E("a", -1, 18225461187723808291), new E("item", 0, 16750939634977259983), new E("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", -1, 9198652691199425319)
    };


    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(string value)
    {
        ulong hash = 352654597;

        ref char ptr = ref MemoryMarshal.GetReference(value.AsSpan());
        int len = value.Length;

        while (len-- > 0)
        {
            hash = (((hash << 5) | (hash >> 27)) + hash) ^ ptr;
            ptr = ref Unsafe.Add(ref ptr, 1);
        }

        return 352654597 + (hash * 1566083941);
    }

    
    public static bool Contains(string key)
    {
        if (key.Length < 1u || key.Length > 255u)
            return false;

        ulong hash = Hash(key);
        uint index = (uint)(hash % 3);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (StringComparer.Ordinal.Equals(entry.HashCode, hash) && StringComparer.Ordinal.Equals(entry.Key, key))
                return true;

            i = entry.Next;
        }

        return false;
    }

    public const uint ItemCount = 3;
    public const uint MinKeyLength = 1;
    public const uint MaxKeyLength = 255;
}