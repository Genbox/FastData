// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashTable
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashTableStructure_Int32_100
{
    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal int Key;
        internal sbyte Next;
        
        
        internal E(int key, sbyte next )
        {
            Key = key;
            Next = next;
            
            
        }
    };

    private static readonly sbyte[] _buckets = new sbyte[] {
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
        31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
        61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 
        81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 
        91, 92, 93, 94, 95, 96, 97, 98, 99, 100
     };

    private static readonly E[] _entries = {
        new E(0, -1), new E(1, -1), new E(2, -1), new E(3, -1), new E(4, -1), new E(5, -1), new E(6, -1), new E(7, -1), new E(8, -1), new E(9, -1), 
        new E(10, -1), new E(11, -1), new E(12, -1), new E(13, -1), new E(14, -1), new E(15, -1), new E(16, -1), new E(17, -1), new E(18, -1), new E(19, -1), 
        new E(20, -1), new E(21, -1), new E(22, -1), new E(23, -1), new E(24, -1), new E(25, -1), new E(26, -1), new E(27, -1), new E(28, -1), new E(29, -1), 
        new E(30, -1), new E(31, -1), new E(32, -1), new E(33, -1), new E(34, -1), new E(35, -1), new E(36, -1), new E(37, -1), new E(38, -1), new E(39, -1), 
        new E(40, -1), new E(41, -1), new E(42, -1), new E(43, -1), new E(44, -1), new E(45, -1), new E(46, -1), new E(47, -1), new E(48, -1), new E(49, -1), 
        new E(50, -1), new E(51, -1), new E(52, -1), new E(53, -1), new E(54, -1), new E(55, -1), new E(56, -1), new E(57, -1), new E(58, -1), new E(59, -1), 
        new E(60, -1), new E(61, -1), new E(62, -1), new E(63, -1), new E(64, -1), new E(65, -1), new E(66, -1), new E(67, -1), new E(68, -1), new E(69, -1), 
        new E(70, -1), new E(71, -1), new E(72, -1), new E(73, -1), new E(74, -1), new E(75, -1), new E(76, -1), new E(77, -1), new E(78, -1), new E(79, -1), 
        new E(80, -1), new E(81, -1), new E(82, -1), new E(83, -1), new E(84, -1), new E(85, -1), new E(86, -1), new E(87, -1), new E(88, -1), new E(89, -1), 
        new E(90, -1), new E(91, -1), new E(92, -1), new E(93, -1), new E(94, -1), new E(95, -1), new E(96, -1), new E(97, -1), new E(98, -1), new E(99, -1)
    };


    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(int value)
    {
        return (ulong)value;
    }

    
    public static bool Contains(int key)
    {
        if (key < 0 || key > 99)
            return false;

        ulong hash = Hash(key);
        uint index = (uint)(hash % 100);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.Key == key)
                return true;

            i = entry.Next;
        }

        return false;
    }

    public const uint ItemCount = 100;
    public const int MinKey = 0;
    public const int MaxKey = 99;
}