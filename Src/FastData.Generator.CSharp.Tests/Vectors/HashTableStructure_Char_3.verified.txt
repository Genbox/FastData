// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashTable
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashTableStructure_Char_3
{
    private static readonly sbyte[] _buckets = new sbyte[] {
        1, 3, 0
     };

    private static readonly E[] _entries = {
        new E(-1, char.MinValue), new E(-1, 'a'), new E(1, '')
    };

    
    public static bool Contains(char key)
    {
        if (key < char.MinValue || key > '')
            return false;

        ulong hash = Hash(key);
        uint index = (uint)(hash % 3);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (key == entry.Key)
                return true;

            i = entry.Next;
        }

        return false;
    }


    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(char value)
    {
        return (ulong)value;
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct E
    {
        
        internal readonly sbyte Next;
        internal readonly char Key;
        

        internal E(sbyte next, char key)
        {
            
            Next = next;
            Key = key;
            
        }
    }


    public const uint ItemCount = 3;
    public const char MinKey = char.MinValue;
    public const char MaxKey = '';
}