// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashTable
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashTableStructure_UInt16_4
{
    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal ushort Key;
        internal sbyte Next;
        
        
        internal E(ushort key, sbyte next )
        {
            Key = key;
            Next = next;
            
            
        }
    };

    private static readonly sbyte[] _buckets = new sbyte[] {
        1, 2, 3, 4
     };

    private static readonly E[] _entries = {
        new E(ushort.MinValue, -1), new E(1, -1), new E(2, -1), new E(ushort.MaxValue, -1)
    };


    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(ushort value)
    {
        return (ulong)value;
    }

    
    public static bool Contains(ushort key)
    {
        if (key < ushort.MinValue || key > ushort.MaxValue)
            return false;

        ulong hash = Hash(key);
        uint index = (uint)(hash & 3);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.Key == key)
                return true;

            i = entry.Next;
        }

        return false;
    }

    public const uint ItemCount = 4;
    public const ushort MinKey = ushort.MinValue;
    public const ushort MaxKey = ushort.MaxValue;
}