// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashTable (HashTableChain)
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashTableChainStructure_String_100
{
    private static readonly sbyte[] _buckets = new sbyte[] {
        69, 91, 23, 0, 0, 0, 89, 31, 65, 0, 
        0, 0, 36, 73, 85, 30, 0, 0, 52, 97, 
        40, 0, 0, 79, 94, 33, 67, 0, 0, 99, 
        38, 75, 0, 0, 0, 0, 72, 95, 0, 0, 
        0, 55, 92, 22, 0, 0, 0, 0, 32, 77, 
        0, 10, 0, 0, 74, 88, 29, 0, 0, 70, 
        98, 24, 0, 0, 80, 90, 34, 66, 0, 0, 
        100, 35, 76, 86, 0, 0, 0, 51, 96, 39, 
        0, 0, 56, 93, 21, 68, 0, 0, 0, 37, 
        78, 0, 9, 0, 0, 71, 87, 0, 0, 0
     };

    private static readonly E[] _entries = {
        new E(18225461114117863064, -1, "0"), new E(18225461112551779123, -1, "1"), new E(18225461110985695182, -1, "2"), new E(18225461109419611241, -1, "3"), new E(18225461107853527300, -1, "4"), new E(18225461106287443359, -1, "5"), new E(18225461104721359418, -1, "6"), new E(18225461103155275477, -1, "7"), new E(18225461126646534592, -1, "8"), new E(18225461125080450651, -1, "9"), 
        new E(11144406353614615889, -1, "10"), new E(11144406355180699830, -1, "11"), new E(11144406356746783771, -1, "12"), new E(11144406358312867712, -1, "13"), new E(11144406347350280125, -1, "14"), new E(11144406348916364066, -1, "15"), new E(11144406350482448007, -1, "16"), new E(11144406352048531948, -1, "17"), new E(11144406341085944361, -1, "18"), new E(11144406342652028302, -1, "19"), 
        new E(11144406502392590284, -1, "20"), new E(11144406500826506343, -1, "21"), new E(11144406499260422402, 19, "22"), new E(11144406497694338461, 18, "23"), new E(11144406508656926048, 17, "24"), new E(11144406507090842107, 16, "25"), new E(11144406505524758166, 15, "26"), new E(11144406503958674225, 14, "27"), new E(11144406489863918756, -1, "28"), new E(11144406488297834815, -1, "29"), 
        new E(11144406350482448007, 25, "30"), new E(11144406352048531948, 24, "31"), new E(11144406347350280125, 27, "32"), new E(11144406348916364066, 26, "33"), new E(11144406356746783771, 12, "34"), new E(11144406358312867712, 13, "35"), new E(11144406353614615889, 10, "36"), new E(11144406355180699830, 11, "37"), new E(11144406337953776479, -1, "38"), new E(11144406339519860420, -1, "39"), 
        new E(11144406298801677954, -1, "40"), new E(11144406297235594013, -1, "41"), new E(11144406301933845836, -1, "42"), new E(11144406300367761895, -1, "43"), new E(11144406305066013718, 6, "44"), new E(11144406303499929777, 7, "45"), new E(11144406308198181600, 4, "46"), new E(11144406306632097659, 5, "47"), new E(11144406286273006426, -1, "48"), new E(11144406284706922485, -1, "49"), 
        new E(11144406146891535677, 45, "50"), new E(11144406148457619618, 44, "51"), new E(11144406150023703559, 47, "52"), new E(11144406151589787500, 46, "53"), new E(11144406153155871441, 3, "54"), new E(11144406154721955382, 2, "55"), new E(11144406156288039323, 1, "56"), new E(11144406157854123264, 0, "57"), new E(11144406134362864149, -1, "58"), new E(11144406135928948090, -1, "59"), 
        new E(11144406295669510072, -1, "60"), new E(11144406294103426131, -1, "61"), new E(11144406292537342190, 59, "62"), new E(11144406290971258249, 58, "63"), new E(11144406289405174308, -1, "64"), new E(11144406287839090367, -1, "65"), new E(11144406286273006426, 48, "66"), new E(11144406284706922485, 49, "67"), new E(11144406308198181600, 53, "68"), new E(11144406306632097659, 52, "69"), 
        new E(11144406143759367795, 43, "70"), new E(11144406145325451736, 42, "71"), new E(11144406140627199913, 41, "72"), new E(11144406142193283854, 40, "73"), new E(11144406137495032031, 61, "74"), new E(11144406139061115972, 60, "75"), new E(11144406134362864149, 63, "76"), new E(11144406135928948090, 62, "77"), new E(11144406156288039323, 56, "78"), new E(11144406157854123264, 57, "79"), 
        new E(11144406868856232478, -1, "80"), new E(11144406867290148537, -1, "81"), new E(11144406871988400360, -1, "82"), new E(11144406870422316419, -1, "83"), new E(11144406862591896714, -1, "84"), new E(11144406861025812773, -1, "85"), new E(11144406865724064596, -1, "86"), new E(11144406864157980655, -1, "87"), new E(11144406881384904006, -1, "88"), new E(11144406879818820065, -1, "89"), 
        new E(11144406716946090201, -1, "90"), new E(11144406718512174142, -1, "91"), new E(11144406720078258083, -1, "92"), new E(11144406721644342024, -1, "93"), new E(11144406710681754437, 81, "94"), new E(11144406712247838378, 80, "95"), new E(11144406713813922319, 83, "96"), new E(11144406715380006260, 82, "97"), new E(11144406729474761729, -1, "98"), new E(11144406731040845670, -1, "99")
    };

    
    public static bool Contains(string key)
    {
        if (key.Length < 1u || key.Length > 2u)
            return false;

        ulong hash = Hash(key);
        uint index = (uint)(hash % 100);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.HashCode == hash && StringComparer.Ordinal.Equals(key, entry.Key))
                return true;

            i = entry.Next;
        }

        return false;
    }


    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(string value)
    {
        ulong hash = 352654597;

        ref char ptr = ref MemoryMarshal.GetReference(value.AsSpan());
        int len = value.Length;

        while (len-- > 0)
        {
            hash = (((hash << 5) | (hash >> 27)) + hash) ^ ptr;
            ptr = ref Unsafe.Add(ref ptr, 1);
        }

        return 352654597 + (hash * 1566083941);
    }

    [StructLayout(LayoutKind.Auto)]
    private readonly struct E
    {
        internal readonly ulong HashCode;
        internal readonly sbyte Next;
        internal readonly string Key;

        internal E(ulong hashCode, sbyte next, string key)
        {
            HashCode = hashCode;
            Next = next;
            Key = key;
        }
    }

    public const uint ItemCount = 100;
    public const uint MinLength = 1;
    public const uint MaxLength = 2;
}