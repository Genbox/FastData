// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashTable
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashTableStructure_String_100
{
    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal string Key;
        internal sbyte Next;
        internal ulong HashCode;
        
        internal E(string key, sbyte next, ulong hashCode )
        {
            Key = key;
            Next = next;
            HashCode = hashCode;
            
        }
    };

    private static readonly sbyte[] _buckets = new sbyte[] {
        69, 91, 23, 0, 0, 0, 89, 31, 65, 0, 
        0, 0, 36, 73, 85, 30, 0, 0, 52, 97, 
        40, 0, 0, 79, 94, 33, 67, 0, 0, 99, 
        38, 75, 0, 0, 0, 0, 72, 95, 0, 0, 
        0, 55, 92, 22, 0, 0, 0, 0, 32, 77, 
        0, 10, 0, 0, 74, 88, 29, 0, 0, 70, 
        98, 24, 0, 0, 80, 90, 34, 66, 0, 0, 
        100, 35, 76, 86, 0, 0, 0, 51, 96, 39, 
        0, 0, 56, 93, 21, 68, 0, 0, 0, 37, 
        78, 0, 9, 0, 0, 71, 87, 0, 0, 0
     };

    private static readonly E[] _entries = {
        new E("0", -1, 18225461114117863064), new E("1", -1, 18225461112551779123), new E("2", -1, 18225461110985695182), new E("3", -1, 18225461109419611241), new E("4", -1, 18225461107853527300), new E("5", -1, 18225461106287443359), new E("6", -1, 18225461104721359418), new E("7", -1, 18225461103155275477), new E("8", -1, 18225461126646534592), new E("9", -1, 18225461125080450651), 
        new E("10", -1, 11144406353614615889), new E("11", -1, 11144406355180699830), new E("12", -1, 11144406356746783771), new E("13", -1, 11144406358312867712), new E("14", -1, 11144406347350280125), new E("15", -1, 11144406348916364066), new E("16", -1, 11144406350482448007), new E("17", -1, 11144406352048531948), new E("18", -1, 11144406341085944361), new E("19", -1, 11144406342652028302), 
        new E("20", -1, 11144406502392590284), new E("21", -1, 11144406500826506343), new E("22", 19, 11144406499260422402), new E("23", 18, 11144406497694338461), new E("24", 17, 11144406508656926048), new E("25", 16, 11144406507090842107), new E("26", 15, 11144406505524758166), new E("27", 14, 11144406503958674225), new E("28", -1, 11144406489863918756), new E("29", -1, 11144406488297834815), 
        new E("30", 25, 11144406350482448007), new E("31", 24, 11144406352048531948), new E("32", 27, 11144406347350280125), new E("33", 26, 11144406348916364066), new E("34", 12, 11144406356746783771), new E("35", 13, 11144406358312867712), new E("36", 10, 11144406353614615889), new E("37", 11, 11144406355180699830), new E("38", -1, 11144406337953776479), new E("39", -1, 11144406339519860420), 
        new E("40", -1, 11144406298801677954), new E("41", -1, 11144406297235594013), new E("42", -1, 11144406301933845836), new E("43", -1, 11144406300367761895), new E("44", 6, 11144406305066013718), new E("45", 7, 11144406303499929777), new E("46", 4, 11144406308198181600), new E("47", 5, 11144406306632097659), new E("48", -1, 11144406286273006426), new E("49", -1, 11144406284706922485), 
        new E("50", 45, 11144406146891535677), new E("51", 44, 11144406148457619618), new E("52", 47, 11144406150023703559), new E("53", 46, 11144406151589787500), new E("54", 3, 11144406153155871441), new E("55", 2, 11144406154721955382), new E("56", 1, 11144406156288039323), new E("57", 0, 11144406157854123264), new E("58", -1, 11144406134362864149), new E("59", -1, 11144406135928948090), 
        new E("60", -1, 11144406295669510072), new E("61", -1, 11144406294103426131), new E("62", 59, 11144406292537342190), new E("63", 58, 11144406290971258249), new E("64", -1, 11144406289405174308), new E("65", -1, 11144406287839090367), new E("66", 48, 11144406286273006426), new E("67", 49, 11144406284706922485), new E("68", 53, 11144406308198181600), new E("69", 52, 11144406306632097659), 
        new E("70", 43, 11144406143759367795), new E("71", 42, 11144406145325451736), new E("72", 41, 11144406140627199913), new E("73", 40, 11144406142193283854), new E("74", 61, 11144406137495032031), new E("75", 60, 11144406139061115972), new E("76", 63, 11144406134362864149), new E("77", 62, 11144406135928948090), new E("78", 56, 11144406156288039323), new E("79", 57, 11144406157854123264), 
        new E("80", -1, 11144406868856232478), new E("81", -1, 11144406867290148537), new E("82", -1, 11144406871988400360), new E("83", -1, 11144406870422316419), new E("84", -1, 11144406862591896714), new E("85", -1, 11144406861025812773), new E("86", -1, 11144406865724064596), new E("87", -1, 11144406864157980655), new E("88", -1, 11144406881384904006), new E("89", -1, 11144406879818820065), 
        new E("90", -1, 11144406716946090201), new E("91", -1, 11144406718512174142), new E("92", -1, 11144406720078258083), new E("93", -1, 11144406721644342024), new E("94", 81, 11144406710681754437), new E("95", 80, 11144406712247838378), new E("96", 83, 11144406713813922319), new E("97", 82, 11144406715380006260), new E("98", -1, 11144406729474761729), new E("99", -1, 11144406731040845670)
    };


    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(string value)
    {
        ulong hash = 352654597;

        ref char ptr = ref MemoryMarshal.GetReference(value.AsSpan());
        int len = value.Length;

        while (len-- > 0)
        {
            hash = (((hash << 5) | (hash >> 27)) + hash) ^ ptr;
            ptr = ref Unsafe.Add(ref ptr, 1);
        }

        return 352654597 + (hash * 1566083941);
    }

    
    public static bool Contains(string key)
    {
        if (key.Length < 1u || key.Length > 2u)
            return false;

        ulong hash = Hash(key);
        uint index = (uint)(hash % 100);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (StringComparer.Ordinal.Equals(entry.HashCode, hash) && StringComparer.Ordinal.Equals(entry.Key, key))
                return true;

            i = entry.Next;
        }

        return false;
    }

    public const uint ItemCount = 100;
    public const uint MinKeyLength = 1;
    public const uint MaxKeyLength = 2;
}