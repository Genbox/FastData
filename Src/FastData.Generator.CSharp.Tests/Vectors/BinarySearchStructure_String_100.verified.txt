// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: BinarySearch
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class BinarySearchStructure_String_100
{
    private static readonly string[] _keys = new string[] {
        "0", "1", "10", "11", "12", "13", "14", "15", "16", "17", 
        "18", "19", "2", "20", "21", "22", "23", "24", "25", "26", 
        "27", "28", "29", "3", "30", "31", "32", "33", "34", "35", 
        "36", "37", "38", "39", "4", "40", "41", "42", "43", "44", 
        "45", "46", "47", "48", "49", "5", "50", "51", "52", "53", 
        "54", "55", "56", "57", "58", "59", "6", "60", "61", "62", 
        "63", "64", "65", "66", "67", "68", "69", "7", "70", "71", 
        "72", "73", "74", "75", "76", "77", "78", "79", "8", "80", 
        "81", "82", "83", "84", "85", "86", "87", "88", "89", "9", 
        "90", "91", "92", "93", "94", "95", "96", "97", "98", "99"
    };

    
    public static bool Contains(string key)
    {
        if (key.Length < 1u || key.Length > 2u)
            return false;

        int lo = 0;
        int hi = 99;
        while (lo <= hi)
        {
            int i = lo + ((hi - lo) >> 1);
            int order = StringComparer.Ordinal.Compare(_keys[i], key);

            if (order == 0)
                return true;
            if (order < 0)
                lo = i + 1;
            else
                hi = i - 1;
        }

        return ~lo >= 0;
    }

    public const uint ItemCount = 100;
    public const uint MinKeyLength = 1;
    public const uint MaxKeyLength = 2;
}