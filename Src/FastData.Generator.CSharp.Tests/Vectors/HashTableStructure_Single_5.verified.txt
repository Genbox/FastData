// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashTable
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class HashTableStructure_Single_5
{
    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal float Key;
        internal sbyte Next;
        internal ulong HashCode;
        
        internal E(float key, sbyte next, ulong hashCode )
        {
            Key = key;
            Next = next;
            HashCode = hashCode;
            
        }
    };

    private static readonly sbyte[] _buckets = new sbyte[] {
        3, 4, 1, 0, 5
     };

    private static readonly E[] _entries = {
        new E(float.MinValue, -1, 4286578687), new E(-1f, -1, 3212836864), new E(0f, -1, 0), new E(1f, -1, 1065353216), new E(float.MaxValue, 1, 2139095039)
    };


    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(float value)
    {
        uint bits = Unsafe.ReadUnaligned<uint>(ref Unsafe.As<float, byte>(ref value));

        if (((bits - 1) & ~(0x8000_0000)) >= 0x7FF0_0000)
            bits &= 0x7FF0_0000;

        return (ulong)bits;
    }

    
    public static bool Contains(float key)
    {
        if (key < float.MinValue || key > float.MaxValue)
            return false;

        ulong hash = Hash(key);
        uint index = (uint)(hash % 5);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.HashCode == hash && entry.Key == key)
                return true;

            i = entry.Next;
        }

        return false;
    }

    public const uint ItemCount = 5;
    public const float MinKey = float.MinValue;
    public const float MaxKey = float.MaxValue;
}