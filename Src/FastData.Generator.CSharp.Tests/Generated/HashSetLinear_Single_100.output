// <auto-generated />
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class HashSetLinear_Single_100  : IFastSet<Single>
{
    private readonly B[] _buckets = {
        new B(0, 0), new B(1, 1), new B(0, 0), new B(2, 2), new B(3, 3), new B(0, 0), new B(0, 0), new B(0, 0), new B(4, 4), new B(5, 5), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(6, 6), new B(7, 7), new B(0, 0), new B(0, 0), new B(0, 0), new B(8, 8), new B(0, 0), 
        new B(0, 0), new B(9, 9), new B(0, 0), new B(10, 10), new B(0, 0), new B(0, 0), new B(11, 11), new B(0, 0), new B(12, 12), new B(0, 0), 
        new B(0, 0), new B(13, 13), new B(0, 0), new B(14, 14), new B(0, 0), new B(0, 0), new B(15, 15), new B(0, 0), new B(16, 16), new B(0, 0), 
        new B(0, 0), new B(17, 17), new B(0, 0), new B(18, 18), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(19, 19), new B(0, 0), 
        new B(0, 0), new B(20, 20), new B(0, 0), new B(21, 21), new B(0, 0), new B(0, 0), new B(0, 0), new B(22, 22), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(23, 23), new B(24, 24), new B(0, 0), new B(0, 0), new B(25, 25), new B(0, 0), new B(26, 26), new B(0, 0), new B(0, 0), 
        new B(27, 27), new B(28, 28), new B(29, 29), new B(0, 0), new B(0, 0), new B(30, 30), new B(31, 31), new B(32, 32), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(33, 33), new B(34, 34), new B(0, 0), new B(0, 0), new B(0, 0), new B(35, 35), new B(36, 36), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(37, 37), new B(38, 38), new B(0, 0), new B(39, 39), new B(0, 0), new B(40, 40), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(41, 41), new B(0, 0), new B(0, 0), new B(42, 42), new B(0, 0), new B(43, 43), new B(0, 0), new B(0, 0), new B(44, 44), 
        new B(0, 0), new B(45, 45), new B(0, 0), new B(0, 0), new B(46, 47), new B(0, 0), new B(48, 48), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(49, 49), new B(0, 0), new B(0, 0), new B(50, 50), new B(0, 0), new B(51, 51), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(52, 52), new B(0, 0), new B(0, 0), new B(53, 53), new B(54, 54), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(55, 55), new B(0, 0), new B(0, 0), new B(56, 56), new B(57, 57), new B(58, 58), new B(0, 0), new B(59, 59), new B(60, 60), new B(61, 61), 
        new B(62, 62), new B(0, 0), new B(0, 0), new B(63, 63), new B(64, 64), new B(65, 65), new B(0, 0), new B(0, 0), new B(0, 0), new B(66, 66), 
        new B(67, 67), new B(0, 0), new B(0, 0), new B(0, 0), new B(68, 68), new B(69, 69), new B(0, 0), new B(0, 0), new B(0, 0), new B(70, 70), 
        new B(71, 71), new B(0, 0), new B(0, 0), new B(0, 0), new B(72, 72), new B(73, 73), new B(0, 0), new B(0, 0), new B(0, 0), new B(74, 74), 
        new B(0, 0), new B(0, 0), new B(75, 75), new B(0, 0), new B(76, 76), new B(0, 0), new B(0, 0), new B(77, 78), new B(0, 0), new B(79, 79), 
        new B(0, 0), new B(0, 0), new B(80, 80), new B(0, 0), new B(81, 81), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(82, 82), 
        new B(83, 83), new B(0, 0), new B(0, 0), new B(0, 0), new B(84, 84), new B(0, 0), new B(0, 0), new B(85, 85), new B(0, 0), new B(86, 86), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(87, 87), new B(0, 0), new B(0, 0), new B(88, 88), new B(89, 89), new B(0, 0), 
        new B(0, 0), new B(90, 90), new B(0, 0), new B(91, 91), new B(0, 0), new B(0, 0), new B(92, 92), new B(93, 93), new B(94, 94), new B(0, 0), 
        new B(0, 0), new B(95, 95), new B(96, 96), new B(97, 97), new B(0, 0), new B(0, 0), new B(0, 0), new B(98, 98), new B(99, 99)
    };

    private readonly float[] _items = new float[] {
        0, 3, 25, 70, 28, 82, 31, 94, 36, 5, 
        42, 75, 48, 87, 54, 99, 60, 8, 68, 80, 
        11, 92, 35, 14, 41, 73, 47, 85, 18, 53, 
        97, 21, 59, 24, 66, 27, 78, 30, 90, 4, 
        34, 40, 71, 46, 83, 52, 95, 7, 58, 64, 
        9, 76, 88, 12, 33, 39, 69, 15, 45, 2, 
        81, 17, 51, 93, 20, 57, 23, 63, 26, 74, 
        29, 86, 32, 98, 38, 67, 44, 79, 6, 50, 
        91, 56, 62, 1, 72, 10, 84, 96, 13, 37, 
        65, 43, 77, 16, 49, 89, 19, 55, 22, 61
    };

    private readonly uint[] _hashCodes = {
        0, 1077936128, 1103626240, 1116471296, 1105199104, 1118044160, 1106771968, 1119617024, 1108344832, 1084227584, 
        1109917696, 1117126656, 1111490560, 1118699520, 1113063424, 1120272384, 1114636288, 1090519040, 1116209152, 1117782016, 
        1093664768, 1119354880, 1108082688, 1096810496, 1109655552, 1116864512, 1111228416, 1118437376, 1099956224, 1112801280, 
        1120010240, 1101529088, 1114374144, 1103101952, 1115947008, 1104674816, 1117519872, 1106247680, 1119092736, 1082130432, 
        1107820544, 1109393408, 1116602368, 1110966272, 1118175232, 1112539136, 1119748096, 1088421888, 1114112000, 1115684864, 
        1091567616, 1117257728, 1118830592, 1094713344, 1107558400, 1109131264, 1116340224, 1097859072, 1110704128, 1073741824, 
        1117913088, 1099431936, 1112276992, 1119485952, 1101004800, 1113849856, 1102577664, 1115422720, 1104150528, 1116995584, 
        1105723392, 1118568448, 1107296256, 1120141312, 1108869120, 1116078080, 1110441984, 1117650944, 1086324736, 1112014848, 
        1119223808, 1113587712, 1115160576, 1065353216, 1116733440, 1092616192, 1118306304, 1119879168, 1095761920, 1108606976, 
        1115815936, 1110179840, 1117388800, 1098907648, 1111752704, 1118961664, 1100480512, 1113325568, 1102053376, 1114898432
    };

    
    public bool Contains(float value)
    {
        if (value < 0 || value > 99)
           return false;

        uint hash = Hash(value);
        ref B b = ref _buckets[MathHelper.FastMod(hash, 239, 77183029597111095)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(Single value) => unchecked((uint)(value.GetHashCode()));

    [StructLayout(LayoutKind.Auto)]
    private struct B
    {
        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal byte StartIndex;
        internal byte EndIndex;
    }

    public const int ItemCount = 100;
    public int Length => 100;
}