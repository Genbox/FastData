// <auto-generated />
// Structure: HashSetLinear
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;
using Genbox.FastData.Generator.CSharp.Abstracts;


internal partial class MyData : IFastSet<UInt32>
{
    private readonly B[] _buckets = {
        new B(0, 0), new B(1, 1), new B(2, 2), new B(3, 3), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0)
    };

    private readonly uint[] _items = new uint[] {
        0u, 1u, 2u, 4294967295u
    };

    private readonly uint[] _hashCodes = {
        0, 1, 2, 4294967295
    };

    
    public bool Contains(uint value)
    {
        if (value < 0u || value > 4294967295u)
            return false;

        uint hash = Hash(value);
        ref B b = ref _buckets[MathHelper.FastMod(hash, 11, 1676976733973595602)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(uint value)
    {
        return unchecked((uint)(value));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct B
    {
        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal byte StartIndex;
        internal byte EndIndex;
    }

    public const int ItemCount = 4;
    public int Length => ItemCount;
    public const uint MinValue = 0u;
    public const uint MaxValue = 4294967295u;
}