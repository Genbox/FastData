// <auto-generated />
// Structure: PerfectHashBruteForce
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class PerfectHashBruteForce_UInt32_100 : IFastSet<UInt32>
{
    private E[] _entries = {
        new E(1, 0), new E(0, 1), new E(3, 2), new E(2, 3), new E(5, 4), new E(4, 5), new E(7, 6), new E(6, 7), new E(9, 8), new E(8, 9), 
        new E(11, 10), new E(10, 11), new E(13, 12), new E(12, 13), new E(15, 14), new E(14, 15), new E(17, 16), new E(16, 17), new E(19, 18), new E(18, 19), 
        new E(21, 20), new E(20, 21), new E(23, 22), new E(22, 23), new E(25, 24), new E(24, 25), new E(27, 26), new E(26, 27), new E(29, 28), new E(28, 29), 
        new E(31, 30), new E(30, 31), new E(33, 32), new E(32, 33), new E(35, 34), new E(34, 35), new E(37, 36), new E(36, 37), new E(39, 38), new E(38, 39), 
        new E(41, 40), new E(40, 41), new E(43, 42), new E(42, 43), new E(45, 44), new E(44, 45), new E(47, 46), new E(46, 47), new E(49, 48), new E(48, 49), 
        new E(51, 50), new E(50, 51), new E(53, 52), new E(52, 53), new E(55, 54), new E(54, 55), new E(57, 56), new E(56, 57), new E(59, 58), new E(58, 59), 
        new E(61, 60), new E(60, 61), new E(63, 62), new E(62, 63), new E(65, 64), new E(64, 65), new E(67, 66), new E(66, 67), new E(69, 68), new E(68, 69), 
        new E(71, 70), new E(70, 71), new E(73, 72), new E(72, 73), new E(75, 74), new E(74, 75), new E(77, 76), new E(76, 77), new E(79, 78), new E(78, 79), 
        new E(81, 80), new E(80, 81), new E(83, 82), new E(82, 83), new E(85, 84), new E(84, 85), new E(87, 86), new E(86, 87), new E(89, 88), new E(88, 89), 
        new E(91, 90), new E(90, 91), new E(93, 92), new E(92, 93), new E(95, 94), new E(94, 95), new E(97, 96), new E(96, 97), new E(99, 98), new E(98, 99)
    };

    
    public bool Contains(uint value)
    {
        if (value < 0 || value > 99)
           return false;

        uint hash = Hash(value, 1);
        uint index = MathHelper.FastMod(hash, 100, 184467440737095517);
        ref E entry = ref _entries[index];

        return hash == entry.HashCode && value.Equals(entry.Value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(uint value, uint seed) => unchecked((uint)(value ^ seed));

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal E(uint value, uint hashCode)
        {
            Value = value;
            HashCode = hashCode;
        }

        internal uint Value;
        internal uint HashCode;
    }

    public const int ItemCount = 100;
    public int Length => ItemCount;
    public const uint MinValue = 0;
    public const uint MaxValue = 99;
}