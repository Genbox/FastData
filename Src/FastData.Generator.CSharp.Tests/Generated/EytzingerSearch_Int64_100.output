// <auto-generated />
// Structure: EytzingerSearch
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;
using Genbox.FastData.Generator.CSharp.Abstracts;


internal partial class EytzingerSearch_Int64_100 : IFastSet<Int64>
{
    private long[] _entries = new long[] {
        63, 31, 84, 15, 47, 76, 92, 7, 23, 39, 
        55, 71, 80, 88, 96, 3, 11, 19, 27, 35, 
        43, 51, 59, 67, 74, 78, 82, 86, 90, 94, 
        98, 1, 5, 9, 13, 17, 21, 25, 29, 33, 
        37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 
        75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 
        95, 97, 99, 0, 2, 4, 6, 8, 10, 12, 
        14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 
        34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 
        54, 56, 58, 60, 62, 64, 66, 68, 70, 72
    };

    
    public bool Contains(long value)
    {
        if (value < 0 || value > 99)
           return false;

        int i = 0;
        while (i < _entries.Length)
        {
            int comparison = _entries[i].CompareTo(value);

            if (comparison == 0)
                return true;

            if (comparison < 0)
                i = 2 * i + 2;
            else
                i = 2 * i + 1;
        }

        return false;
    }

    public const int ItemCount = 100;
    public int Length => ItemCount;
    public const int MinValue = 0;
    public const int MaxValue = 99;
}