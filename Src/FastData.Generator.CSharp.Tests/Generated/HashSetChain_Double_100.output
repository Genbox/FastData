// <auto-generated />
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class HashSetChain_Double_100  : IFastSet<Double>
{
    private readonly sbyte[] _buckets = new sbyte[] {
        84, 0, 0, 0, 90, 0, 0, 0, 96, 0, 
        0, 0, 77, 0, 0, 0, 83, 0, 0, 0, 
        89, 0, 0, 0, 95, 0, 0, 0, 76, 0, 
        0, 0, 82, 0, 0, 0, 88, 0, 0, 0, 
        94, 0, 0, 0, 100, 0, 0, 0, 81, 0, 
        0, 0, 87, 0, 0, 0, 93, 0, 0, 0, 
        99, 0, 0, 0, 80, 0, 0, 0, 86, 0, 
        0, 0, 92, 0, 0, 0, 98, 0, 0, 0, 
        79, 0, 0, 0, 85, 0, 0, 0, 91, 0, 
        0, 0, 97, 0, 0, 0, 78, 0, 0, 0
     };

    private readonly E[] _entries = {
        new E(0, -1, 0), new E(1072693248, -1, 1), new E(1073741824, -1, 2), new E(1074266112, -1, 3), new E(1074790400, 0, 4), new E(1075052544, -1, 5), new E(1075314688, -1, 6), new E(1075576832, -1, 7), new E(1075838976, -1, 8), new E(1075970048, 1, 9), 
        new E(1076101120, -1, 10), new E(1076232192, -1, 11), new E(1076363264, -1, 12), new E(1076494336, -1, 13), new E(1076625408, -1, 14), new E(1076756480, -1, 15), new E(1076887552, -1, 16), new E(1076953088, 6, 17), new E(1077018624, 2, 18), new E(1077084160, -1, 19), 
        new E(1077149696, -1, 20), new E(1077215232, 7, 21), new E(1077280768, -1, 22), new E(1077346304, -1, 23), new E(1077411840, -1, 24), new E(1077477376, 8, 25), new E(1077542912, 3, 26), new E(1077608448, 9, 27), new E(1077673984, -1, 28), new E(1077739520, 10, 29), 
        new E(1077805056, -1, 30), new E(1077870592, 11, 31), new E(1077936128, -1, 32), new E(1077968896, 20, 33), new E(1078001664, 12, 34), new E(1078034432, 21, 35), new E(1078067200, 4, 36), new E(1078099968, 22, 37), new E(1078132736, 13, 38), new E(1078165504, 23, 39), 
        new E(1078198272, -1, 40), new E(1078231040, 24, 41), new E(1078263808, 14, 42), new E(1078296576, 25, 43), new E(1078329344, 5, 44), new E(1078362112, 26, 45), new E(1078394880, 15, 46), new E(1078427648, 27, 47), new E(1078460416, -1, 48), new E(1078493184, 28, 49), 
        new E(1078525952, 16, 50), new E(1078558720, 29, 51), new E(1078591488, 17, 52), new E(1078624256, 30, 53), new E(1078657024, 18, 54), new E(1078689792, 31, 55), new E(1078722560, 19, 56), new E(1078755328, 32, 57), new E(1078788096, 33, 58), new E(1078820864, 34, 59), 
        new E(1078853632, 35, 60), new E(1078886400, 36, 61), new E(1078919168, 37, 62), new E(1078951936, 38, 63), new E(1078984704, 39, 64), new E(1079001088, 52, 65), new E(1079017472, 40, 66), new E(1079033856, 53, 67), new E(1079050240, 41, 68), new E(1079066624, 54, 69), 
        new E(1079083008, 42, 70), new E(1079099392, 55, 71), new E(1079115776, 43, 72), new E(1079132160, 56, 73), new E(1079148544, 44, 74), new E(1079164928, 57, 75), new E(1079181312, 45, 76), new E(1079197696, 58, 77), new E(1079214080, 46, 78), new E(1079230464, 59, 79), 
        new E(1079246848, 47, 80), new E(1079263232, 60, 81), new E(1079279616, 48, 82), new E(1079296000, 61, 83), new E(1079312384, 49, 84), new E(1079328768, 62, 85), new E(1079345152, 50, 86), new E(1079361536, 63, 87), new E(1079377920, 51, 88), new E(1079394304, 64, 89), 
        new E(1079410688, 65, 90), new E(1079427072, 66, 91), new E(1079443456, 67, 92), new E(1079459840, 68, 93), new E(1079476224, 69, 94), new E(1079492608, 70, 95), new E(1079508992, 71, 96), new E(1079525376, 72, 97), new E(1079541760, 73, 98), new E(1079558144, 74, 99)
    };

    
    public bool Contains(double value)
    {
        if (value < 0 || value > 99)
           return false;

        uint hash = Hash(value);
        uint index = MathHelper.FastMod(hash, 100, 184467440737095517);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.HashCode == hash && value.Equals(entry.Value))
                return true;

            i = entry.Next;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(double value) => unchecked((uint)(value.GetHashCode()));

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal uint HashCode;
        internal sbyte Next;
        internal double Value;

        internal E(uint hashCode, sbyte next, double value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const int ItemCount = 100;
    public int Length => 100;
}