// <auto-generated />
// Structure: BinarySearch
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;
using Genbox.FastData.Generator.CSharp.Abstracts;


internal partial class MyData : IFastSet<Int64>
{
    private long[] _entries = new long[] {
        -9223372036854775808, -1, 0, 1, 9223372036854775807
    };

    
    public bool Contains(long value)
    {
        if (value < -9223372036854775808 || value > 9223372036854775807)
           return false;

        int lo = 0;
        int hi = 4;
        while (lo <= hi)
        {
            int i = lo + ((hi - lo) >> 1);
            int order = _entries[i].CompareTo(value);

            if (order == 0)
                return true;
            if (order < 0)
                lo = i + 1;
            else
                hi = i - 1;
        }

        return ((~lo) >= 0);
    }

    public const int ItemCount = 5;
    public int Length => ItemCount;
    public const long MinValue = -9223372036854775808;
    public const long MaxValue = 9223372036854775807;
}