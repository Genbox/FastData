// <auto-generated />
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class HashSetLinear_Boolean_1  : IFastSet<Boolean>
{
    private readonly B[] _buckets = {
        new B(0, 0), new B(0, 0), new B(0, 0)
    };

    private readonly bool[] _items = new bool[] {
        true
    };

    private readonly uint[] _hashCodes = {
        1
    };

    
    public bool Contains(bool value)
    {


        uint hash = Hash(value);
        ref B b = ref _buckets[MathHelper.FastMod(hash, 3, 6148914691236517206)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(Boolean value) => unchecked((uint)(value.GetHashCode()));

    [StructLayout(LayoutKind.Auto)]
    private struct B
    {
        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal byte StartIndex;
        internal byte EndIndex;
    }

    public const int ItemCount = 1;
    public int Length => 1;
}