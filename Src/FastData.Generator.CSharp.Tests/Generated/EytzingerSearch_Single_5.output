// <auto-generated />
// Structure: EytzingerSearch
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;
using Genbox.FastData.Generator.CSharp.Abstracts;


internal partial class MyData : IFastSet<Single>
{
    private float[] _entries = new float[] {
        1f, -1f, 3.4028235E+38f, -3.4028235E+38f, 0f
    };

    
    public bool Contains(float value)
    {
        if (value < -3.4028234663852886E+38f || value > 3.4028234663852886E+38f)
            return false;

        int i = 0;
        while (i < _entries.Length)
        {
            int comparison = _entries[i].CompareTo(value);

            if (comparison == 0)
                return true;

            if (comparison < 0)
                i = 2 * i + 2;
            else
                i = 2 * i + 1;
        }

        return false;
    }

    public const int ItemCount = 5;
    public int Length => ItemCount;
    public const double MinValue = -3.4028234663852886E+38;
    public const double MaxValue = 3.4028234663852886E+38;
}