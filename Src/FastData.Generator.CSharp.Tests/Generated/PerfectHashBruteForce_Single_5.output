// <auto-generated />
// Structure: PerfectHashBruteForce
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;


internal static class MyData 
{
    private static readonly E[] _entries = {
        new E(-1f, 3196059650u), new E(3.4028235E+38f, 2122317821u), new E(1f, 1048576002u), new E(0f, 16777218u), new E(-3.4028235E+38f, 4269801469u)
    };

    
    public static bool Contains(float value)
    {
        if (value < -3.4028234663852886E+38f || value > 3.4028234663852886E+38f)
            return false;

        uint hash = Hash(value, 16777218);
        uint index = unchecked((uint)(((((3689348814741910324ul * hash) >> 32) + 1) * 5) >> 32));
        ref E entry = ref _entries[index];

        return hash == entry.HashCode && value.Equals(entry.Value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(float value, uint seed)
    {
        return unchecked((uint)(value.GetHashCode()^ seed));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal E(float value, uint hashCode)
        {
            Value = value;
            HashCode = hashCode;
        }

        internal float Value;
        internal uint HashCode;
    }

    public const int ItemCount = 5;
    public const float MinValue = -3.4028234663852886E+38f;
    public const float MaxValue = 3.4028234663852886E+38f;
}