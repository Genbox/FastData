// <auto-generated />
// Structure: PerfectHashBruteForce
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;
using Genbox.FastData.Generator.CSharp.Abstracts;


internal partial class MyData : IFastSet<Single>
{
    private E[] _entries = {
        new E(-1.0f, 3196059650u), new E(340282300000000000000000000000000000000.0f, 2122317821u), new E(1.0f, 1048576002u), new E(0.0f, 16777218u), new E(-340282300000000000000000000000000000000.0f, 4269801469u)
    };

    
    public bool Contains(float value)
    {
        if (value < -340282346638529000000000000000000000000.0f || value > 340282346638529000000000000000000000000.0f)
            return false;

        uint hash = Hash(value, 16777218);
        uint index = MathHelper.FastMod(hash, 5, 3689348814741910324);
        ref E entry = ref _entries[index];

        return hash == entry.HashCode && value.Equals(entry.Value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(float value, uint seed)
    {
        return unchecked((uint)(value.GetHashCode()^ seed));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal E(float value, uint hashCode)
        {
            Value = value;
            HashCode = hashCode;
        }

        internal float Value;
        internal uint HashCode;
    }

    public const int ItemCount = 5;
    public int Length => ItemCount;
    public const float MinValue = -340282346638529000000000000000000000000.0f;
    public const float MaxValue = 340282346638529000000000000000000000000.0f;
}