// <auto-generated />
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal static class MyData 
{
    private static readonly sbyte[] _buckets = { 2, 1 };

    private static readonly Entry[] _entries = {
        new Entry(1, -1, true),
        new Entry(0, -1, false)
    };

    
    public static bool Contains(Boolean value)
    {


        uint hashCode = Hash(value);
        uint index = hashCode & 1;
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref Entry entry = ref _entries[i];

            if (entry.HashCode == hashCode && entry.Value.Equals(value))
                return true;

            i = entry.Next;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(Boolean value) => unchecked((uint)(value.GetHashCode()));

    [StructLayout(LayoutKind.Auto)]
    private struct Entry
    {
        public uint HashCode;
        public sbyte Next;
        public Boolean Value;

        public Entry(uint hashCode, sbyte next, Boolean value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const int ItemCount = 2;
}