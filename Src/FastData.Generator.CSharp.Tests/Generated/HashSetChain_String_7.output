// <auto-generated />
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class HashSetChain_String_7  : IFastSet<String>
{
    private readonly sbyte[] _buckets = new sbyte[] {
        3, 0, 0, 7, 0, 2, 4
     };

    private readonly E[] _entries = {
        new E(3645924380, -1, "aaa"), new E(3844005527, -1, "aaaaa"), new E(2517435613, 0, "aaaaaa"), new E(3612615712, -1, "aaaaaaa"), new E(1489999822, -1, "aaaaaaaa"), new E(1495121428, 4, "aaaaaaaaa"), new E(3989733254, 5, "aaaaaaaaaa")
    };

    
    public bool Contains(string value)
    {
       if ((1012UL & (1UL << (value.Length - 1) % 64)) == 0)
           return false;

        uint hash = Hash(value);
        uint index = MathHelper.FastMod(hash, 7, 2635249153387078803);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.HashCode == hash && StringComparer.Ordinal.Equals(value, entry.Value))
                return true;

            i = entry.Next;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(string value) => HashHelper.HashString(value);

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal uint HashCode;
        internal sbyte Next;
        internal string Value;

        internal E(uint hashCode, sbyte next, string value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const int ItemCount = 7;
    public int Length => 7;
}