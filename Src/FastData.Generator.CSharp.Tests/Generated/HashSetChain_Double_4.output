// <auto-generated />
// Structure: HashSetChain
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;


internal static class MyData 
{
    private static readonly sbyte[] _buckets = new sbyte[] {
        4, 0, 0, 0
     };

    private static readonly E[] _entries = {
        new E(1048576, -1, -1.7976931348623157E+308), new E(0, 0, 0), new E(1072693248, 1, 1), new E(2148532224, 2, 1.7976931348623157E+308)
    };

    
    public static bool Contains(double value)
    {
        if (value < -1.7976931348623157E+308 || value > 1.7976931348623157E+308)
            return false;

        uint hash = Hash(value);
        uint index = hash & 3;
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.HashCode == hash && value.Equals(entry.Value))
                return true;

            i = entry.Next;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(double value)
    {
        return unchecked((uint)(value.GetHashCode()));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal uint HashCode;
        internal sbyte Next;
        internal double Value;

        internal E(uint hashCode, sbyte next, double value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const int ItemCount = 4;
    public const double MinValue = -1.7976931348623157E+308;
    public const double MaxValue = 1.7976931348623157E+308;
}