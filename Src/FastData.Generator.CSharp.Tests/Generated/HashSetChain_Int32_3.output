// <auto-generated />
// Structure: HashSetChain
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;
using Genbox.FastData.Generator.CSharp.Abstracts;


internal partial class MyData : IFastSet<Int32>
{
    private readonly sbyte[] _buckets = new sbyte[] {
        2, 3, 0
     };

    private readonly E[] _entries = {
        new E(4294967295, -1, -1), new E(0, 0, 0), new E(1, -1, 1)
    };

    
    public bool Contains(int value)
    {
        if (value < -1 || value > 1)
           return false;

        uint hash = Hash(value);
        uint index = MathHelper.FastMod(hash, 3, 6148914691236517206);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.HashCode == hash && value.Equals(entry.Value))
                return true;

            i = entry.Next;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(int value)
    {
        return unchecked((uint)value);
    }

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal uint HashCode;
        internal sbyte Next;
        internal int Value;

        internal E(uint hashCode, sbyte next, int value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const int ItemCount = 3;
    public int Length => ItemCount;
    public const int MinValue = -1;
    public const int MaxValue = 1;
}