// <auto-generated />
// Structure: HashSetLinear
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class HashSetLinear_Double_100 : IFastSet<Double>
{
    private readonly B[] _buckets = {
        new B(0, 0), new B(1, 1), new B(2, 2), new B(0, 0), new B(0, 0), new B(0, 0), new B(3, 3), new B(0, 0), new B(0, 0), new B(4, 4), 
        new B(0, 0), new B(0, 0), new B(5, 5), new B(6, 6), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(7, 7), new B(0, 0), 
        new B(8, 8), new B(0, 0), new B(0, 0), new B(9, 9), new B(0, 0), new B(0, 0), new B(10, 10), new B(11, 11), new B(0, 0), new B(12, 12), 
        new B(0, 0), new B(13, 13), new B(0, 0), new B(0, 0), new B(14, 14), new B(15, 15), new B(0, 0), new B(16, 16), new B(17, 17), new B(0, 0), 
        new B(18, 18), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(19, 19), new B(0, 0), new B(0, 0), new B(20, 20), new B(0, 0), 
        new B(0, 0), new B(21, 21), new B(22, 22), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(23, 23), new B(0, 0), new B(24, 24), 
        new B(0, 0), new B(0, 0), new B(25, 25), new B(26, 26), new B(27, 27), new B(0, 0), new B(0, 0), new B(0, 0), new B(28, 28), new B(29, 29), 
        new B(30, 30), new B(0, 0), new B(0, 0), new B(31, 31), new B(32, 32), new B(0, 0), new B(33, 33), new B(34, 34), new B(0, 0), new B(35, 35), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(36, 36), new B(0, 0), new B(0, 0), new B(37, 37), new B(38, 38), new B(0, 0), 
        new B(39, 39), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(40, 40), new B(41, 41), new B(0, 0), new B(42, 42), new B(0, 0), 
        new B(0, 0), new B(43, 43), new B(44, 44), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(45, 45), 
        new B(0, 0), new B(0, 0), new B(46, 46), new B(47, 48), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(49, 49), new B(0, 0), 
        new B(50, 50), new B(0, 0), new B(0, 0), new B(51, 51), new B(0, 0), new B(0, 0), new B(52, 52), new B(53, 53), new B(0, 0), new B(54, 54), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(55, 55), new B(56, 56), new B(0, 0), new B(57, 57), new B(58, 58), new B(0, 0), 
        new B(59, 59), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(60, 60), new B(0, 0), new B(61, 61), new B(62, 62), new B(0, 0), 
        new B(0, 0), new B(63, 63), new B(64, 65), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(66, 66), new B(0, 0), new B(67, 67), 
        new B(0, 0), new B(0, 0), new B(68, 68), new B(69, 69), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(70, 70), new B(0, 0), 
        new B(71, 71), new B(0, 0), new B(0, 0), new B(72, 72), new B(73, 73), new B(0, 0), new B(74, 74), new B(75, 75), new B(0, 0), new B(76, 76), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(77, 77), new B(0, 0), new B(0, 0), new B(78, 78), new B(0, 0), new B(0, 0), 
        new B(79, 79), new B(80, 80), new B(0, 0), new B(0, 0), new B(0, 0), new B(81, 81), new B(82, 82), new B(0, 0), new B(83, 83), new B(0, 0), 
        new B(0, 0), new B(84, 84), new B(85, 85), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(86, 86), new B(0, 0), new B(87, 87), 
        new B(0, 0), new B(0, 0), new B(88, 88), new B(0, 0), new B(0, 0), new B(0, 0), new B(89, 89), new B(0, 0), new B(90, 90), new B(0, 0), 
        new B(91, 91), new B(0, 0), new B(0, 0), new B(92, 92), new B(0, 0), new B(0, 0), new B(93, 93), new B(94, 94), new B(0, 0), new B(95, 95), 
        new B(96, 96), new B(0, 0), new B(0, 0), new B(0, 0), new B(97, 97), new B(98, 98), new B(0, 0), new B(99, 99), new B(0, 0)
    };

    private readonly double[] _items = new double[] {
        0, 32, 67, 96, 61, 42, 87, 18, 78, 52, 
        33, 69, 23, 98, 62, 10, 43, 89, 28, 80, 
        53, 34, 71, 15, 63, 44, 91, 1, 19, 3, 
        82, 54, 8, 35, 73, 24, 64, 45, 93, 29, 
        84, 13, 55, 36, 75, 66, 46, 95, 7, 20, 
        86, 56, 37, 77, 25, 68, 11, 47, 97, 30, 
        88, 2, 57, 38, 79, 6, 16, 70, 48, 99, 
        21, 90, 58, 9, 39, 81, 26, 72, 49, 31, 
        5, 92, 14, 59, 40, 83, 17, 74, 50, 65, 
        22, 94, 60, 41, 85, 27, 4, 76, 12, 51
    };

    private readonly uint[] _hashCodes = {
        0, 1077936128, 1079033856, 1079508992, 1078886400, 1078263808, 1079361536, 1077018624, 1079214080, 1078591488, 
        1077968896, 1079066624, 1077346304, 1079541760, 1078919168, 1076101120, 1078296576, 1079394304, 1077673984, 1079246848, 
        1078624256, 1078001664, 1079099392, 1076756480, 1078951936, 1078329344, 1079427072, 1072693248, 1077084160, 1074266112, 
        1079279616, 1078657024, 1075838976, 1078034432, 1079132160, 1077411840, 1078984704, 1078362112, 1079459840, 1077739520, 
        1079312384, 1076494336, 1078689792, 1078067200, 1079164928, 1079017472, 1078394880, 1079492608, 1075576832, 1077149696, 
        1079345152, 1078722560, 1078099968, 1079197696, 1077477376, 1079050240, 1076232192, 1078427648, 1079525376, 1077805056, 
        1079377920, 1073741824, 1078755328, 1078132736, 1079230464, 1075314688, 1076887552, 1079083008, 1078460416, 1079558144, 
        1077215232, 1079410688, 1078788096, 1075970048, 1078165504, 1079263232, 1077542912, 1079115776, 1078493184, 1077870592, 
        1075052544, 1079443456, 1076625408, 1078820864, 1078198272, 1079296000, 1076953088, 1079148544, 1078525952, 1079001088, 
        1077280768, 1079476224, 1078853632, 1078231040, 1079328768, 1077608448, 1074790400, 1079181312, 1076363264, 1078558720
    };

    
    public bool Contains(double value)
    {
        if (value < 0 || value > 99)
           return false;

        uint hash = Hash(value);
        ref B b = ref _buckets[MathHelper.FastMod(hash, 239, 77183029597111095)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(double value) => unchecked((uint)(value.GetHashCode()));

    [StructLayout(LayoutKind.Auto)]
    private struct B
    {
        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal byte StartIndex;
        internal byte EndIndex;
    }

    public const int ItemCount = 100;
    public int Length => ItemCount;
    public const int MinValue = 0;
    public const int MaxValue = 99;
}