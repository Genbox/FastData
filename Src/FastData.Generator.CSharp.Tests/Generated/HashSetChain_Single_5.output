// <auto-generated />
// Structure: HashSetChain
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;
using Genbox.FastData.Generator.CSharp.Abstracts;


internal partial class MyData : IFastSet<Single>
{
    private readonly sbyte[] _buckets = new sbyte[] {
        3, 4, 1, 0, 5
     };

    private readonly E[] _entries = {
        new E(4286578687, -1, -3.4028235E+38f), new E(3212836864, -1, -1f), new E(0, -1, 0f), new E(1065353216, -1, 1f), new E(2139095039, 1, 3.4028235E+38f)
    };

    
    public bool Contains(float value)
    {
        if (value < -3.4028234663852886E+38 || value > 3.4028234663852886E+38)
           return false;

        uint hash = Hash(value);
        uint index = MathHelper.FastMod(hash, 5, 3689348814741910324);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.HashCode == hash && value.Equals(entry.Value))
                return true;

            i = entry.Next;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(float value)
    {
        return unchecked((uint)(value.GetHashCode()));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal uint HashCode;
        internal sbyte Next;
        internal float Value;

        internal E(uint hashCode, sbyte next, float value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const int ItemCount = 5;
    public int Length => ItemCount;
    public const double MinValue = -3.4028234663852886E+38;
    public const double MaxValue = 3.4028234663852886E+38;
}