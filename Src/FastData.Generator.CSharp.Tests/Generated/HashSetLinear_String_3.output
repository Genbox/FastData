// <auto-generated />
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class HashSetLinear_String_3  : IFastSet<String>
{
    private readonly B[] _buckets = {
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(1, 1), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(2, 2), new B(0, 0)
    };

    private readonly string[] _items = new string[] {
        "item1", "item3", "item2"
    };

    private readonly uint[] _hashCodes = {
        2011983611, 849184197, 3578067552
    };

    
    public bool Contains(string value)
    {
       if (value.Length != 5)
           return false;

        uint hash = Hash(value);
        ref B b = ref _buckets[MathHelper.FastMod(hash, 17, 1085102592571150096)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && StringComparer.Ordinal.Equals(value, _items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(String value) => HashHelper.HashString(value);

    [StructLayout(LayoutKind.Auto)]
    private struct B
    {
        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal byte StartIndex;
        internal byte EndIndex;
    }

    public const int ItemCount = 3;
    public int Length => 3;
}