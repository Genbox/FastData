// <auto-generated />
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class MyData  : IFastSet<String>
{
    private E[] _entries = {
        new E("item6", 859875200), new E("item5", 2425959141), new E("item4", 3992043082), new E("item1", 100360313), new E("item8", 1310213894), new E("item7", 3588758555), new E("item10", 2477118126), new E("item3", 1263159727), new E("item2", 2829243668), new E("item9", 4039097249)
    };

    
    public bool Contains(string value)
    {
        if (value.Length < 5 || value.Length > 6)
           return false;

        uint hash = Hash(value, 2);
        uint index = MathHelper.FastMod(hash, 10, 1844674407370955162);
        ref E entry = ref _entries[index];

        return hash == entry.HashCode && StringComparer.Ordinal.Equals(value, entry.Value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(String value, uint seed) => HashHelper.HashStringSeed(value, seed);

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal E(string value, uint hashCode)
        {
            Value = value;
            HashCode = hashCode;
        }

        internal string Value;
        internal uint HashCode;
    }

    public const int ItemCount = 10;
    public int Length => 10;
}