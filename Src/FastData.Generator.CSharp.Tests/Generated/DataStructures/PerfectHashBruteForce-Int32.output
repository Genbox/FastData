// <auto-generated />
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class MyData  : IFastSet<Int32>
{
    private E[] _entries = {
        new E(1, 0), new E(10, 11), new E(3, 2), new E(2, 3), new E(5, 4), new E(4, 5), new E(7, 6), new E(6, 7), new E(9, 8), new E(8, 9)
    };

    
    public bool Contains(int value)
    {
        if (value < 1 || value > 10)
           return false;

        uint hash = Hash(value, 1);
        uint index = MathHelper.FastMod(hash, 10, 1844674407370955162);
        ref E entry = ref _entries[index];

        return hash == entry.HashCode && value.Equals(entry.Value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(Int32 value, uint seed) => unchecked((uint)(value ^ seed));

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal E(int value, uint hashCode)
        {
            Value = value;
            HashCode = hashCode;
        }

        internal int Value;
        internal uint HashCode;
    }

    public const int ItemCount = 10;
    public int Length => 10;
}