// <auto-generated />
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class MyData  : IFastSet<Int32>
{
    private readonly B[] _buckets = {
        new B(0, 0), new B(0, 0), new B(1, 1), new B(2, 2), new B(3, 3), new B(4, 4), new B(5, 5), new B(6, 6), new B(7, 7), new B(8, 8), 
        new B(9, 9), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0)
    };

    private readonly int[] _items = new int[] {
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10
    };

    private readonly uint[] _hashCodes = {
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10
    };

    
    public bool Contains(int value)
    {
        if (value < 1 || value > 10)
           return false;

        uint hashCode = Hash(value);
        ref B b = ref _buckets[MathHelper.FastMod(hashCode, 23, 802032351030850071)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (hashCode == _hashCodes[index] && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(Int32 value) => unchecked((uint)value);

    [StructLayout(LayoutKind.Auto)]
    private struct B
    {
        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal byte StartIndex;
        internal byte EndIndex;
    }

    public const int ItemCount = 10;
    public int Length => 10;
}