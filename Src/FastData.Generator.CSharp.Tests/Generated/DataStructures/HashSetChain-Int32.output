// <auto-generated />
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class MyData  : IFastSet<Int32>
{
    private readonly sbyte[] _buckets = { 10, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

    private readonly Entry[] _entries = {
        new Entry(1, -1, 1),
        new Entry(2, -1, 2),
        new Entry(3, -1, 3),
        new Entry(4, -1, 4),
        new Entry(5, -1, 5),
        new Entry(6, -1, 6),
        new Entry(7, -1, 7),
        new Entry(8, -1, 8),
        new Entry(9, -1, 9),
        new Entry(10, -1, 10)
    };

    
    public bool Contains(int value)
    {
        if (value < 1 || value > 10)
           return false;

        uint hashCode = Hash(value);
        uint index = MathHelper.FastMod(hashCode, 10, 1844674407370955162);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref Entry entry = ref _entries[i];

            if (entry.HashCode == hashCode && entry.Value.Equals(value))
                return true;

            i = entry.Next;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(Int32 value) => unchecked((uint)value);

    [StructLayout(LayoutKind.Auto)]
    private struct Entry
    {
        public uint HashCode;
        public sbyte Next;
        public int Value;

        public Entry(uint hashCode, sbyte next, int value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const int ItemCount = 10;
    public int Length => 10;
}