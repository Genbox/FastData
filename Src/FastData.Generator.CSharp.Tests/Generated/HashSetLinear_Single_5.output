// <auto-generated />
// Structure: HashSetLinear
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;
using Genbox.FastData.Generator.CSharp.Abstracts;


internal partial class MyData : IFastSet<Single>
{
    private readonly B[] _buckets = {
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(1, 1), new B(0, 0), new B(0, 0), new B(0, 0), new B(2, 2), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(3, 3), new B(0, 0), new B(0, 0), new B(4, 4)
    };

    private readonly float[] _items = new float[] {
        0.0f, 1.0f, -340282300000000000000000000000000000000.0f, -1.0f, 340282300000000000000000000000000000000.0f
    };

    private readonly uint[] _hashCodes = {
        0, 1065353216, 4286578687, 3212836864, 2139095039
    };

    
    public bool Contains(float value)
    {
        if (value < -340282346638529000000000000000000000000.0f || value > 340282346638529000000000000000000000000.0f)
            return false;

        uint hash = Hash(value);
        ref B b = ref _buckets[MathHelper.FastMod(hash, 17, 1085102592571150096)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(float value)
    {
        return unchecked((uint)(value.GetHashCode()));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct B
    {
        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal byte StartIndex;
        internal byte EndIndex;
    }

    public const int ItemCount = 5;
    public int Length => ItemCount;
    public const float MinValue = -340282346638529000000000000000000000000.0f;
    public const float MaxValue = 340282346638529000000000000000000000000.0f;
}