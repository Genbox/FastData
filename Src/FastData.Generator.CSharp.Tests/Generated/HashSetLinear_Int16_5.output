// <auto-generated />
// Structure: HashSetLinear
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;


internal static class MyData 
{
    private static readonly B[] _buckets = {
        new B(0, 0), new B(1, 1), new B(0, 0), new B(2, 2), new B(0, 0), new B(3, 3), new B(0, 0), new B(0, 0), new B(0, 0), new B(4, 4), 
        new B(0, 0)
    };

    private static readonly short[] _items = new short[] {
        0, 1, -1, -32768, 32767
    };

    private static readonly uint[] _hashCodes = {
        0, 1, 4294967295, 4294934528, 32767
    };

    
    public static bool Contains(short value)
    {
        if (value < -32768 || value > 32767)
            return false;

        uint hash = Hash(value);
        ref B b = ref _buckets[MathHelper.FastMod(hash, 11, 1676976733973595602)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(short value)
    {
        return unchecked((uint)(value));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct B
    {
        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal byte StartIndex;
        internal byte EndIndex;
    }

    public const int ItemCount = 5;
    public const short MinValue = -32768;
    public const short MaxValue = 32767;
}