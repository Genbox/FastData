// <auto-generated />
// Structure: BinarySearch
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;
using Genbox.FastData.Generator.CSharp.Abstracts;


internal partial class BinarySearch_Int64_1 : IFastSet<Int64>
{
    private long[] _entries = new long[] {
        1
    };

    
    public bool Contains(long value)
    {
       if (value != 1)
           return false;

        int lo = 0;
        int hi = 0;
        while (lo <= hi)
        {
            int i = lo + ((hi - lo) >> 1);
            int order = _entries[i].CompareTo(value);

            if (order == 0)
                return true;
            if (order < 0)
                lo = i + 1;
            else
                hi = i - 1;
        }

        return ((~lo) >= 0);
    }

    public const int ItemCount = 1;
    public int Length => ItemCount;
    public const int MinValue = 1;
    public const int MaxValue = 1;
}