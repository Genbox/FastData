// <auto-generated />
// Structure: HashSetChain
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class HashSetChain_Single_100 : IFastSet<Single>
{
    private readonly sbyte[] _buckets = new sbyte[] {
        78, 0, 0, 0, 85, 0, 0, 0, 92, 0, 
        0, 0, 99, 0, 0, 0, 81, 0, 0, 0, 
        88, 0, 0, 0, 95, 0, 0, 0, 77, 0, 
        0, 0, 84, 0, 0, 0, 91, 0, 0, 0, 
        98, 0, 0, 0, 80, 0, 0, 0, 87, 0, 
        0, 0, 94, 0, 0, 0, 76, 0, 0, 0, 
        83, 0, 0, 0, 90, 0, 0, 0, 97, 0, 
        0, 0, 79, 0, 0, 0, 86, 0, 0, 0, 
        93, 0, 0, 0, 100, 0, 0, 0, 82, 0, 
        0, 0, 89, 0, 0, 0, 96, 0, 0, 0
     };

    private readonly E[] _entries = {
        new E(0, -1, 0), new E(1065353216, -1, 1), new E(1073741824, -1, 2), new E(1077936128, -1, 3), new E(1082130432, -1, 4), new E(1084227584, -1, 5), new E(1086324736, -1, 6), new E(1088421888, -1, 7), new E(1090519040, -1, 8), new E(1091567616, 1, 9), 
        new E(1092616192, -1, 10), new E(1093664768, -1, 11), new E(1094713344, -1, 12), new E(1095761920, -1, 13), new E(1096810496, -1, 14), new E(1097859072, -1, 15), new E(1098907648, -1, 16), new E(1099431936, 6, 17), new E(1099956224, 2, 18), new E(1100480512, -1, 19), 
        new E(1101004800, 0, 20), new E(1101529088, 7, 21), new E(1102053376, -1, 22), new E(1102577664, -1, 23), new E(1103101952, -1, 24), new E(1103626240, 8, 25), new E(1104150528, 3, 26), new E(1104674816, 9, 27), new E(1105199104, -1, 28), new E(1105723392, 10, 29), 
        new E(1106247680, -1, 30), new E(1106771968, 11, 31), new E(1107296256, -1, 32), new E(1107558400, 20, 33), new E(1107820544, 12, 34), new E(1108082688, 21, 35), new E(1108344832, 4, 36), new E(1108606976, 22, 37), new E(1108869120, 13, 38), new E(1109131264, 23, 39), 
        new E(1109393408, -1, 40), new E(1109655552, 24, 41), new E(1109917696, 14, 42), new E(1110179840, 25, 43), new E(1110441984, 5, 44), new E(1110704128, 26, 45), new E(1110966272, 15, 46), new E(1111228416, 27, 47), new E(1111490560, -1, 48), new E(1111752704, 28, 49), 
        new E(1112014848, 16, 50), new E(1112276992, 29, 51), new E(1112539136, 17, 52), new E(1112801280, 30, 53), new E(1113063424, 18, 54), new E(1113325568, 31, 55), new E(1113587712, 19, 56), new E(1113849856, 32, 57), new E(1114112000, 33, 58), new E(1114374144, 34, 59), 
        new E(1114636288, 35, 60), new E(1114898432, 36, 61), new E(1115160576, 37, 62), new E(1115422720, 38, 63), new E(1115684864, 39, 64), new E(1115815936, 52, 65), new E(1115947008, 40, 66), new E(1116078080, 53, 67), new E(1116209152, 41, 68), new E(1116340224, 54, 69), 
        new E(1116471296, 42, 70), new E(1116602368, 55, 71), new E(1116733440, 43, 72), new E(1116864512, 56, 73), new E(1116995584, 44, 74), new E(1117126656, 57, 75), new E(1117257728, 45, 76), new E(1117388800, 58, 77), new E(1117519872, 46, 78), new E(1117650944, 59, 79), 
        new E(1117782016, 47, 80), new E(1117913088, 60, 81), new E(1118044160, 48, 82), new E(1118175232, 61, 83), new E(1118306304, 49, 84), new E(1118437376, 62, 85), new E(1118568448, 50, 86), new E(1118699520, 63, 87), new E(1118830592, 51, 88), new E(1118961664, 64, 89), 
        new E(1119092736, 65, 90), new E(1119223808, 66, 91), new E(1119354880, 67, 92), new E(1119485952, 68, 93), new E(1119617024, 69, 94), new E(1119748096, 70, 95), new E(1119879168, 71, 96), new E(1120010240, 72, 97), new E(1120141312, 73, 98), new E(1120272384, 74, 99)
    };

    
    public bool Contains(float value)
    {
        if (value < 0 || value > 99)
           return false;

        uint hash = Hash(value);
        uint index = MathHelper.FastMod(hash, 100, 184467440737095517);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.HashCode == hash && value.Equals(entry.Value))
                return true;

            i = entry.Next;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(float value) => unchecked((uint)(value.GetHashCode()));

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal uint HashCode;
        internal sbyte Next;
        internal float Value;

        internal E(uint hashCode, sbyte next, float value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const int ItemCount = 100;
    public int Length => ItemCount;
    public const int MinValue = 0;
    public const int MaxValue = 99;
}