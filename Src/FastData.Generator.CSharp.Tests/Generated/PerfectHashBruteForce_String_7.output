// <auto-generated />
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class PerfectHashBruteForce_String_7  : IFastSet<String>
{
    private E[] _entries = {
        new E("aaaaaaaaa", 2986154668), new E("aaaaaaaaaa", 92103194), new E("aaaaaaa", 4178311727), new E("aaaaaa", 2610743691), new E("aaaaaaaa", 2937999138), new E("aaaaa", 3894279681), new E("aaa", 1286403677)
    };

    
    public bool Contains(string value)
    {
       if ((1012UL & (1UL << (value.Length - 1) % 64)) == 0)
           return false;

        uint hash = Hash(value, 395);
        uint index = MathHelper.FastMod(hash, 7, 2635249153387078803);
        ref E entry = ref _entries[index];

        return hash == entry.HashCode && StringComparer.Ordinal.Equals(value, entry.Value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(String value, uint seed) => HashHelper.HashStringSeed(value, seed);

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal E(string value, uint hashCode)
        {
            Value = value;
            HashCode = hashCode;
        }

        internal string Value;
        internal uint HashCode;
    }

    public const int ItemCount = 7;
    public int Length => 7;
}