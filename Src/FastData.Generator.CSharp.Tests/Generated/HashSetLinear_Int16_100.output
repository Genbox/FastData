// <auto-generated />
// Structure: HashSetLinear
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;
using Genbox.FastData.Generator.CSharp.Abstracts;


internal partial class HashSetLinear_Int16_100 : IFastSet<Int16>
{
    private readonly B[] _buckets = {
        new B(0, 0), new B(1, 1), new B(2, 2), new B(3, 3), new B(4, 4), new B(5, 5), new B(6, 6), new B(7, 7), new B(8, 8), new B(9, 9), 
        new B(10, 10), new B(11, 11), new B(12, 12), new B(13, 13), new B(14, 14), new B(15, 15), new B(16, 16), new B(17, 17), new B(18, 18), new B(19, 19), 
        new B(20, 20), new B(21, 21), new B(22, 22), new B(23, 23), new B(24, 24), new B(25, 25), new B(26, 26), new B(27, 27), new B(28, 28), new B(29, 29), 
        new B(30, 30), new B(31, 31), new B(32, 32), new B(33, 33), new B(34, 34), new B(35, 35), new B(36, 36), new B(37, 37), new B(38, 38), new B(39, 39), 
        new B(40, 40), new B(41, 41), new B(42, 42), new B(43, 43), new B(44, 44), new B(45, 45), new B(46, 46), new B(47, 47), new B(48, 48), new B(49, 49), 
        new B(50, 50), new B(51, 51), new B(52, 52), new B(53, 53), new B(54, 54), new B(55, 55), new B(56, 56), new B(57, 57), new B(58, 58), new B(59, 59), 
        new B(60, 60), new B(61, 61), new B(62, 62), new B(63, 63), new B(64, 64), new B(65, 65), new B(66, 66), new B(67, 67), new B(68, 68), new B(69, 69), 
        new B(70, 70), new B(71, 71), new B(72, 72), new B(73, 73), new B(74, 74), new B(75, 75), new B(76, 76), new B(77, 77), new B(78, 78), new B(79, 79), 
        new B(80, 80), new B(81, 81), new B(82, 82), new B(83, 83), new B(84, 84), new B(85, 85), new B(86, 86), new B(87, 87), new B(88, 88), new B(89, 89), 
        new B(90, 90), new B(91, 91), new B(92, 92), new B(93, 93), new B(94, 94), new B(95, 95), new B(96, 96), new B(97, 97), new B(98, 98), new B(99, 99), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), 
        new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0)
    };

    private readonly short[] _items = new short[] {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
        10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
        30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
        50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
        70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 
        90, 91, 92, 93, 94, 95, 96, 97, 98, 99
    };

    private readonly uint[] _hashCodes = {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
        10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
        30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
        50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
        70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 
        90, 91, 92, 93, 94, 95, 96, 97, 98, 99
    };

    
    public bool Contains(short value)
    {
        if (value < 0 || value > 99)
           return false;

        uint hash = Hash(value);
        ref B b = ref _buckets[MathHelper.FastMod(hash, 239, 77183029597111095)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(short value) => unchecked((uint)value);

    [StructLayout(LayoutKind.Auto)]
    private struct B
    {
        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal byte StartIndex;
        internal byte EndIndex;
    }

    public const int ItemCount = 100;
    public int Length => ItemCount;
    public const int MinValue = 0;
    public const int MaxValue = 99;
}