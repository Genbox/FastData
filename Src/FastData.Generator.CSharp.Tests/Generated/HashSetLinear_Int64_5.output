// <auto-generated />
// Structure: HashSetLinear
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;


internal static class MyData 
{
    private static readonly B[] _buckets = {
        new B(0, 1), new B(2, 2), new B(3, 4), new B(0, 0), new B(0, 0), new B(0, 0), new B(0, 0)
    };

    private static readonly long[] _items = new long[] {
        0l, -1l, 1l, 9223372036854775807l, -9223372036854775808l
    };

    private static readonly uint[] _hashCodes = {
        0, 0, 1, 2147483648, 2147483648
    };

    
    public static bool Contains(long value)
    {
        if (value < -9223372036854775808l || value > 9223372036854775807l)
            return false;

        uint hash = Hash(value);
        ref B b = ref _buckets[MathHelper.FastMod(hash, 7, 2635249153387078803)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (_hashCodes[index] == hash && value.Equals(_items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(long value)
    {
        return unchecked((uint)(value));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct B
    {
        internal B(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal byte StartIndex;
        internal byte EndIndex;
    }

    public const int ItemCount = 5;
    public const long MinValue = -9223372036854775808l;
    public const long MaxValue = 9223372036854775807l;
}