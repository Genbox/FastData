// <auto-generated />
// Structure: HashSetChain
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;
using Genbox.FastData.Generator.CSharp.Abstracts;


internal partial class MyData : IFastSet<UInt64>
{
    private readonly sbyte[] _buckets = new sbyte[] {
        4, 2, 3, 0
     };

    private readonly E[] _entries = {
        new E(0, -1, 0ul), new E(1, -1, 1ul), new E(2, -1, 2ul), new E(0, 0, 18446744073709551615ul)
    };

    
    public bool Contains(ulong value)
    {
        if (value < 0ul || value > 18446744073709551615ul)
            return false;

        uint hash = Hash(value);
        uint index = hash & 3;
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.HashCode == hash && value.Equals(entry.Value))
                return true;

            i = entry.Next;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(ulong value)
    {
        return unchecked((uint)(value));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal uint HashCode;
        internal sbyte Next;
        internal ulong Value;

        internal E(uint hashCode, sbyte next, ulong value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const int ItemCount = 4;
    public int Length => ItemCount;
    public const ulong MinValue = 0ul;
    public const ulong MaxValue = 18446744073709551615ul;
}