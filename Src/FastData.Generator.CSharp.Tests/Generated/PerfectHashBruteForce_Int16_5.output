// <auto-generated />
// Structure: PerfectHashBruteForce
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;


internal static class MyData 
{
    private static E[] _entries = {
        new E(1, 5u), new E(-1, 4294967291u), new E(-32768, 4294934532u), new E(32767, 32763u), new E(0, 4u)
    };

    
    public static bool Contains(short value)
    {
        if (value < -32768 || value > 32767)
            return false;

        uint hash = Hash(value, 4);
        uint index = unchecked((uint)(((((3689348814741910324ul * hash) >> 32) + 1) * 5) >> 32));
        ref E entry = ref _entries[index];

        return hash == entry.HashCode && value.Equals(entry.Value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(short value, uint seed)
    {
        return unchecked((uint)(value^ seed));
    }

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal E(short value, uint hashCode)
        {
            Value = value;
            HashCode = hashCode;
        }

        internal short Value;
        internal uint HashCode;
    }

    public const int ItemCount = 5;
    public const short MinValue = -32768;
    public const short MaxValue = 32767;
}