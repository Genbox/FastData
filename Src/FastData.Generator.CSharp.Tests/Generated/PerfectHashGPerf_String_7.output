// <auto-generated />
// Structure: PerfectHashGPerf
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Genbox.FastData.Helpers;
using Genbox.FastData.Generator.CSharp.Abstracts;


internal partial class MyData : IFastSet<String>
{
    private sbyte[] _asso = new sbyte[] {
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 5, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
        31, 31, 31, 31, 31, 31
    };

    private string[] _items = {
        "aaa", null, null, null, null, "aaaaa", null, null, null, null, 
        "aaaaaa", null, null, null, null, "aaaaaaa", null, null, null, null, 
        "aaaaaaaa", null, null, null, null, "aaaaaaaaa", null, null, null, null, 
        "aaaaaaaaaa"
    };

    
    public bool Contains(string value)
    {
       if ((1012UL & (1UL << (value.Length - 1) % 64)) == 0)
           return false;

        uint hash = Hash(value);

        if (hash > 30)
            return false;

        return StringComparer.Ordinal.Equals(value, _items[hash]);
    }

    private uint Hash(string str)
    {
        uint hash = 0;
        switch (str.Length)
        {
            default:
                hash += (uint)_asso[str[9]];
                goto case 9;
            case 9:
                hash += (uint)_asso[str[8]];
                goto case 8;
            case 8:
                hash += (uint)_asso[str[7]];
                goto case 7;
            case 7:
                hash += (uint)_asso[str[6]];
                goto case 6;
            case 6:
                hash += (uint)_asso[str[5]];
                goto case 5;
            case 5:
                goto case 4;
            case 4:
                hash += (uint)_asso[str[3]];
                goto case 3;
            case 3:
                break;
            }

            return hash;
    }


    public const int ItemCount = 7;
    public int Length => ItemCount;
    public const int MinLength = 3;
    public const int MaxLength = 10;
}