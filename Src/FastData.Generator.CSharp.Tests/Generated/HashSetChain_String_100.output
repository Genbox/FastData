// <auto-generated />
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class HashSetChain_String_100  : IFastSet<String>
{
    private readonly sbyte[] _buckets = new sbyte[] {
        0, 51, 85, 66, 43, 11, 27, 0, 0, 0, 
        0, 0, 98, 73, 89, 84, 61, 33, 41, 17, 
        21, 68, 0, 0, 0, 0, 96, 75, 54, 0, 
        63, 48, 14, 82, 0, 0, 0, 50, 100, 93, 
        72, 0, 52, 0, 32, 77, 12, 88, 65, 0, 
        0, 0, 0, 0, 74, 57, 69, 91, 0, 0, 
        83, 86, 67, 44, 18, 28, 0, 0, 0, 90, 
        0, 97, 76, 0, 81, 62, 0, 42, 49, 22, 
        80, 0, 0, 0, 94, 95, 78, 53, 87, 64, 
        45, 13, 25, 99, 0, 0, 58, 0, 92, 71
     };

    private readonly E[] _entries = {
        new E(380679832, -1, "0"), new E(3109563187, -1, "1"), new E(1543479246, -1, "2"), new E(4272362601, -1, "3"), new E(2706278660, -1, "4"), new E(1140194719, -1, "5"), new E(3869078074, -1, "6"), new E(2302994133, -1, "7"), new E(24449472, -1, "8"), new E(2753332827, -1, "9"), 
        new E(1942893905, -1, "10"), new E(3508977846, 2, "11"), new E(780094491, -1, "12"), new E(2346178432, 0, "13"), new E(4268492733, 7, "14"), new E(1539609378, -1, "15"), new E(3105693319, 5, "16"), new E(376809964, -1, "17"), new E(2299124265, -1, "18"), new E(3865208206, -1, "19"), 
        new E(3246855820, -1, "20"), new E(1680771879, -1, "21"), new E(114687938, -1, "22"), new E(2843571293, -1, "23"), new E(921256992, -1, "24"), new E(3650140347, -1, "25"), new E(2084056406, 19, "26"), new E(517972465, 18, "27"), new E(3603086180, -1, "28"), new E(2037002239, -1, "29"), 
        new E(1660568903, -1, "30"), new E(3226652844, -1, "31"), new E(2823368317, -1, "32"), new E(94484962, -1, "33"), new E(3629937371, -1, "34"), new E(901054016, -1, "35"), new E(497769489, -1, "36"), new E(2063853430, -1, "37"), new E(2016799263, -1, "38"), new E(3582883204, -1, "39"), 
        new E(2964530818, -1, "40"), new E(1398446877, -1, "41"), new E(1801731404, 39, "42"), new E(235647463, 38, "43"), new E(638931990, -1, "44"), new E(3367815345, -1, "45"), new E(3771099872, 8, "46"), new E(2205015931, -1, "47"), new E(3320761178, 15, "48"), new E(1754677237, -1, "49"), 
        new E(1378243901, 3, "50"), new E(2944327842, -1, "51"), new E(215444487, 1, "52"), new E(1781528428, -1, "53"), new E(3347612369, -1, "54"), new E(618729014, -1, "55"), new E(2184812955, -1, "56"), new E(3750896896, -1, "57"), new E(1734474261, -1, "58"), new E(3300558202, -1, "59"), 
        new E(2682205816, 35, "60"), new E(1116121875, -1, "61"), new E(3845005230, 37, "62"), new E(2278921289, 36, "63"), new E(712837348, -1, "64"), new E(3441720703, 30, "65"), new E(1875636762, 33, "66"), new E(309552821, -1, "67"), new E(2325975456, -1, "68"), new E(759891515, -1, "69"), 
        new E(1095918899, -1, "70"), new E(2662002840, -1, "71"), new E(2258718313, -1, "72"), new E(3824802254, -1, "73"), new E(3421517727, 9, "74"), new E(692634372, 46, "75"), new E(289349845, 45, "76"), new E(1855433786, -1, "77"), new E(739688539, 29, "78"), new E(2305772480, 28, "79"), 
        new E(1788434974, 6, "80"), new E(222351033, 14, "81"), new E(625635560, 4, "82"), new E(3354518915, 69, "83"), new E(4114033802, 59, "84"), new E(2547949861, 58, "85"), new E(2951234388, -1, "86"), new E(1385150447, 25, "87"), new E(1432204614, 55, "88"), new E(4161087969, 54, "89"), 
        new E(202148057, -1, "90"), new E(1768231998, -1, "91"), new E(3334315939, 78, "92"), new E(605432584, -1, "93"), new E(2527746885, -1, "94"), new E(4093830826, -1, "95"), new E(1364947471, 34, "96"), new E(2931031412, -1, "97"), new E(4140884993, 23, "98"), new E(1412001638, 22, "99")
    };

    
    public bool Contains(string value)
    {
        if (value.Length < 1 || value.Length > 2)
           return false;

        uint hash = Hash(value);
        uint index = MathHelper.FastMod(hash, 100, 184467440737095517);
        sbyte i = (sbyte)(_buckets[index] - 1);

        while (i >= 0)
        {
            ref E entry = ref _entries[i];

            if (entry.HashCode == hash && StringComparer.Ordinal.Equals(value, entry.Value))
                return true;

            i = entry.Next;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(string value) => HashHelper.HashString(value);

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal uint HashCode;
        internal sbyte Next;
        internal string Value;

        internal E(uint hashCode, sbyte next, string value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const int ItemCount = 100;
    public int Length => 100;
}