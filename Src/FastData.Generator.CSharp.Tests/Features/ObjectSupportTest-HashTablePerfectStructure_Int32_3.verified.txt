// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashTable (HashTablePerfect)
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
public class Person
{
    public Person(int age, string name, Person other)
    {
        Age = age;
        Name = name;
        Other = other;
    }
    int Age { get; set; }
    string Name { get; set; }
    Person Other { get; set; }

};

internal static class HashTablePerfectStructure_Int32_3
{
[StructLayout(LayoutKind.Auto)]
private struct E
{
    internal int Key;
    
    internal Person Value;

    internal E(int key, Person value)
    {
        Key = key;
        
        Value = value;
    }
}
    private static readonly E[] _entries = {
        new E(3, new Person(1, "Bob", new Person(4, "Anna", null))), new E(1, new Person(2, "Billy", null)), new E(2, new Person(3, "Bibi", null))
    };


    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(int value)
    {
        return (ulong)value;
    }

    
    public static bool Contains(int key)
    {
        if (key < 1 || key > 3)
            return false;

        ulong hash = Hash(key);
        uint index = (uint)(hash % 3);
        ref var entry = ref _entries[index];

        return key == entry.Key;
    }
    
    public static bool TryLookup(int key, out Person value)
    {
        if (key < 1 || key > 3)
        {
            value = default;
            return false;
        }

        ulong hash = Hash(key);
        uint index = (uint)(hash % 3);
        ref E entry = ref _entries[index];

        if (key == entry.Key)
        {
            value = entry.Value;
            return true;
        }

        value = default;
        return false;
    }

    public const uint ItemCount = 3;
    public const int MinKey = 1;
    public const int MaxKey = 3;
}