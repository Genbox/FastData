// <auto-generated />
// This file is auto-generated. Do not edit manually.
// Structure: HashTable (HashTablePerfect)
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

internal static class StaticData
{
    private static readonly E[] _entries = {
        new E("item1", 17825845005562073391), new E("item3", 17825845002429905509), new E("item2", 17825845003995989450)
    };

    
    public static bool Contains(string key)
    {
        if (key.Length != 5u)
            return false;

        ulong hash = Hash(key);
        uint index = (uint)(hash % 3);
        ref E entry = ref _entries[index];

        return StringComparer.Ordinal.Equals(hash, entry.HashCode) && StringComparer.Ordinal.Equals(key, entry.Key);
    }


    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ulong Hash(string value)
    {
        ulong hash = 352654597;

        ref char ptr = ref MemoryMarshal.GetReference(value.AsSpan());
        int len = value.Length;

        while (len-- > 0)
        {
            hash = (((hash << 5) | (hash >> 27)) + hash) ^ ptr;
            ptr = ref Unsafe.Add(ref ptr, 1);
        }

        return 352654597 + (hash * 1566083941);
    }

    [StructLayout(LayoutKind.Auto)]
    private struct E
    {
        internal E(string key, ulong hashCode)
        {
            Key = key;
            HashCode = hashCode;
        }

        internal string Key;
        internal ulong HashCode;
    }

    public const uint ItemCount = 3;
    public const uint MinKeyLength = 5;
    public const uint MaxKeyLength = 5;
}
