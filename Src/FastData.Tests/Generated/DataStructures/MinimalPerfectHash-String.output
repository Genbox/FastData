// <auto-generated />
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class MyData  : IFastSet<String>
{
    private Entry[] _entries = new Entry[] {
        new Entry("item6", 859875200u),
        new Entry("item5", 2425959141u),
        new Entry("item4", 3992043082u),
        new Entry("item1", 100360313u),
        new Entry("item8", 1310213894u),
        new Entry("item7", 3588758555u),
        new Entry("item10", 2477118126u),
        new Entry("item3", 1263159727u),
        new Entry("item2", 2829243668u),
        new Entry("item9", 4039097249u)
    };

    
    public bool Contains(String value)
    {
        if (value.Length < 5 || value.Length > 6)
           return false;

        uint hash = Hash(value, 2);
        uint index = MathHelper.FastMod(hash, 10, 1844674407370955162);
        ref Entry entry = ref _entries[index];

        return hash == entry.HashCode && StringComparer.Ordinal.Equals(value, entry.Value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(String value, uint seed) => HashHelper.HashStringSeed(value, seed);

    [StructLayout(LayoutKind.Auto)]
    private struct Entry
    {
        public Entry(String value, uint hashCode)
        {
            Value = value;
            HashCode = hashCode;
        }

        public String Value;
        public uint HashCode;
    }

    public const int ItemCount = 10;
    public int Length => 10;
}