    private static readonly Bucket[] _buckets = {
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(1, 1),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(2, 2),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(3, 3),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(4, 4),
        new Bucket(5, 5),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(6, 6),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(7, 7),
        new Bucket(8, 8),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(9, 9),
        new Bucket(0, 0),
        new Bucket(0, 0)
    };

    private static readonly String[] _items = {
        "item10",
        "item9",
        "item8",
        "item7",
        "item5",
        "item6",
        "item4",
        "item2",
        "item3",
        "item1"
    };

    private static readonly uint[] _hashCodes = { 1309368076, 2368213971, 802130030, 2818552665, 3981352079, 1252468724, 2415268138, 3578067552, 849184197, 2011983611 };

    
    public static bool Contains(String value)
    {
        if (value.Length < 5 || value.Length > 6)
           return false;

        uint hashCode = HashHelper.HashString(value);
        ref Bucket b = ref _buckets[MathHelper.FastMod(hashCode, 47, 392483916461905354)];

        int index = b.StartIndex;
        int endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (hashCode == _hashCodes[index] && StringComparer.Ordinal.Equals(value, _items[index]))
                return true;

            index++;
        }

        return false;
    }



    [StructLayout(LayoutKind.Auto)]
    private struct Bucket
    {
        internal Bucket(int startIndex, int endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal int StartIndex;
        internal int EndIndex;
    }