// <auto-generated />
#nullable enable
using Genbox.FastData.Abstracts;
using Genbox.FastData.Generator.CSharp.Abstracts;
using Genbox.FastData.Helpers;
using Genbox.FastData;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System;


internal partial class MyData  : IFastSet<String>
{
    private readonly Bucket[] _buckets = {
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(1, 1),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(2, 2),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(3, 3),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(4, 4),
        new Bucket(5, 5),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(6, 6),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(7, 7),
        new Bucket(8, 8),
        new Bucket(0, 0),
        new Bucket(0, 0),
        new Bucket(9, 9),
        new Bucket(0, 0),
        new Bucket(0, 0)
    };

    private readonly String[] _items = {
        "item10",
        "item9",
        "item8",
        "item7",
        "item5",
        "item6",
        "item4",
        "item2",
        "item3",
        "item1"
    };

    private readonly uint[] _hashCodes = { 1309368076, 2368213971, 802130030, 2818552665, 3981352079, 1252468724, 2415268138, 3578067552, 849184197, 2011983611 };

    
    public bool Contains(String value)
    {
        if (value.Length < 5 || value.Length > 6)
           return false;

        uint hashCode = Hash(value);
        ref Bucket b = ref _buckets[MathHelper.FastMod(hashCode, 47, 392483916461905354)];

        byte index = b.StartIndex;
        byte endIndex = b.EndIndex;

        while (index <= endIndex)
        {
            if (hashCode == _hashCodes[index] && StringComparer.Ordinal.Equals(value, _items[index]))
                return true;

            index++;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint Hash(String value) => HashHelper.HashString(value);

    [StructLayout(LayoutKind.Auto)]
    private struct Bucket
    {
        internal Bucket(byte startIndex, byte endIndex)
        {
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        internal byte StartIndex;
        internal byte EndIndex;
    }

    public const int ItemCount = 10;
    public int Length => 10;
}