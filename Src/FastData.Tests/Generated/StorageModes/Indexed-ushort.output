// <auto-generated />
#nullable enable
using Genbox.FastData;
using Genbox.FastData.Abstracts;
using Genbox.FastData.Helpers;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Text;
using System;


internal static class ImmutableSet 
{
    private static readonly int[] _buckets = { 1, 3, 0 };

    private static readonly Entry[] _entries = { 
        new Entry(0, -1, 0),
        new Entry(885181228, -1, 1),
        new Entry(1694925799, 1, 2)
    };

    
    public static bool Contains(ushort value)
    {


        uint hashCode = unchecked((uint)HashHelper.Hash(value, 0));
        uint index = MathHelper.FastMod(hashCode, 3, 6148914691236517206);
        int i = _buckets[index] - 1;

        while (i >= 0)
        {
            ref Entry entry = ref _entries[i];

            if (entry.HashCode == hashCode && entry.Value.Equals(value))
                return true;

            i = entry.Next;
        }

        return false;
    }

    [StructLayout(LayoutKind.Auto)]
    private struct Entry
    {
        public uint HashCode;
        public short Next;
        public ushort Value;

        public Entry(uint hashCode, short next, ushort value)
        {
            HashCode = hashCode;
            Next = next;
            Value = value;
        }
    }

    public const int ItemCount = 3;
}
