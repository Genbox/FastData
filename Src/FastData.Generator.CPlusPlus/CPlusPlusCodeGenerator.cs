using System.Globalization;
using System.Text;
using Genbox.FastData.Abstracts;
using Genbox.FastData.Configs;
using Genbox.FastData.Contexts;
using Genbox.FastData.Enums;
using Genbox.FastData.Extensions;
using Genbox.FastData.Generator.CPlusPlus.Internal.Generators;

namespace Genbox.FastData.Generator.CPlusPlus;

public class CPlusPlusCodeGenerator(CPlusPlusGeneratorConfig userCfg) : IGenerator
{
    private readonly StringBuilder _sb = new StringBuilder();

    public string Generate(GeneratorConfig genCfg, IContext context)
    {
        _sb.Clear();
        AppendHeader(genCfg);

        _sb.Append(context switch
        {
            SingleValueContext c2 => new SingleValueCode(genCfg, userCfg, c2).Generate(),
            ArrayContext c1 => new ArrayCode(genCfg, userCfg, c1).Generate(),
            BinarySearchContext c2 => new BinarySearchCode(genCfg, userCfg, c2).Generate(),
            ConditionalContext c2 => new ConditionalCode(genCfg, userCfg, c2).Generate(),
            EytzingerSearchContext c2 => new EytzingerSearchCode(genCfg, userCfg, c2).Generate(),
            PerfectHashBruteForceContext c2 => new PerfectHashBruteForceCode(genCfg, userCfg, c2).Generate(),
            PerfectHashGPerfContext c2 => new PerfectHashGPerfCode(genCfg, userCfg, c2).Generate(),
            HashSetChainContext c2 => new HashSetChainCode(genCfg, userCfg, c2).Generate(),
            HashSetLinearContext c2 => new HashSetLinearCode(genCfg, userCfg, c2).Generate(),
            KeyLengthContext c2 => new KeyLengthCode(genCfg, userCfg, c2).Generate(),
            _ => throw new NotSupportedException("The context type is not supported: " + context.GetType().Name)
        });

        AppendFooter(genCfg);
        return _sb.ToString();
    }

    private void AppendHeader(GeneratorConfig genCfg)
    {
        _sb.AppendLine("// This file is auto-generated. Do not edit manually.");
        _sb.Append("// Structure: ").AppendLine(genCfg.StructureType.ToString());

#if RELEASE
        _sb.Append("// Generated by: ").AppendLine(genCfg.Metadata.Program);
        _sb.Append("// Generated on: ").AppendLine(genCfg.Metadata.Timestamp);
#endif

        if (genCfg.DataType == DataType.String)
            _sb.AppendLine("#include <string>");

        _sb.Append($$"""
                     #include <array>
                     #include <cstdint>

                     class {{userCfg.ClassName}}
                     {

                     """);
    }

    private void AppendFooter(GeneratorConfig genCfg)
    {
        _sb.Append($"""


                        static constexpr int item_count = {genCfg.Constants.ItemCount};
                    """);

        _sb.AppendLine();

        if (genCfg.DataType.IsInteger())
        {
            string minType;
            string maxType;

            if (genCfg.DataType.IsUnsigned())
            {
                minType = GetSmallestUnsignedType(Convert.ToUInt64(genCfg.Constants.MinValue, NumberFormatInfo.InvariantInfo));
                maxType = GetSmallestUnsignedType(Convert.ToUInt64(genCfg.Constants.MaxValue, NumberFormatInfo.InvariantInfo));
            }
            else
            {
                minType = GetSmallestSignedType(Convert.ToInt64(genCfg.Constants.MinValue, NumberFormatInfo.InvariantInfo));
                maxType = GetSmallestSignedType(Convert.ToInt64(genCfg.Constants.MaxValue, NumberFormatInfo.InvariantInfo));
            }

            _sb.Append("    static constexpr ").Append(minType).Append(" min_value = ").Append(genCfg.Constants.MinValue).AppendLine(";");
            _sb.Append("    static constexpr ").Append(maxType).Append(" max_value = ").Append(genCfg.Constants.MaxValue).AppendLine(";");
        }
        else if (genCfg.DataType == DataType.String)
        {
            _sb.Append("    static constexpr int min_length = ").Append(genCfg.Constants.MinValue).AppendLine(";");
            _sb.Append("    static constexpr int max_length = ").Append(genCfg.Constants.MaxValue).AppendLine(";");
        }

        _sb.Append("};");
    }
}