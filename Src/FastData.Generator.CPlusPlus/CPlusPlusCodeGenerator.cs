using Genbox.FastData.Extensions;
using Genbox.FastData.Generator.CPlusPlus.Internal.Generators;

namespace Genbox.FastData.Generator.CPlusPlus;

public class CPlusPlusCodeGenerator(CPlusPlusCodeGeneratorConfig userCfg) : ICodeGenerator
{
    private readonly StringBuilder _sb = new StringBuilder();

    public bool UseUTF16Encoding => false;

    public bool TryGenerate<T>(GeneratorConfig genCfg, IContext context, out string? source)
    {
        source = null;

        //C++ generator does not support chars outside ASCII
        if (genCfg.DataType == DataType.Char && (char)genCfg.Constants.MaxValue > 127)
            return false;

        _sb.Clear();
        AppendHeader(genCfg);

        _sb.Append(context switch
        {
            SingleValueContext<T> c2 => new SingleValueCode<T>(genCfg, userCfg, c2).Generate(),
            ArrayContext<T> c1 => new ArrayCode<T>(genCfg, userCfg, c1).Generate(),
            BinarySearchContext<T> c2 => new BinarySearchCode<T>(genCfg, userCfg, c2).Generate(),
            ConditionalContext<T> c2 => new ConditionalCode<T>(genCfg, userCfg, c2).Generate(),
            EytzingerSearchContext<T> c2 => new EytzingerSearchCode<T>(genCfg, userCfg, c2).Generate(),
            PerfectHashBruteForceContext<T> c2 => new PerfectHashBruteForceCode<T>(genCfg, userCfg, c2).Generate(),
            PerfectHashGPerfContext c2 => new PerfectHashGPerfCode(genCfg, userCfg, c2).Generate(),
            HashSetChainContext<T> c2 => new HashSetChainCode<T>(genCfg, userCfg, c2).Generate(),
            HashSetLinearContext<T> c2 => new HashSetLinearCode<T>(genCfg, userCfg, c2).Generate(),
            KeyLengthContext c2 => new KeyLengthCode(genCfg, userCfg, c2).Generate(),
            _ => throw new NotSupportedException("The context type is not supported: " + context.GetType().Name)
        });

        AppendFooter(genCfg);
        source = _sb.ToString();
        return true;
    }

    private void AppendHeader(GeneratorConfig genCfg)
    {
        _sb.AppendLine("// This file is auto-generated. Do not edit manually.");
        _sb.Append("// Structure: ").AppendLine(genCfg.StructureType.ToString());

#if RELEASE
        _sb.Append("// Generated by: ").AppendLine(genCfg.Metadata.Program);
        _sb.Append("// Generated on: ").AppendLine(genCfg.Metadata.Timestamp);
#endif
        _sb.AppendLine("#pragma once"); //Add include guard

        if (genCfg.DataType == DataType.String)
            _sb.AppendLine("#include <string_view>");

        _sb.Append($$"""
                     #include <array>
                     #include <cstdint>
                     #include <limits>

                     class {{userCfg.ClassName}} final
                     {

                     """);
    }

    private void AppendFooter(GeneratorConfig genCfg)
    {
        _sb.Append($"""


                        static constexpr unsigned int item_count = {genCfg.Constants.ItemCount};
                    """);

        _sb.AppendLine();

        if (genCfg.DataType.IsInteger())
        {
            _sb.Append("    static constexpr ").Append(genCfg.GetTypeName()).Append(" min_value = ").Append(ToValueLabel(genCfg.Constants.MinValue, genCfg.DataType))
               .AppendLine(";");
            _sb.Append("    static constexpr ").Append(genCfg.GetTypeName()).Append(" max_value = ").Append(ToValueLabel(genCfg.Constants.MaxValue, genCfg.DataType))
               .AppendLine(";");
        }
        else if (genCfg.DataType == DataType.String)
        {
            _sb.Append("    static constexpr int min_length = ").Append(genCfg.Constants.MinValue).AppendLine(";");
            _sb.Append("    static constexpr int max_length = ").Append(genCfg.Constants.MaxValue).AppendLine(";");
        }

        _sb.AppendLine($"""

                        public:
                            {userCfg.ClassName}() = delete;
                            {userCfg.ClassName}(const {userCfg.ClassName}&) = delete;
                            {userCfg.ClassName}& operator=(const {userCfg.ClassName}&) = delete;
                            {userCfg.ClassName}({userCfg.ClassName}&&) = delete;
                            {userCfg.ClassName}& operator=({userCfg.ClassName}&&) = delete;
                        """);

        _sb.Append("};");
    }
}